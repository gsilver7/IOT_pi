{"version":3,"file":"ice.js","sourceRoot":"","sources":["../../../src/ice.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes } from \"crypto\";\nimport { isIPv4 } from \"net\";\n\nimport * as Int64 from \"int64-buffer\";\n\nimport isEqual from \"lodash/isEqual.js\";\nimport timers from \"timers/promises\";\nimport { type Address, Event, debug } from \"./imports/common\";\n\nimport { Candidate, candidateFoundation, candidatePriority } from \"./candidate\";\nimport { MdnsLookup } from \"./dns/lookup\";\nimport type { TransactionError } from \"./exceptions\";\nimport { type Cancelable, PQueue, cancelable, randomString } from \"./helper\";\nimport {\n  CONSENT_FAILURES,\n  CONSENT_INTERVAL,\n  CandidatePair,\n  CandidatePairState,\n  ICE_COMPLETED,\n  ICE_FAILED,\n  type IceConnection,\n  type IceOptions,\n  type IceState,\n  defaultOptions,\n  serverReflexiveCandidate,\n  sortCandidatePairs,\n  validateAddress,\n  validateRemoteCandidate,\n} from \"./iceBase\";\nimport { classes, methods } from \"./stun/const\";\nimport { Message } from \"./stun/message\";\nimport { StunProtocol } from \"./stun/protocol\";\nimport { createStunOverTurnClient } from \"./turn/protocol\";\nimport type { Protocol } from \"./types/model\";\nimport { getHostAddresses } from \"./utils\";\n\nconst log = debug(\"werift-ice : packages/ice/src/ice.ts : log\");\n\nexport class Connection implements IceConnection {\n  localUsername = randomString(4);\n  localPassword = randomString(22);\n  remoteIsLite = false;\n  remotePassword: string = \"\";\n  remoteUsername: string = \"\";\n  checkList: CandidatePair[] = [];\n  localCandidates: Candidate[] = [];\n  stunServer?: Address;\n  turnServer?: Address;\n  options: IceOptions;\n  remoteCandidatesEnd = false;\n  localCandidatesEnd = false;\n  generation = -1;\n  userHistory: { [username: string]: string } = {};\n  private readonly tieBreaker: bigint = BigInt(\n    new Int64.Uint64BE(randomBytes(64)).toString(),\n  );\n  state: IceState = \"new\";\n  lookup?: MdnsLookup;\n\n  private _remoteCandidates: Candidate[] = [];\n  // P2P接続完了したソケット\n  nominated?: CandidatePair;\n  private nominating = false;\n  private checkListDone = false;\n  private checkListState = new PQueue<number>();\n  private earlyChecks: [Message, Address, Protocol][] = [];\n  private earlyChecksDone = false;\n  private localCandidatesStart = false;\n  private protocols: Protocol[] = [];\n  private queryConsentHandle?: Cancelable<void>;\n  private promiseGatherCandidates?: Event<[]>;\n\n  readonly onData = new Event<[Buffer]>();\n  readonly stateChanged = new Event<[IceState]>();\n  readonly onIceCandidate: Event<[Candidate]> = new Event();\n\n  constructor(\n    private _iceControlling: boolean,\n    options?: Partial<IceOptions>,\n  ) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n    const { stunServer, turnServer } = this.options;\n    this.stunServer = validateAddress(stunServer) ?? [\n      \"stun.l.google.com\",\n      19302,\n    ];\n    this.turnServer = validateAddress(turnServer);\n    this.restart();\n  }\n\n  get iceControlling() {\n    return this._iceControlling;\n  }\n\n  set iceControlling(value: boolean) {\n    if (this.generation > 0 || this.nominated) {\n      return;\n    }\n    this._iceControlling = value;\n    for (const pair of this.checkList) {\n      pair.iceControlling = value;\n    }\n  }\n\n  async restart() {\n    this.generation++;\n\n    this.localUsername = randomString(4);\n    this.localPassword = randomString(22);\n    if (this.options.localPasswordPrefix) {\n      this.localPassword =\n        this.options.localPasswordPrefix +\n        this.localPassword.slice(this.options.localPasswordPrefix.length);\n    }\n    this.userHistory[this.localUsername] = this.localPassword;\n\n    this.remoteUsername = \"\";\n    this.remotePassword = \"\";\n    this.localCandidates = [];\n    this._remoteCandidates = [];\n    this.remoteCandidatesEnd = false;\n    this.localCandidatesEnd = false;\n    this.state = \"new\";\n    this.lookup?.close?.();\n    this.lookup = undefined;\n    this.nominated = undefined;\n    this.nominating = false;\n    this.checkList = [];\n    this.checkListDone = false;\n    this.checkListState = new PQueue<number>();\n    this.earlyChecks = [];\n    this.earlyChecksDone = false;\n    this.localCandidatesStart = false;\n\n    // protocolsはincomingのearlyCheckに使うかもしれないので残す\n    for (const protocol of this.protocols) {\n      if (protocol.localCandidate) {\n        protocol.localCandidate.generation = this.generation;\n        protocol.localCandidate.ufrag = this.localUsername;\n      }\n    }\n\n    this.queryConsentHandle?.resolve?.();\n    this.queryConsentHandle = undefined;\n    this.promiseGatherCandidates = undefined;\n  }\n\n  resetNominatedPair() {\n    log(\"resetNominatedPair\");\n    this.nominated = undefined;\n    this.nominating = false;\n  }\n\n  setRemoteParams({\n    iceLite,\n    usernameFragment,\n    password,\n  }: {\n    iceLite: boolean;\n    usernameFragment: string;\n    password: string;\n  }) {\n    log(\"setRemoteParams\", { iceLite, usernameFragment, password });\n    this.remoteIsLite = iceLite;\n    this.remoteUsername = usernameFragment;\n    this.remotePassword = password;\n  }\n\n  // 4.1.1 Gathering Candidates\n  async gatherCandidates() {\n    if (!this.localCandidatesStart) {\n      this.localCandidatesStart = true;\n      this.promiseGatherCandidates = new Event();\n\n      let address = getHostAddresses(\n        this.options.useIpv4,\n        this.options.useIpv6,\n      );\n      const { interfaceAddresses } = this.options;\n      if (interfaceAddresses) {\n        const filteredAddresses = address.filter((check) =>\n          Object.values(interfaceAddresses).includes(check),\n        );\n        if (filteredAddresses.length) {\n          address = filteredAddresses;\n        }\n      }\n      if (this.options.additionalHostAddresses) {\n        address = Array.from(\n          new Set([...this.options.additionalHostAddresses, ...address]),\n        );\n      }\n\n      const candidates = await this.getCandidates(address, 5);\n      this.localCandidates = [...this.localCandidates, ...candidates];\n\n      this.localCandidatesEnd = true;\n      this.promiseGatherCandidates.execute();\n    }\n    this.setState(\"completed\");\n  }\n\n  private ensureProtocol(protocol: Protocol) {\n    protocol.onRequestReceived.subscribe((msg, addr, data) => {\n      if (msg.messageMethod !== methods.BINDING) {\n        this.respondError(msg, addr, protocol, [400, \"Bad Request\"]);\n        return;\n      }\n\n      const txUsername = msg.getAttributeValue(\"USERNAME\");\n      // 相手にとってのremoteは自分にとってのlocal\n      const { remoteUsername: localUsername } = decodeTxUsername(txUsername);\n      const localPassword =\n        this.userHistory[localUsername] ?? this.localPassword;\n\n      const { iceControlling } = this;\n\n      // 7.2.1.1.  Detecting and Repairing Role Conflicts\n      if (iceControlling && msg.attributesKeys.includes(\"ICE-CONTROLLING\")) {\n        if (this.tieBreaker >= msg.getAttributeValue(\"ICE-CONTROLLING\")) {\n          this.respondError(msg, addr, protocol, [487, \"Role Conflict\"]);\n          return;\n        } else {\n          this.switchRole(false);\n        }\n      } else if (\n        !iceControlling &&\n        msg.attributesKeys.includes(\"ICE-CONTROLLED\")\n      ) {\n        if (this.tieBreaker < msg.getAttributeValue(\"ICE-CONTROLLED\")) {\n          this.respondError(msg, addr, protocol, [487, \"Role Conflict\"]);\n        } else {\n          this.switchRole(true);\n          return;\n        }\n      }\n\n      if (\n        this.options.filterStunResponse &&\n        !this.options.filterStunResponse(msg, addr, protocol)\n      ) {\n        return;\n      }\n\n      // # send binding response\n      const response = new Message(\n        methods.BINDING,\n        classes.RESPONSE,\n        msg.transactionId,\n      );\n\n      response\n        .setAttribute(\"XOR-MAPPED-ADDRESS\", addr)\n        .addMessageIntegrity(Buffer.from(localPassword, \"utf8\"))\n        .addFingerprint();\n      protocol.sendStun(response, addr).catch((e) => {\n        log(\"sendStun error\", e);\n      });\n\n      if (this.checkList.length === 0 && !this.earlyChecksDone) {\n        this.earlyChecks.push([msg, addr, protocol]);\n      } else {\n        this.checkIncoming(msg, addr, protocol);\n      }\n    });\n    protocol.onDataReceived.subscribe((data) => {\n      try {\n        this.onData.execute(data);\n      } catch (error) {\n        log(\"dataReceived\", error);\n      }\n    });\n  }\n\n  private async getCandidates(addresses: string[], timeout = 5) {\n    let candidates: Candidate[] = [];\n\n    addresses = addresses.filter((address) => {\n      // ice restartで同じアドレスが追加されるのを防ぐ\n      if (this.protocols.find((protocol) => protocol.localIp === address)) {\n        return false;\n      }\n      return true;\n    });\n\n    await Promise.allSettled(\n      addresses.map(async (address) => {\n        // # create transport\n        const protocol = new StunProtocol();\n        this.ensureProtocol(protocol);\n        try {\n          await protocol.connectionMade(\n            isIPv4(address),\n            this.options.portRange,\n            this.options.interfaceAddresses,\n          );\n        } catch (error) {\n          log(\"protocol STUN\", error);\n          return;\n        }\n\n        protocol.localIp = address;\n        this.protocols.push(protocol);\n\n        // # add host candidate\n        const candidateAddress: Address = [address, protocol.getExtraInfo()[1]];\n\n        protocol.localCandidate = new Candidate(\n          candidateFoundation(\"host\", \"udp\", candidateAddress[0]),\n          1,\n          \"udp\",\n          candidatePriority(\"host\"),\n          candidateAddress[0],\n          candidateAddress[1],\n          \"host\",\n          undefined,\n          undefined,\n          undefined,\n          this.generation,\n          this.localUsername,\n        );\n\n        this.pairLocalProtocol(protocol);\n        candidates.push(protocol.localCandidate);\n        this.onIceCandidate.execute(protocol.localCandidate);\n      }),\n    );\n\n    let candidatePromises: Promise<Candidate | void>[] = [];\n\n    // # query STUN server for server-reflexive candidates (IPv4 only)\n    const { stunServer, turnServer } = this;\n    if (stunServer) {\n      const stunPromises = this.protocols.map((protocol) =>\n        new Promise<Candidate | void>(async (r, f) => {\n          const timer = setTimeout(f, timeout * 1000);\n          if (\n            protocol.localCandidate?.host &&\n            isIPv4(protocol.localCandidate?.host)\n          ) {\n            const candidate = await serverReflexiveCandidate(\n              protocol,\n              stunServer,\n            ).catch((error) => {\n              log(\"error\", error);\n            });\n            if (candidate) {\n              this.onIceCandidate.execute(candidate);\n            }\n\n            clearTimeout(timer);\n            r(candidate);\n          } else {\n            clearTimeout(timer);\n            r();\n          }\n        }).catch((error) => {\n          log(\"query STUN server\", error);\n        }),\n      );\n\n      candidatePromises.push(...stunPromises);\n    }\n\n    const { turnUsername, turnPassword } = this.options;\n    if (turnServer && turnUsername && turnPassword) {\n      const turnCandidate = (async () => {\n        const protocol = await createStunOverTurnClient(\n          {\n            address: turnServer,\n            username: turnUsername,\n            password: turnPassword,\n          },\n          {\n            portRange: this.options.portRange,\n            interfaceAddresses: this.options.interfaceAddresses,\n            transport: this.options.turnTransport === \"tcp\" ? \"tcp\" : \"udp\",\n          },\n        ).catch(async (e) => {\n          if (this.options.turnTransport !== \"tcp\") {\n            return await createStunOverTurnClient(\n              {\n                address: turnServer,\n                username: turnUsername,\n                password: turnPassword,\n              },\n              {\n                portRange: this.options.portRange,\n                interfaceAddresses: this.options.interfaceAddresses,\n                transport: \"tcp\",\n              },\n            );\n          } else {\n            throw e;\n          }\n        });\n        this.ensureProtocol(protocol);\n        this.protocols.push(protocol);\n\n        const candidateAddress = protocol.turn.relayedAddress;\n        const relatedAddress = protocol.turn.mappedAddress;\n\n        log(\"turn candidateAddress\", candidateAddress);\n\n        protocol.localCandidate = new Candidate(\n          candidateFoundation(\"relay\", \"udp\", candidateAddress[0]),\n          1,\n          \"udp\",\n          candidatePriority(\"relay\"),\n          candidateAddress[0],\n          candidateAddress[1],\n          \"relay\",\n          relatedAddress[0],\n          relatedAddress[1],\n          undefined,\n          this.generation,\n          this.localUsername,\n        );\n        this.onIceCandidate.execute(protocol.localCandidate);\n\n        return protocol.localCandidate;\n      })().catch((error) => {\n        log(\"query TURN server\", error);\n      });\n\n      if (this.options.forceTurn) {\n        candidates = [];\n        candidatePromises = [];\n      }\n\n      candidatePromises.push(turnCandidate);\n    }\n\n    const extraCandidates = [...(await Promise.allSettled(candidatePromises))]\n      .filter(\n        (\n          v,\n        ): v is PromiseFulfilledResult<\n          Awaited<(typeof candidatePromises)[number]>\n        > => v.status === \"fulfilled\",\n      )\n      .map((v) => v.value)\n      .filter((v): v is Candidate => typeof v !== \"undefined\");\n\n    candidates.push(...extraCandidates);\n\n    return candidates;\n  }\n\n  async connect() {\n    // \"\"\"\n    // Perform ICE handshake.\n    //\n    // This coroutine returns if a candidate pair was successfully nominated\n    // and raises an exception otherwise.\n    // \"\"\"\n    log(\"start connect ice\");\n    if (!this.localCandidatesEnd) {\n      if (!this.localCandidatesStart) {\n        throw new Error(\"Local candidates gathering was not performed\");\n      }\n      if (this.promiseGatherCandidates) {\n        // wait for GatherCandidates finish\n        await this.promiseGatherCandidates.asPromise();\n      }\n    }\n    if (!this.remoteUsername || !this.remotePassword) {\n      throw new Error(\"Remote username or password is missing\");\n    }\n\n    // # 5.7.1. Forming Candidate Pairs\n    for (const c of this.remoteCandidates) {\n      this.pairRemoteCandidate(c);\n    }\n    this.sortCheckList();\n\n    this.unfreezeInitial();\n\n    log(\"earlyChecks\", this.localPassword, this.earlyChecks.length);\n    // # handle early checks\n    for (const earlyCheck of this.earlyChecks) {\n      this.checkIncoming(...earlyCheck);\n    }\n    this.earlyChecks = [];\n    this.earlyChecksDone = true;\n\n    // # perform checks\n    // 5.8.  Scheduling Checks\n    for (;;) {\n      if (this.state === \"closed\") break;\n      if (!this.schedulingChecks()) break;\n      await timers.setTimeout(20);\n    }\n\n    // # wait for completion\n    let res: number = ICE_FAILED;\n    while (this.checkList.length > 0 && res === ICE_FAILED) {\n      res = await this.checkListState.get();\n    }\n\n    // # cancel remaining checks\n    for (const check of this.checkList) {\n      check.handle?.resolve?.();\n    }\n\n    if (res !== ICE_COMPLETED) {\n      throw new Error(\"ICE negotiation failed\");\n    }\n\n    // # start consent freshness tests\n    this.queryConsent();\n\n    this.setState(\"connected\");\n  }\n\n  private unfreezeInitial() {\n    // # unfreeze first pair for the first component\n    const [firstPair] = this.checkList;\n    if (!firstPair) return;\n    if (firstPair.state === CandidatePairState.FROZEN) {\n      firstPair.updateState(CandidatePairState.WAITING);\n    }\n\n    // # unfreeze pairs with same component but different foundations\n    const seenFoundations = new Set(firstPair.localCandidate.foundation);\n    for (const pair of this.checkList) {\n      if (\n        pair.component === firstPair.component &&\n        !seenFoundations.has(pair.localCandidate.foundation) &&\n        pair.state === CandidatePairState.FROZEN\n      ) {\n        pair.updateState(CandidatePairState.WAITING);\n        seenFoundations.add(pair.localCandidate.foundation);\n      }\n    }\n  }\n\n  // 5.8 Scheduling Checks\n  private schedulingChecks() {\n    // Ordinary Check\n    {\n      // # find the highest-priority pair that is in the waiting state\n      const pair = this.checkList\n        .filter((pair) => {\n          if (\n            this.options.forceTurn &&\n            pair.protocol.type === StunProtocol.type\n          )\n            return false;\n          return true;\n        })\n        .find((pair) => pair.state === CandidatePairState.WAITING);\n      if (pair) {\n        pair.handle = this.checkStart(pair);\n        return true;\n      }\n    }\n\n    {\n      // # find the highest-priority pair that is in the frozen state\n      const pair = this.checkList.find(\n        (pair) => pair.state === CandidatePairState.FROZEN,\n      );\n      if (pair) {\n        pair.handle = this.checkStart(pair);\n        return true;\n      }\n    }\n\n    // # if we expect more candidates, keep going\n    if (!this.remoteCandidatesEnd) {\n      return !this.checkListDone;\n    }\n\n    return false;\n  }\n\n  // 4.1.1.4 ? 生存確認 life check\n  private queryConsent = () => {\n    if (this.queryConsentHandle) {\n      this.queryConsentHandle.resolve();\n    }\n\n    this.queryConsentHandle = cancelable(async (_, __, onCancel) => {\n      let failures = 0;\n      let canceled = false;\n\n      const cancelEvent = new AbortController();\n      onCancel.once(() => {\n        canceled = true;\n        failures += CONSENT_FAILURES;\n        cancelEvent.abort();\n        this.queryConsentHandle = undefined;\n      });\n\n      const { localUsername, remoteUsername, iceControlling } = this;\n\n      // \"\"\"\n      // Periodically check consent (RFC 7675).\n      // \"\"\"\n\n      try {\n        while (this.state !== \"closed\" && !canceled) {\n          // # randomize between 0.8 and 1.2 times CONSENT_INTERVAL\n          await timers.setTimeout(\n            CONSENT_INTERVAL * (0.8 + 0.4 * Math.random()) * 1000,\n            undefined,\n            { signal: cancelEvent.signal },\n          );\n\n          const nominated = this.nominated;\n          if (!nominated || canceled) {\n            break;\n          }\n\n          const request = this.buildRequest({\n            nominate: false,\n            localUsername,\n            remoteUsername,\n            iceControlling,\n          });\n          try {\n            await nominated.protocol.request(\n              request,\n              nominated.remoteAddr,\n              Buffer.from(this.remotePassword, \"utf8\"),\n              0,\n            );\n            failures = 0;\n            if (this.state === \"disconnected\") {\n              this.setState(\"connected\");\n            }\n          } catch (error) {\n            if (nominated.id === this.nominated?.id) {\n              log(\"no stun response\");\n              failures++;\n              this.setState(\"disconnected\");\n              break;\n            }\n          }\n          if (failures >= CONSENT_FAILURES) {\n            log(\"Consent to send expired\");\n            this.queryConsentHandle = undefined;\n            this.setState(\"closed\");\n            break;\n          }\n        }\n      } catch (error) {}\n    });\n  };\n\n  async close() {\n    // \"\"\"\n    // Close the connection.\n    // \"\"\"\n\n    this.setState(\"closed\");\n\n    // # stop consent freshness tests\n    this.queryConsentHandle?.resolve?.();\n\n    // # stop check list\n    if (this.checkList && !this.checkListDone) {\n      this.checkListState.put(\n        new Promise((r) => {\n          r(ICE_FAILED);\n        }),\n      );\n    }\n\n    this.nominated = undefined;\n    for (const protocol of this.protocols) {\n      if (protocol.close) {\n        await protocol.close();\n      }\n    }\n\n    this.protocols = [];\n    this.localCandidates = [];\n\n    this.lookup?.close?.();\n    this.lookup = undefined;\n  }\n\n  private setState(state: IceState) {\n    this.state = state;\n    this.stateChanged.execute(state);\n  }\n\n  async addRemoteCandidate(remoteCandidate: Candidate | undefined) {\n    // \"\"\"\n    // Add a remote candidate or signal end-of-candidates.\n\n    // To signal end-of-candidates, pass `None`.\n\n    // :param remote_candidate: A :class:`Candidate` instance or `None`.\n    // \"\"\"\n\n    if (!remoteCandidate) {\n      this.remoteCandidatesEnd = true;\n      return;\n    }\n\n    if (remoteCandidate.host.includes(\".local\")) {\n      try {\n        if (!this.lookup) {\n          this.lookup = new MdnsLookup();\n        }\n        const host = await this.lookup.lookup(remoteCandidate.host);\n        remoteCandidate.host = host;\n      } catch (error) {\n        return;\n      }\n    }\n\n    try {\n      validateRemoteCandidate(remoteCandidate);\n    } catch (error) {\n      return;\n    }\n\n    log(\"addRemoteCandidate\", remoteCandidate);\n    this._remoteCandidates.push(remoteCandidate);\n\n    this.pairRemoteCandidate(remoteCandidate);\n    this.sortCheckList();\n  }\n\n  send = async (data: Buffer) => {\n    const activePair = this.nominated;\n    if (activePair) {\n      await activePair.protocol.sendData(data, activePair.remoteAddr);\n    } else {\n      // log(\"Cannot send data, ice not connected\");\n      return;\n    }\n  };\n\n  getDefaultCandidate() {\n    const candidates = this.localCandidates.sort(\n      (a, b) => a.priority - b.priority,\n    );\n    const [candidate] = candidates;\n    return candidate;\n  }\n\n  // for test only\n  set remoteCandidates(value: Candidate[]) {\n    if (this.remoteCandidatesEnd)\n      throw new Error(\"Cannot set remote candidates after end-of-candidates.\");\n    this._remoteCandidates = [];\n    for (const remoteCandidate of value) {\n      try {\n        validateRemoteCandidate(remoteCandidate);\n      } catch (error) {\n        continue;\n      }\n      this._remoteCandidates.push(remoteCandidate);\n    }\n\n    this.remoteCandidatesEnd = true;\n  }\n  get remoteCandidates() {\n    return this._remoteCandidates;\n  }\n\n  private sortCheckList() {\n    sortCandidatePairs(this.checkList, this.iceControlling);\n  }\n\n  private findPair(protocol: Protocol, remoteCandidate: Candidate) {\n    const pair = this.checkList.find(\n      (pair) =>\n        isEqual(pair.protocol, protocol) &&\n        isEqual(pair.remoteCandidate, remoteCandidate),\n    );\n    return pair;\n  }\n\n  private switchRole(iceControlling: boolean) {\n    log(\"switch role\", iceControlling);\n    this.iceControlling = iceControlling;\n    this.sortCheckList();\n  }\n\n  private checkComplete(pair: CandidatePair) {\n    pair.handle = undefined;\n    if (pair.state === CandidatePairState.SUCCEEDED) {\n      // Updating the Nominated Flag\n\n      // https://www.rfc-editor.org/rfc/rfc8445#section-7.3.1.5,\n      // Once the nominated flag is set for a component of a data stream, it\n      // concludes the ICE processing for that component.  See Section 8.\n      // So disallow overwriting of the pair nominated for that component\n      if (\n        pair.nominated &&\n        // remoteのgenerationをチェックする.localのgenerationは更新が間に合わないかもしれないのでチェックしない\n        (pair.remoteCandidate.generation != undefined\n          ? pair.remoteCandidate.generation === this.generation\n          : true) &&\n        this.nominated == undefined\n      ) {\n        log(\"nominated\", pair.toJSON());\n        this.nominated = pair;\n        this.nominating = false;\n\n        // 8.1.2.  Updating States\n\n        // The agent MUST remove all Waiting and Frozen pairs in the check\n        // list and triggered check queue for the same component as the\n        // nominated pairs for that media stream.\n        for (const p of this.checkList) {\n          if (\n            p.component === pair.component &&\n            [CandidatePairState.WAITING, CandidatePairState.FROZEN].includes(\n              p.state,\n            )\n          ) {\n            p.updateState(CandidatePairState.FAILED);\n          }\n        }\n      }\n\n      // Once there is at least one nominated pair in the valid list for\n      // every component of at least one media stream and the state of the\n      // check list is Running:\n      if (this.nominated) {\n        if (!this.checkListDone) {\n          log(\"ICE completed\");\n          this.checkListState.put(new Promise((r) => r(ICE_COMPLETED)));\n          this.checkListDone = true;\n        }\n        return;\n      }\n\n      log(\"not completed\", pair.toJSON());\n\n      // 7.1.3.2.3.  Updating Pair States\n      for (const p of this.checkList) {\n        if (\n          p.localCandidate.foundation === pair.localCandidate.foundation &&\n          p.state === CandidatePairState.FROZEN\n        ) {\n          p.updateState(CandidatePairState.WAITING);\n        }\n      }\n    }\n\n    {\n      const list = [CandidatePairState.SUCCEEDED, CandidatePairState.FAILED];\n      if (this.checkList.find(({ state }) => !list.includes(state))) {\n        return;\n      }\n    }\n\n    if (!this.iceControlling) {\n      const target = CandidatePairState.SUCCEEDED;\n      if (this.checkList.find(({ state }) => state === target)) {\n        return;\n      }\n    }\n\n    if (!this.checkListDone) {\n      log(\"ICE failed\");\n      this.checkListState.put(\n        new Promise((r) => {\n          r(ICE_FAILED);\n        }),\n      );\n    }\n  }\n\n  // 3.  Terminology : Check\n  checkStart = (pair: CandidatePair) =>\n    cancelable<void>(async (r) => {\n      // \"\"\"\n      // Starts a check.\n      // \"\"\"\n\n      log(\"check start\", pair.toJSON());\n\n      pair.updateState(CandidatePairState.IN_PROGRESS);\n      const result: { response?: Message; addr?: Address } = {};\n      const { remotePassword, remoteUsername, generation } = this;\n      const localUsername = pair.localCandidate.ufrag ?? this.localUsername;\n\n      const nominate = this.iceControlling && !this.remoteIsLite;\n      const request = this.buildRequest({\n        nominate,\n        localUsername,\n        remoteUsername,\n        iceControlling: this.iceControlling,\n      });\n\n      try {\n        const [response, addr] = await pair.protocol.request(\n          request,\n          pair.remoteAddr,\n          Buffer.from(remotePassword, \"utf8\"),\n          4,\n        );\n        log(\"response received\", request.toJSON(), response.toJSON(), addr, {\n          localUsername,\n          remoteUsername,\n          remotePassword,\n          generation,\n        });\n        result.response = response;\n        result.addr = addr;\n      } catch (error: any) {\n        const exc: TransactionError = error;\n        // 7.1.3.1.  Failure Cases\n        log(\n          \"failure case\",\n          request.toJSON(),\n          exc.response ? JSON.stringify(exc.response.toJSON(), null, 2) : error,\n          {\n            localUsername,\n            remoteUsername,\n            remotePassword,\n            generation,\n          },\n        );\n        if (exc.response?.getAttributeValue(\"ERROR-CODE\")[0] === 487) {\n          if (request.attributesKeys.includes(\"ICE-CONTROLLED\")) {\n            this.switchRole(true);\n          } else if (request.attributesKeys.includes(\"ICE-CONTROLLING\")) {\n            this.switchRole(false);\n          }\n          await this.checkStart(pair).awaitable;\n          r();\n          return;\n        }\n        if (exc.response?.getAttributeValue(\"ERROR-CODE\")[0] === 401) {\n          log(\"retry 401\", pair.toJSON());\n          await this.checkStart(pair).awaitable;\n          r();\n          return;\n        } else {\n          // timeout\n          log(\"checkStart CandidatePairState.FAILED\", pair.toJSON());\n          pair.updateState(CandidatePairState.FAILED);\n          this.checkComplete(pair);\n          r();\n          return;\n        }\n      }\n\n      // # check remote address matches\n      if (!isEqual(result.addr, pair.remoteAddr)) {\n        pair.updateState(CandidatePairState.FAILED);\n        this.checkComplete(pair);\n        r();\n        return;\n      }\n\n      // # success\n      if (nominate || pair.remoteNominated) {\n        // # nominated by agressive nomination or the remote party\n        pair.nominated = true;\n      } else if (this.iceControlling && !this.nominating) {\n        // # perform regular nomination\n        this.nominating = true;\n        const request = this.buildRequest({\n          nominate: true,\n          localUsername,\n          remoteUsername,\n          iceControlling: this.iceControlling,\n        });\n        try {\n          await pair.protocol.request(\n            request,\n            pair.remoteAddr,\n            Buffer.from(this.remotePassword, \"utf8\"),\n          );\n        } catch (error) {\n          pair.updateState(CandidatePairState.FAILED);\n          this.checkComplete(pair);\n          return;\n        }\n        pair.nominated = true;\n      }\n\n      pair.updateState(CandidatePairState.SUCCEEDED);\n      this.checkComplete(pair);\n      r();\n    });\n\n  private addPair(pair: CandidatePair) {\n    this.checkList.push(pair);\n    this.sortCheckList();\n  }\n\n  // 7.2.  STUN Server Procedures\n  // 7.2.1.3、7.2.1.4、および7.2.1.5\n  checkIncoming(message: Message, addr: Address, protocol: Protocol) {\n    // \"\"\"\n    // Handle a successful incoming check.\n    // \"\"\"\n\n    const txUsername = message.getAttributeValue(\"USERNAME\");\n    const { remoteUsername: localUsername } = decodeTxUsername(txUsername);\n\n    // find remote candidate\n    let remoteCandidate: Candidate | undefined;\n    const [host, port] = addr;\n    for (const c of this.remoteCandidates) {\n      if (c.host === host && c.port === port) {\n        remoteCandidate = c;\n        break;\n      }\n    }\n    if (!remoteCandidate) {\n      // 7.2.1.3.  Learning Peer Reflexive Candidates\n      remoteCandidate = new Candidate(\n        randomString(10),\n        1,\n        \"udp\",\n        message.getAttributeValue(\"PRIORITY\"),\n        host,\n        port,\n        \"prflx\",\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n      );\n      this._remoteCandidates.push(remoteCandidate);\n    }\n\n    // find pair\n    let pair = this.findPair(protocol, remoteCandidate);\n    if (!pair) {\n      pair = new CandidatePair(protocol, remoteCandidate, this.iceControlling);\n      pair.updateState(CandidatePairState.WAITING);\n      this.addPair(pair);\n    }\n    pair.localCandidate.ufrag = localUsername;\n\n    log(\"Triggered Checks\", message.toJSON(), pair.toJSON(), {\n      localUsername: this.localUsername,\n      remoteUsername: this.remoteUsername,\n      localPassword: this.localPassword,\n      remotePassword: this.remotePassword,\n      generation: this.generation,\n    });\n\n    // 7.2.1.4.  Triggered Checks\n    if (\n      [CandidatePairState.WAITING, CandidatePairState.FAILED].includes(\n        pair.state,\n      )\n    ) {\n      pair.handle = this.checkStart(pair);\n    } else {\n      pair;\n    }\n\n    // 7.2.1.5. Updating the Nominated Flag\n    if (\n      message.attributesKeys.includes(\"USE-CANDIDATE\") &&\n      !this.iceControlling\n    ) {\n      pair.remoteNominated = true;\n      if (pair.state === CandidatePairState.SUCCEEDED) {\n        pair.nominated = true;\n        this.checkComplete(pair);\n      }\n    }\n  }\n\n  private tryPair(protocol: Protocol, remoteCandidate: Candidate) {\n    if (\n      protocol.localCandidate?.canPairWith(remoteCandidate) &&\n      !this.findPair(protocol, remoteCandidate)\n    ) {\n      const pair = new CandidatePair(\n        protocol,\n        remoteCandidate,\n        this.iceControlling,\n      );\n      if (\n        this.options.filterCandidatePair &&\n        !this.options.filterCandidatePair(pair)\n      ) {\n        return;\n      }\n      pair.updateState(CandidatePairState.WAITING);\n      this.addPair(pair);\n    }\n  }\n\n  private pairLocalProtocol(protocol: Protocol) {\n    for (const remoteCandidate of this.remoteCandidates) {\n      this.tryPair(protocol, remoteCandidate);\n    }\n  }\n\n  private pairRemoteCandidate = (remoteCandidate: Candidate) => {\n    for (const protocol of this.protocols) {\n      this.tryPair(protocol, remoteCandidate);\n    }\n  };\n\n  private buildRequest({\n    nominate,\n    remoteUsername,\n    localUsername,\n    iceControlling,\n  }: {\n    nominate: boolean;\n    remoteUsername: string;\n    localUsername: string;\n    iceControlling: boolean;\n  }) {\n    const txUsername = encodeTxUsername({ remoteUsername, localUsername });\n    const request = new Message(methods.BINDING, classes.REQUEST);\n    request\n      .setAttribute(\"USERNAME\", txUsername)\n      .setAttribute(\"PRIORITY\", candidatePriority(\"prflx\"));\n    if (iceControlling) {\n      request.setAttribute(\"ICE-CONTROLLING\", this.tieBreaker);\n      if (nominate) {\n        request.setAttribute(\"USE-CANDIDATE\", null);\n      }\n    } else {\n      request.setAttribute(\"ICE-CONTROLLED\", this.tieBreaker);\n    }\n    return request;\n  }\n\n  private respondError(\n    request: Message,\n    addr: Address,\n    protocol: Protocol,\n    errorCode: [number, string],\n  ) {\n    const response = new Message(\n      request.messageMethod,\n      classes.ERROR,\n      request.transactionId,\n    );\n    response\n      .setAttribute(\"ERROR-CODE\", errorCode)\n      .addMessageIntegrity(Buffer.from(this.localPassword, \"utf8\"))\n      .addFingerprint();\n    protocol.sendStun(response, addr).catch((e) => {\n      log(\"sendStun error\", e);\n    });\n  }\n}\n\nconst encodeTxUsername = ({\n  remoteUsername,\n  localUsername,\n}: {\n  remoteUsername: string;\n  localUsername: string;\n}) => {\n  return `${remoteUsername}:${localUsername}`;\n};\n\nconst decodeTxUsername = (txUsername: string) => {\n  const [remoteUsername, localUsername] = txUsername.split(\":\");\n  return { remoteUsername, localUsername };\n};\n"]}