{"version":3,"file":"iceBase.js","sourceRoot":"","sources":["../../../src/iceBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomUUID } from \"crypto\";\nimport { Candidate, candidateFoundation, candidatePriority } from \"./candidate\";\nimport type { MdnsLookup } from \"./dns/lookup\";\nimport type { Cancelable } from \"./helper\";\nimport {\n  type Address,\n  type Event,\n  type InterfaceAddresses,\n  debug,\n} from \"./imports/common\";\nimport { classes, methods } from \"./stun/const\";\nimport { Message } from \"./stun/message\";\nimport type { Protocol } from \"./types/model\";\n\nconst log = debug(\"werift-ice : packages/ice/src/ice.ts : log\");\n\nexport interface IceConnection {\n  iceControlling: boolean;\n  localUsername: string;\n  localPassword: string;\n  remotePassword: string;\n  remoteUsername: string;\n  remoteIsLite: boolean;\n  checkList: CandidatePair[];\n  localCandidates: Candidate[];\n  stunServer?: Address;\n  turnServer?: Address;\n  generation: number;\n  options: IceOptions;\n  remoteCandidatesEnd: boolean;\n  localCandidatesEnd: boolean;\n  state: IceState;\n  lookup?: MdnsLookup;\n  nominated?: CandidatePair;\n\n  readonly onData: Event<[Buffer]>;\n  readonly stateChanged: Event<[IceState]>;\n  readonly onIceCandidate: Event<[Candidate]>;\n\n  restart(): void;\n\n  setRemoteParams(params: {\n    iceLite: boolean;\n    usernameFragment: string;\n    password: string;\n  }): void;\n\n  gatherCandidates(): Promise<void>;\n\n  connect(): Promise<void>;\n\n  close(): Promise<void>;\n\n  addRemoteCandidate(remoteCandidate: Candidate | undefined): Promise<void>;\n\n  send(data: Buffer): Promise<void>;\n\n  getDefaultCandidate(): Candidate | undefined;\n  resetNominatedPair(): void;\n}\n\nexport class CandidatePair {\n  readonly id = randomUUID();\n  handle?: Cancelable<void>;\n  nominated = false;\n  remoteNominated = false;\n  // 5.7.4.  Computing States\n  private _state = CandidatePairState.FROZEN;\n  get state() {\n    return this._state;\n  }\n\n  toJSON() {\n    return this.json;\n  }\n\n  get json() {\n    return {\n      protocol: this.protocol.type,\n      localCandidate: this.localCandidate.toSdp(),\n      remoteCandidate: this.remoteCandidate.toSdp(),\n    };\n  }\n\n  constructor(\n    public protocol: Protocol,\n    public remoteCandidate: Candidate,\n    public iceControlling: boolean,\n  ) {}\n\n  updateState(state: CandidatePairState) {\n    this._state = state;\n  }\n\n  get localCandidate() {\n    if (!this.protocol.localCandidate) {\n      throw new Error(\"localCandidate not exist\");\n    }\n    return this.protocol.localCandidate;\n  }\n\n  get remoteAddr(): Address {\n    return [this.remoteCandidate.host, this.remoteCandidate.port];\n  }\n\n  get component() {\n    return this.localCandidate.component;\n  }\n\n  get priority() {\n    return candidatePairPriority(\n      this.localCandidate,\n      this.remoteCandidate,\n      this.iceControlling,\n    );\n  }\n}\n\nexport const ICE_COMPLETED = 1 as const;\nexport const ICE_FAILED = 2 as const;\n\nexport const CONSENT_INTERVAL = 5;\nexport const CONSENT_FAILURES = 6;\n\nexport enum CandidatePairState {\n  FROZEN = 0,\n  WAITING = 1,\n  IN_PROGRESS = 2,\n  SUCCEEDED = 3,\n  FAILED = 4,\n}\n\nexport type IceState =\n  | \"disconnected\"\n  | \"closed\"\n  | \"completed\"\n  | \"new\"\n  | \"connected\";\n\nexport interface IceOptions {\n  stunServer?: Address;\n  turnServer?: Address;\n  turnUsername?: string;\n  turnPassword?: string;\n  turnTransport?: \"udp\" | \"tcp\";\n  forceTurn?: boolean;\n  localPasswordPrefix?: string;\n  useIpv4: boolean;\n  useIpv6: boolean;\n  portRange?: [number, number];\n  interfaceAddresses?: InterfaceAddresses;\n  additionalHostAddresses?: string[];\n  filterStunResponse?: (\n    message: Message,\n    addr: Address,\n    protocol: Protocol,\n  ) => boolean;\n  filterCandidatePair?: (pair: CandidatePair) => boolean;\n}\n\nexport const defaultOptions: IceOptions = {\n  useIpv4: true,\n  useIpv6: true,\n};\n\nexport function validateRemoteCandidate(candidate: Candidate) {\n  // \"\"\"\n  // Check the remote candidate is supported.\n  // \"\"\"\n  if (![\"host\", \"relay\", \"srflx\"].includes(candidate.type))\n    throw new Error(`Unexpected candidate type \"${candidate.type}\"`);\n\n  // ipaddress.ip_address(candidate.host)\n  return candidate;\n}\n\nexport function sortCandidatePairs(\n  pairs: {\n    localCandidate: Pick<Candidate, \"priority\">;\n    remoteCandidate: Pick<Candidate, \"priority\">;\n  }[],\n  iceControlling: boolean,\n) {\n  return pairs\n    .sort(\n      (a, b) =>\n        candidatePairPriority(\n          a.localCandidate,\n          a.remoteCandidate,\n          iceControlling,\n        ) -\n        candidatePairPriority(\n          b.localCandidate,\n          b.remoteCandidate,\n          iceControlling,\n        ),\n    )\n    .reverse();\n}\n\n// 5.7.2.  Computing Pair Priority and Ordering Pairs\nexport function candidatePairPriority(\n  local: Pick<Candidate, \"priority\">,\n  remote: Pick<Candidate, \"priority\">,\n  iceControlling: boolean,\n) {\n  const G = (iceControlling && local.priority) || remote.priority;\n  const D = (iceControlling && remote.priority) || local.priority;\n  return (1 << 32) * Math.min(G, D) + 2 * Math.max(G, D) + (G > D ? 1 : 0);\n}\n\nexport async function serverReflexiveCandidate(\n  protocol: Protocol,\n  stunServer: Address,\n) {\n  // \"\"\"\n  // Query STUN server to obtain a server-reflexive candidate.\n  // \"\"\"\n\n  // # perform STUN query\n  const request = new Message(methods.BINDING, classes.REQUEST);\n  try {\n    const [response] = await protocol.request(request, stunServer);\n\n    const localCandidate = protocol.localCandidate;\n    if (!localCandidate) {\n      throw new Error(\"not exist\");\n    }\n\n    const candidate = new Candidate(\n      candidateFoundation(\"srflx\", \"udp\", localCandidate.host),\n      localCandidate.component,\n      localCandidate.transport,\n      candidatePriority(\"srflx\"),\n      response.getAttributeValue(\"XOR-MAPPED-ADDRESS\")[0],\n      response.getAttributeValue(\"XOR-MAPPED-ADDRESS\")[1],\n      \"srflx\",\n      localCandidate.host,\n      localCandidate.port,\n    );\n    return candidate;\n  } catch (error) {\n    // todo fix\n    log(\"error serverReflexiveCandidate\", error);\n  }\n}\n\nexport function validateAddress(addr?: Address): Address | undefined {\n  if (addr && Number.isNaN(addr[1])) {\n    return [addr[0], 443];\n  }\n  return addr;\n}\n"]}