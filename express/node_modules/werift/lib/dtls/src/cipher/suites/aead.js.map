{"version":3,"file":"aead.js","sourceRoot":"","sources":["../../../../../../dtls/src/cipher/suites/aead.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,yCAA4D;AAC5D,iDAA6C;AAC7C,gCAA2C;AAC3C,uDAIoB;AAEpB,MAAM,GAAG,GAAG,IAAA,cAAK,EACf,6DAA6D,CAC9D,CAAC;AAEF;;GAEG;AACH,MAAqB,UAAW,SAAQ,kBAAM;IAe5C;QACE,KAAK,EAAE,CAAC;QAfV;;;;mBAAY,CAAC;WAAC;QACd;;;;mBAAc,CAAC;WAAC;QAChB;;;;mBAAW,CAAC;WAAC;QACb;;;;mBAAgB,CAAC;WAAC;QAElB;;;;mBAAsB,CAAC;WAAC;QACxB;;;;mBAAsB,CAAC;WAAC;QAExB;;;;;WAAwB;QACxB;;;;;WAAwB;QAExB;;;;;WAAqB;QACrB;;;;;WAAqB;IAIrB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAA,yBAAgB,EAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,CAAC,YAAoB,EAAE,YAAoB,EAAE,YAAoB;QACnE,MAAM,IAAI,GAAG,IAAA,uBAAiB,EAC5B,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,aAAa,CACnB,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAkB,EAAE,IAAY,EAAE,MAAoB;QAC5D,MAAM,QAAQ,GAAG,IAAI,KAAK,sBAAW,CAAC,MAAM,CAAC;QAC7C,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QACtE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;QAExC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzD,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,MAAM,aAAa,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1E,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAClC,IAAI,CAAC,cAAuC,EAC5C,QAAQ,EACR,EAAE,EACF;YACE,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CACF,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,eAAe,EAAE,IAAI,CAAC,MAAM;SAC7B,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QAEpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,sBAAsB,CAAC,MAAoB,EAAE,UAAkB;QAC7D,MAAM,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE1C,gBAAgB,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChD,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5C,gBAAgB,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAClD,gBAAgB,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAE/C,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAkB,EAAE,IAAY,EAAE,MAAoB;QAC5D,MAAM,QAAQ,GAAG,IAAI,KAAK,sBAAW,CAAC,MAAM,CAAC;QAC7C,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QACtE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;QAExC,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEjE,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEjD,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAC7B,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CACjC,CAAC;QACF,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QAEhE,MAAM,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAClD,MAAM,EACN,SAAS,CAAC,MAAM,CACjB,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CACtC,IAAI,CAAC,cAAuC,EAC5C,QAAQ,EACR,EAAE,EACF;YACE,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CACF,CAAC;QAEF,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7B,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAChC,eAAe,EAAE,SAAS,CAAC,MAAM;SAClC,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;YACnC,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC;gBACzB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACtC,CAAC,CAAC,QAAQ,CAAC;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CACD,gBAAgB,EAChB,KAAK,EACL,IAAI,EACJ,IAAA,mBAAU,EAAC,IAAI,CAAC,EAChB,MAAM,EACN,IAAI,CAAC,OAAO,CACb,CAAC;YACF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF;AAhJD,6BAgJC","sourcesContent":["import * as crypto from \"crypto\";\n\nimport { dumpBuffer, getObjectSummary } from \"../../helper\";\nimport { debug } from \"../../imports/common\";\nimport { prfEncryptionKeys } from \"../prf\";\nimport Cipher, {\n  type CipherHeader,\n  SessionType,\n  type SessionTypes,\n} from \"./abstract\";\n\nconst err = debug(\n  \"werift-dtls : packages/dtls/src/cipher/suites/aead.ts : err\",\n);\n\n/**\n * This class implements AEAD cipher family.\n */\nexport default class AEADCipher extends Cipher {\n  keyLength = 0;\n  nonceLength = 0;\n  ivLength = 0;\n  authTagLength = 0;\n\n  nonceImplicitLength = 0;\n  nonceExplicitLength = 0;\n\n  clientWriteKey?: Buffer;\n  serverWriteKey?: Buffer;\n\n  clientNonce?: Buffer;\n  serverNonce?: Buffer;\n\n  constructor() {\n    super();\n  }\n\n  get summary() {\n    return getObjectSummary(this);\n  }\n\n  init(masterSecret: Buffer, serverRandom: Buffer, clientRandom: Buffer) {\n    const keys = prfEncryptionKeys(\n      masterSecret,\n      clientRandom,\n      serverRandom,\n      this.keyLength,\n      this.ivLength,\n      this.nonceLength,\n      this.hashAlgorithm,\n    );\n\n    this.clientWriteKey = keys.clientWriteKey;\n    this.serverWriteKey = keys.serverWriteKey;\n    this.clientNonce = keys.clientNonce;\n    this.serverNonce = keys.serverNonce;\n  }\n\n  /**\n   * Encrypt message.\n   */\n  encrypt(type: SessionTypes, data: Buffer, header: CipherHeader) {\n    const isClient = type === SessionType.CLIENT;\n    const iv = isClient ? this.clientNonce : this.serverNonce;\n    const writeKey = isClient ? this.clientWriteKey : this.serverWriteKey;\n    if (!iv || !writeKey) throw new Error();\n\n    iv.writeUInt16BE(header.epoch, this.nonceImplicitLength);\n    iv.writeUIntBE(header.sequenceNumber, this.nonceImplicitLength + 2, 6);\n\n    const explicitNonce = iv.slice(this.nonceImplicitLength);\n\n    const additionalBuffer = this.encodeAdditionalBuffer(header, data.length);\n\n    const cipher = crypto.createCipheriv(\n      this.blockAlgorithm as crypto.CipherCCMTypes,\n      writeKey,\n      iv,\n      {\n        authTagLength: this.authTagLength,\n      },\n    );\n\n    cipher.setAAD(additionalBuffer, {\n      plaintextLength: data.length,\n    });\n\n    const headPart = cipher.update(data);\n    const finalPart = cipher.final();\n    const authTag = cipher.getAuthTag();\n\n    return Buffer.concat([explicitNonce, headPart, finalPart, authTag]);\n  }\n\n  encodeAdditionalBuffer(header: CipherHeader, dataLength: number) {\n    const additionalBuffer = Buffer.alloc(13);\n\n    additionalBuffer.writeUInt16BE(header.epoch, 0);\n    additionalBuffer.writeUintBE(header.sequenceNumber, 2, 6);\n    additionalBuffer.writeUInt8(header.type, 8);\n    additionalBuffer.writeUInt16BE(header.version, 9);\n    additionalBuffer.writeUInt16BE(dataLength, 11);\n\n    return additionalBuffer;\n  }\n\n  /**\n   * Decrypt message.\n   */\n  decrypt(type: SessionTypes, data: Buffer, header: CipherHeader) {\n    const isClient = type === SessionType.CLIENT;\n    const iv = isClient ? this.serverNonce : this.clientNonce;\n    const writeKey = isClient ? this.serverWriteKey : this.clientWriteKey;\n    if (!iv || !writeKey) throw new Error();\n\n    const explicitNonce = data.subarray(0, this.nonceExplicitLength);\n\n    explicitNonce.copy(iv, this.nonceImplicitLength);\n\n    const encrypted = data.subarray(\n      this.nonceExplicitLength,\n      data.length - this.authTagLength,\n    );\n    const authTag = data.subarray(data.length - this.authTagLength);\n\n    const additionalBuffer = this.encodeAdditionalBuffer(\n      header,\n      encrypted.length,\n    );\n\n    const decipher = crypto.createDecipheriv(\n      this.blockAlgorithm as crypto.CipherCCMTypes,\n      writeKey,\n      iv,\n      {\n        authTagLength: this.authTagLength,\n      },\n    );\n\n    decipher.setAuthTag(authTag);\n    decipher.setAAD(additionalBuffer, {\n      plaintextLength: encrypted.length,\n    });\n\n    const headPart = decipher.update(encrypted);\n    try {\n      const finalPart = decipher.final();\n      return finalPart.length > 0\n        ? Buffer.concat([headPart, finalPart])\n        : headPart;\n    } catch (error) {\n      err(\n        \"decrypt failed\",\n        error,\n        type,\n        dumpBuffer(data),\n        header,\n        this.summary,\n      );\n      throw error;\n    }\n  }\n}\n"]}