{"version":3,"file":"header.js","sourceRoot":"","sources":["../../../../../../dtls/src/record/message/header.ts"],"names":[],"mappings":";;;AAAA,2DAAkE;AAClE,mDAAyD;AAazD,MAAa,SAAS;IASpB,YACS,KAAa,EACb,cAAsB,EACtB,WAAmB,EACnB,eAAiD,EACjD,UAAkB;QAJzB;;;;mBAAO,KAAK;WAAQ;QACpB;;;;mBAAO,cAAc;WAAQ;QAC7B;;;;mBAAO,WAAW;WAAQ;QAC1B;;;;mBAAO,eAAe;WAAkC;QACxD;;;;mBAAO,UAAU;WAAQ;IACxB,CAAC;IAEJ,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,SAAS,CAClB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,CACjB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,SAAS;QAClB,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAA,oBAAM,EAAC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAC9C,CAAC;IACJ,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,IAAA,oBAAM,EAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACjD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;;AArCH,8BAsCC;AArCiB;;;;WAAO;QACrB,KAAK,EAAE,mBAAK,CAAC,QAAQ;QACrB,cAAc,EAAE,mBAAK,CAAC,QAAQ;QAC9B,WAAW,EAAE,mBAAK,CAAC,KAAK;QACxB,eAAe,EAAE,wBAAe;QAChC,UAAU,EAAE,mBAAK,CAAC,QAAQ;KAC3B;EANmB,CAMlB","sourcesContent":["import { decode, encode, types } from \"@shinyoshiaki/binary-data\";\nimport { ProtocolVersion } from \"../../handshake/binary\";\n\nexport interface DtlsPlaintextHeader {\n  contentType: number;\n  protocolVersion: {\n    major: number;\n    minor: number;\n  };\n  epoch: number;\n  sequenceNumber: number;\n  contentLen: number;\n}\n\nexport class MACHeader {\n  static readonly spec = {\n    epoch: types.uint16be,\n    sequenceNumber: types.uint48be,\n    contentType: types.uint8,\n    protocolVersion: ProtocolVersion,\n    contentLen: types.uint16be,\n  };\n\n  constructor(\n    public epoch: number,\n    public sequenceNumber: number,\n    public contentType: number,\n    public protocolVersion: { major: number; minor: number },\n    public contentLen: number,\n  ) {}\n\n  static createEmpty() {\n    return new MACHeader(\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any,\n    );\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new MACHeader(\n      //@ts-ignore\n      ...Object.values(decode(buf, MACHeader.spec)),\n    );\n  }\n\n  serialize() {\n    const res = encode(this, MACHeader.spec).slice();\n    return Buffer.from(res);\n  }\n}\n"]}