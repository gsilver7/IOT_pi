{"version":3,"file":"plaintext.js","sourceRoot":"","sources":["../../../../../../dtls/src/record/message/plaintext.ts"],"names":[],"mappings":"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","sourcesContent":["import { dumpBuffer } from \"../../helper\";\nimport { type DtlsPlaintextHeader, MACHeader } from \"./header\";\n\nexport class DtlsPlaintext {\n  constructor(\n    public recordLayerHeader: DtlsPlaintextHeader,\n    public fragment: Buffer,\n  ) {}\n\n  get summary() {\n    return {\n      header: this.recordLayerHeader,\n      fragment: dumpBuffer(this.fragment),\n    };\n  }\n\n  static createEmpty() {\n    return new DtlsPlaintext(undefined as any, undefined as any);\n  }\n\n  static deSerialize(buf: Buffer) {\n    if (buf.length < 13) {\n      throw new Error(\"Invalid DTLS record: buffer is too short\");\n    }\n\n    const contentType = buf.readUInt8(0);\n    const majorVersion = buf.readUInt8(1);\n    const minorVersion = buf.readUInt8(2);\n    const epoch = buf.readUInt16BE(3);\n\n    // Read the 6-byte sequence number as a 48-bit integer\n    const sequenceNumber = buf.slice(5, 11).readUIntBE(0, 6);\n\n    const contentLen = buf.readUInt16BE(11);\n\n    // Ensure the buffer has enough data for the fragment\n    if (buf.length < 13 + contentLen) {\n      throw new Error(\"Invalid DTLS record: fragment length exceeds buffer\");\n    }\n\n    const fragment = buf.slice(13, 13 + contentLen);\n\n    const r = new DtlsPlaintext(\n      {\n        contentType,\n        protocolVersion: { major: majorVersion, minor: minorVersion },\n        epoch,\n        sequenceNumber,\n        contentLen,\n      },\n      fragment,\n    );\n    return r;\n  }\n\n  serialize() {\n    const fragmentLength = this.fragment.length;\n    // 13 bytes for headers + fragment length\n    const totalLength = 13 + fragmentLength;\n\n    const buffer = Buffer.alloc(totalLength);\n\n    buffer.writeUInt8(this.recordLayerHeader.contentType, 0);\n    buffer.writeUInt8(this.recordLayerHeader.protocolVersion.major, 1);\n    buffer.writeUInt8(this.recordLayerHeader.protocolVersion.minor, 2);\n    buffer.writeUInt16BE(this.recordLayerHeader.epoch, 3);\n    buffer.writeUIntBE(this.recordLayerHeader.sequenceNumber, 5, 6);\n    buffer.writeUInt16BE(fragmentLength, 11);\n    this.fragment.copy(buffer, 13);\n\n    return buffer;\n  }\n\n  computeMACHeader() {\n    return new MACHeader(\n      this.recordLayerHeader.epoch,\n      this.recordLayerHeader.sequenceNumber,\n      this.recordLayerHeader.contentType,\n      this.recordLayerHeader.protocolVersion,\n      this.recordLayerHeader.contentLen,\n    ).serialize();\n  }\n}\n"]}