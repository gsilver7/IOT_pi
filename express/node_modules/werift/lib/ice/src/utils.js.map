{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../ice/src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import os from \"os\";\nimport nodeIp from \"ip\";\nimport {\n  type Address,\n  type InterfaceAddresses,\n  debug,\n  normalizeFamilyNodeV18,\n} from \"./imports/common\";\nimport { classes, methods } from \"./stun/const\";\nimport { Message } from \"./stun/message\";\nimport { StunProtocol } from \"./stun/protocol\";\n\nconst logger = debug(\"werift-ice : packages/ice/src/utils.ts\");\n\nexport async function getGlobalIp(\n  stunServer?: Address,\n  interfaceAddresses?: InterfaceAddresses,\n) {\n  const protocol = new StunProtocol();\n  await protocol.connectionMade(true, undefined, interfaceAddresses);\n  const request = new Message(methods.BINDING, classes.REQUEST);\n  const [response] = await protocol.request(\n    request,\n    stunServer ?? [\"stun.l.google.com\", 19302],\n  );\n  await protocol.close();\n\n  const address = response.getAttributeValue(\"XOR-MAPPED-ADDRESS\");\n  return address[0] as string;\n}\n\nexport function isLinkLocalAddress(info: os.NetworkInterfaceInfo) {\n  return (\n    (normalizeFamilyNodeV18(info.family) === 4 &&\n      info.address?.startsWith(\"169.254.\")) ||\n    (normalizeFamilyNodeV18(info.family) === 6 &&\n      info.address?.startsWith(\"fe80::\"))\n  );\n}\n\nexport function nodeIpAddress(\n  family: number,\n  {\n    useLinkLocalAddress,\n  }: {\n    /** such as google cloud run */\n    useLinkLocalAddress?: boolean;\n  } = {},\n): string[] {\n  // https://chromium.googlesource.com/external/webrtc/+/master/rtc_base/network.cc#236\n  const costlyNetworks = [\"ipsec\", \"tun\", \"utun\", \"tap\"];\n  const banNetworks = [\"vmnet\", \"veth\"];\n\n  const interfaces = os.networkInterfaces();\n\n  logger(interfaces);\n\n  const all = Object.keys(interfaces)\n    .map((nic) => {\n      for (const word of [...costlyNetworks, ...banNetworks]) {\n        if (nic.startsWith(word)) {\n          return {\n            nic,\n            addresses: [],\n          };\n        }\n      }\n      const addresses = interfaces[nic]!.filter(\n        (details) =>\n          normalizeFamilyNodeV18(details.family) === family &&\n          !nodeIp.isLoopback(details.address) &&\n          (useLinkLocalAddress ? true : !isLinkLocalAddress(details)),\n      );\n      return {\n        nic,\n        addresses: addresses.map((address) => address.address),\n      };\n    })\n    .filter((address) => !!address);\n\n  // os.networkInterfaces doesn't actually return addresses in a good order.\n  // have seen instances where en0 (ethernet) is after en1 (wlan), etc.\n  // eth0 > eth1\n  all.sort((a, b) => a.nic.localeCompare(b.nic));\n  return Object.values(all).flatMap((entry) => entry.addresses);\n}\n\nexport function getHostAddresses(\n  useIpv4: boolean,\n  useIpv6: boolean,\n  options: {\n    /** such as google cloud run */\n    useLinkLocalAddress?: boolean;\n  } = {},\n) {\n  const address: string[] = [];\n  if (useIpv4) {\n    address.push(...nodeIpAddress(4, options));\n  }\n  if (useIpv6) {\n    address.push(...nodeIpAddress(6, options));\n  }\n  return address;\n}\n\nexport const url2Address = (url?: string) => {\n  if (!url) return;\n  const [address, port] = url.split(\":\");\n  return [address, Number.parseInt(port)] as Address;\n};\n"]}