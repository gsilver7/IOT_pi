// ../common/src/binary.ts
import { randomBytes } from "crypto";
import { jspack } from "@shinyoshiaki/jspack";
function random16() {
  return jspack.Unpack("!H", randomBytes(2))[0];
}
function random32() {
  return jspack.Unpack("!L", randomBytes(4))[0];
}
function bufferXor(a, b) {
  if (a.length !== b.length) {
    throw new TypeError(
      "[webrtc-stun] You can not XOR buffers which length are different"
    );
  }
  const length = a.length;
  const buffer2 = Buffer.allocUnsafe(length);
  for (let i = 0; i < length; i++) {
    buffer2[i] = a[i] ^ b[i];
  }
  return buffer2;
}
function bufferArrayXor(arr) {
  const length = [...arr].sort((a, b) => a.length - b.length).reverse()[0].length;
  const xored = Buffer.allocUnsafe(length);
  for (let i = 0; i < length; i++) {
    xored[i] = 0;
    arr.forEach((buffer2) => {
      xored[i] ^= buffer2[i] ?? 0;
    });
  }
  return xored;
}
var BitWriter = class {
  constructor(bitLength) {
    this.bitLength = bitLength;
  }
  value = 0;
  set(size, startIndex, value) {
    value &= (1 << size) - 1;
    this.value |= value << this.bitLength - size - startIndex;
    return this;
  }
  get buffer() {
    const length = Math.ceil(this.bitLength / 8);
    const buf = Buffer.alloc(length);
    buf.writeUIntBE(this.value, 0, length);
    return buf;
  }
};
var BitWriter2 = class {
  /**
   * 各valueがオクテットを跨いではならない
   */
  constructor(bitLength) {
    this.bitLength = bitLength;
    if (bitLength > 32) {
      throw new Error();
    }
  }
  _value = 0n;
  offset = 0n;
  set(value, size = 1) {
    let value_b = BigInt(value);
    const size_b = BigInt(size);
    value_b &= (1n << size_b) - 1n;
    this._value |= value_b << BigInt(this.bitLength) - size_b - this.offset;
    this.offset += size_b;
    return this;
  }
  get value() {
    return Number(this._value);
  }
  get buffer() {
    const length = Math.ceil(this.bitLength / 8);
    const buf = Buffer.alloc(length);
    buf.writeUIntBE(this.value, 0, length);
    return buf;
  }
};
function getBit(bits, startIndex, length = 1) {
  let bin = bits.toString(2).split("");
  bin = [...Array(8 - bin.length).fill("0"), ...bin];
  const s = bin.slice(startIndex, startIndex + length).join("");
  const v = Number.parseInt(s, 2);
  return v;
}
function paddingByte(bits) {
  const dec = bits.toString(2).split("");
  return [...[...Array(8 - dec.length)].map(() => "0"), ...dec].join("");
}
function paddingBits(bits, expectLength) {
  const dec = bits.toString(2);
  return [...[...Array(expectLength - dec.length)].map(() => "0"), ...dec].join(
    ""
  );
}
function bufferWriter(bytes2, values) {
  return createBufferWriter(bytes2)(values);
}
function createBufferWriter(bytes2, singleBuffer) {
  const length = bytes2.reduce((acc, cur) => acc + cur, 0);
  const reuseBuffer = singleBuffer ? Buffer.alloc(length) : void 0;
  return (values) => {
    const buf = reuseBuffer || Buffer.alloc(length);
    let offset = 0;
    values.forEach((v, i) => {
      const size = bytes2[i];
      if (size === 8) buf.writeBigUInt64BE(v, offset);
      else buf.writeUIntBE(v, offset, size);
      offset += size;
    });
    return buf;
  };
}
function bufferWriterLE(bytes2, values) {
  const length = bytes2.reduce((acc, cur) => acc + cur, 0);
  const buf = Buffer.alloc(length);
  let offset = 0;
  values.forEach((v, i) => {
    const size = bytes2[i];
    if (size === 8) buf.writeBigUInt64LE(v, offset);
    else buf.writeUIntLE(v, offset, size);
    offset += size;
  });
  return buf;
}
function bufferReader(buf, bytes2) {
  let offset = 0;
  return bytes2.map((v) => {
    let read;
    if (v === 8) {
      read = buf.readBigUInt64BE(offset);
    } else {
      read = buf.readUIntBE(offset, v);
    }
    offset += v;
    return read;
  });
}
var BufferChain = class {
  buffer;
  constructor(size) {
    this.buffer = Buffer.alloc(size);
  }
  writeInt16BE(value, offset) {
    this.buffer.writeInt16BE(value, offset);
    return this;
  }
  writeUInt8(value, offset) {
    this.buffer.writeUInt8(value, offset);
    return this;
  }
};
var dumpBuffer = (data) => "0x" + data.toString("hex").replace(/(.)(.)/g, "$1$2 ").split(" ").filter((s) => s != void 0 && s.length > 0).join(",0x");
function buffer2ArrayBuffer(buf) {
  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}
var BitStream = class {
  constructor(uint8Array) {
    this.uint8Array = uint8Array;
  }
  position = 0;
  bitsPending = 0;
  writeBits(bits, value) {
    if (bits == 0) {
      return this;
    }
    value &= 4294967295 >>> 32 - bits;
    let bitsConsumed;
    if (this.bitsPending > 0) {
      if (this.bitsPending > bits) {
        this.uint8Array[this.position - 1] |= value << this.bitsPending - bits;
        bitsConsumed = bits;
        this.bitsPending -= bits;
      } else if (this.bitsPending == bits) {
        this.uint8Array[this.position - 1] |= value;
        bitsConsumed = bits;
        this.bitsPending = 0;
      } else {
        this.uint8Array[this.position - 1] |= value >> bits - this.bitsPending;
        bitsConsumed = this.bitsPending;
        this.bitsPending = 0;
      }
    } else {
      bitsConsumed = Math.min(8, bits);
      this.bitsPending = 8 - bitsConsumed;
      this.uint8Array[this.position++] = value >> bits - bitsConsumed << this.bitsPending;
    }
    bits -= bitsConsumed;
    if (bits > 0) {
      this.writeBits(bits, value);
    }
    return this;
  }
  readBits(bits, bitBuffer) {
    if (typeof bitBuffer == "undefined") {
      bitBuffer = 0;
    }
    if (bits == 0) {
      return bitBuffer;
    }
    let partial;
    let bitsConsumed;
    if (this.bitsPending > 0) {
      const byte = this.uint8Array[this.position - 1] & 255 >> 8 - this.bitsPending;
      bitsConsumed = Math.min(this.bitsPending, bits);
      this.bitsPending -= bitsConsumed;
      partial = byte >> this.bitsPending;
    } else {
      bitsConsumed = Math.min(8, bits);
      this.bitsPending = 8 - bitsConsumed;
      partial = this.uint8Array[this.position++] >> this.bitsPending;
    }
    bits -= bitsConsumed;
    bitBuffer = bitBuffer << bitsConsumed | partial;
    return bits > 0 ? this.readBits(bits, bitBuffer) : bitBuffer;
  }
  seekTo(bitPos) {
    this.position = bitPos / 8 | 0;
    this.bitsPending = bitPos % 8;
    if (this.bitsPending > 0) {
      this.bitsPending = 8 - this.bitsPending;
      this.position++;
    }
  }
};

// ../common/src/number.ts
function uint8Add(a, b) {
  return a + b & 255;
}
function uint16Add(a, b) {
  return a + b & 65535;
}
function uint32Add(a, b) {
  return Number(BigInt(a) + BigInt(b) & 0xffffffffn);
}
function uint24(v) {
  return v & 16777215;
}
function uint16Gt(a, b) {
  const halfMod = 32768;
  return a < b && b - a > halfMod || a > b && a - b < halfMod;
}
function uint16Gte(a, b) {
  return a === b || uint16Gt(a, b);
}
function uint32Gt(a, b) {
  const halfMod = 2147483648;
  return a < b && b - a > halfMod || a > b && a - b < halfMod;
}
function uint32Gte(a, b) {
  return a === b || uint32Gt(a, b);
}
var int = (n) => Number.parseInt(n, 10);

// ../common/src/promise.ts
var PromiseQueue = class {
  queue = [];
  running = false;
  push = (promise) => new Promise((r, f) => {
    this.queue.push({ promise, done: r, failed: f });
    if (!this.running) {
      this.run();
    }
  });
  async run() {
    const task = this.queue.shift();
    if (task) {
      this.running = true;
      try {
        const res = await task.promise();
        task.done(res);
      } catch (error) {
        task.failed(error);
      }
      this.run();
    } else {
      this.running = false;
    }
  }
  cancel() {
    this.queue = [];
  }
};

// ../common/src/network.ts
import { createSocket } from "dgram";
var interfaceAddress = (type, interfaceAddresses) => interfaceAddresses ? interfaceAddresses[type] : void 0;
async function randomPort(protocol = "udp4", interfaceAddresses) {
  const socket = createSocket(protocol);
  setImmediate(
    () => socket.bind({
      port: 0,
      address: interfaceAddress(protocol, interfaceAddresses)
    })
  );
  await new Promise((r) => {
    socket.once("error", r);
    socket.once("listening", r);
  });
  const port = socket.address()?.port;
  await new Promise((r) => socket.close(() => r()));
  return port;
}
async function randomPorts(num, protocol = "udp4", interfaceAddresses) {
  return Promise.all(
    [...Array(num)].map(() => randomPort(protocol, interfaceAddresses))
  );
}
async function findPort(min, max, protocol = "udp4", interfaceAddresses) {
  let port;
  for (let i = min; i <= max; i++) {
    const socket = createSocket(protocol);
    setImmediate(
      () => socket.bind({
        port: i,
        address: interfaceAddress(protocol, interfaceAddresses)
      })
    );
    const err5 = await new Promise((r) => {
      socket.once("error", (e) => r(e));
      socket.once("listening", () => r());
    });
    if (err5) {
      await new Promise((r) => socket.close(() => r()));
      continue;
    }
    port = socket.address()?.port;
    await new Promise((r) => socket.close(() => r()));
    if (min <= port && port <= max) {
      break;
    }
  }
  if (!port) throw new Error("port not found");
  return port;
}
function normalizeFamilyNodeV18(family) {
  if (family === "IPv4") return 4;
  if (family === "IPv6") return 6;
  return family;
}

// ../common/src/log.ts
import Debug from "debug";
var WeriftError = class extends Error {
  message;
  payload;
  path;
  constructor(props) {
    super(props.message);
  }
  toJSON() {
    return {
      message: this.message,
      payload: JSON.parse(JSON.stringify(this.payload)),
      path: this.path
    };
  }
};
var debug = Debug.debug;

// ../common/src/event.ts
var Event = class {
  event = {
    stack: [],
    promiseStack: [],
    eventId: 0
  };
  ended = false;
  onended;
  onerror = (e) => {
  };
  execute = (...args) => {
    if (this.ended) {
      return;
    }
    for (const item of this.event.stack) {
      item.execute(...args);
    }
    (async () => {
      for (const item of this.event.promiseStack) {
        await item.execute(...args);
      }
    })().catch((e) => {
      this.onerror(e);
    });
  };
  complete = () => {
    if (this.ended) {
      return;
    }
    for (const item of this.event.stack) {
      if (item.complete) {
        item.complete();
      }
    }
    this.allUnsubscribe();
    this.ended = true;
    if (this.onended) {
      this.onended();
      this.onended = void 0;
    }
  };
  error = (e) => {
    if (this.ended) {
      return;
    }
    for (const item of this.event.stack) {
      if (item.error) {
        item.error(e);
      }
    }
    this.allUnsubscribe();
  };
  allUnsubscribe = () => {
    if (this.ended) {
      throw new Error("event completed");
    }
    this.event = {
      stack: [],
      promiseStack: [],
      eventId: 0
    };
  };
  subscribe = (execute, complete, error) => {
    const id = this.event.eventId;
    this.event.stack.push({ execute, id, complete, error });
    this.event.eventId++;
    const unSubscribe = () => {
      this.event.stack = this.event.stack.filter(
        (item) => item.id !== id && item
      );
    };
    const disposer = (disposer2) => {
      disposer2.push(unSubscribe);
    };
    return { unSubscribe, disposer };
  };
  pipe(e) {
    this.subscribe((...args) => {
      e.execute(...args);
    });
  }
  queuingSubscribe = (execute, complete, error) => {
    if (this.ended) throw new Error("event completed");
    const id = this.event.eventId;
    this.event.promiseStack.push({ execute, id, complete, error });
    this.event.eventId++;
    const unSubscribe = () => {
      this.event.stack = this.event.stack.filter(
        (item) => item.id !== id && item
      );
    };
    const disposer = (disposer2) => {
      disposer2.push(unSubscribe);
    };
    return { unSubscribe, disposer };
  };
  once = (execute, complete, error) => {
    const off = this.subscribe(
      (...args) => {
        off.unSubscribe();
        execute(...args);
      },
      complete,
      error
    );
  };
  watch = (cb, timeLimit) => new Promise((resolve, reject) => {
    const timeout = timeLimit && setTimeout(() => {
      reject("Event watch timeout");
    }, timeLimit);
    const { unSubscribe } = this.subscribe((...args) => {
      const done = cb(...args);
      if (done) {
        if (timeout) clearTimeout(timeout);
        unSubscribe();
        resolve(args);
      }
    });
  });
  asPromise = (timeLimit) => new Promise((resolve, reject) => {
    const timeout = timeLimit && setTimeout(() => {
      reject("Event asPromise timeout");
    }, timeLimit);
    this.once(
      (...args) => {
        if (timeout) clearTimeout(timeout);
        resolve(args);
      },
      () => {
        if (timeout) clearTimeout(timeout);
        resolve([]);
      },
      (err5) => {
        if (timeout) clearTimeout(timeout);
        reject(err5);
      }
    );
  });
  get returnTrigger() {
    const { execute, error, complete } = this;
    return { execute, error, complete };
  }
  get returnListener() {
    const { subscribe, once, asPromise } = this;
    return { subscribe, once, asPromise };
  }
  get length() {
    return this.event.stack.length;
  }
};
var EventDisposer = class {
  _disposer = [];
  push(disposer) {
    this._disposer.push(disposer);
  }
  dispose() {
    this._disposer.forEach((d) => d());
    this._disposer = [];
  }
};

// ../common/src/transport.ts
import {
  createSocket as createSocket2
} from "dgram";
import net from "net";
import { connect } from "net";
var log = debug("werift-ice:packages/ice/src/transport.ts");
var UdpTransport = class _UdpTransport {
  constructor(socketType, options = {}) {
    this.socketType = socketType;
    this.options = options;
    this.socket = createSocket2(socketType);
    this.socket.on("message", (data, info) => {
      if (normalizeFamilyNodeV18(info.family) === 6) {
        [info.address] = info.address.split("%");
      }
      this.rinfo = info;
      try {
        this.onData(data, [info.address, info.port]);
      } catch (error) {
        log("onData error", error);
      }
    });
  }
  type = "udp";
  socket;
  rinfo;
  onData = () => {
  };
  static async init(type, options = {}) {
    const transport = new _UdpTransport(type, options);
    await transport.init();
    return transport;
  }
  async init() {
    const address = interfaceAddress(
      this.socketType,
      this.options.interfaceAddresses
    );
    if (this.options.port) {
      this.socket.bind({ port: this.options.port, address });
    } else if (this.options.portRange) {
      const port = await findPort(
        this.options.portRange[0],
        this.options.portRange[1],
        this.socketType,
        this.options.interfaceAddresses
      );
      this.socket.bind({ port, address });
    } else {
      this.socket.bind({ address });
    }
    await new Promise((r) => this.socket.once("listening", r));
  }
  send = async (data, addr) => {
    if (addr && !net.isIP(addr[0])) {
      return new Promise((r, f) => {
        this.socket.send(data, addr[1], addr[0], (error) => {
          if (error) {
            log("send error", addr, data);
            f(error);
          } else {
            r();
          }
        });
      });
    } else {
      addr = addr ?? [this.rinfo?.address, this.rinfo?.port];
      this.socket.send(data, addr[1], addr[0]);
    }
  };
  get address() {
    return this.socket.address();
  }
  get host() {
    return this.socket.address().address;
  }
  get port() {
    return this.socket.address().port;
  }
  close = () => new Promise((r) => {
    this.socket.once("close", r);
    try {
      this.socket.close();
    } catch (error) {
      r();
    }
  });
};
var TcpTransport = class _TcpTransport {
  constructor(addr) {
    this.addr = addr;
    this.connect();
  }
  type = "tcp";
  connecting;
  client;
  onData = () => {
  };
  closed = false;
  connect() {
    if (this.closed) {
      return;
    }
    if (this.client) {
      this.client.destroy();
    }
    this.connecting = new Promise((r, f) => {
      try {
        this.client = connect({ port: this.addr[1], host: this.addr[0] }, r);
      } catch (error) {
        f(error);
      }
    });
    this.client.on("data", (data) => {
      const addr = [
        this.client.remoteAddress,
        this.client.remotePort
      ];
      this.onData(data, addr);
    });
    this.client.on("end", () => {
      this.connect();
    });
    this.client.on("error", (error) => {
      console.log("error", error);
    });
  }
  async init() {
    await this.connecting;
  }
  static async init(addr) {
    const transport = new _TcpTransport(addr);
    await transport.init();
    return transport;
  }
  get address() {
    return {};
  }
  send = async (data, addr) => {
    await this.connecting;
    this.client.write(data, (err5) => {
      if (err5) {
        console.log("err", err5);
      }
    });
  };
  close = async () => {
    this.closed = true;
    this.client.destroy();
  };
};

// ../rtp/src/extra/container/mp4/mp4box.ts
import {
  BoxParser,
  ISOFile,
  Log,
  createFile,
  DataStream
} from "mp4box";
import {
  BoxParser as BoxParser2
} from "mp4box";
BoxParser2.dOpsBox.prototype.write = function(stream) {
  this.size = 11;
  this.writeHeader(stream);
  stream.writeUint8(0);
  stream.writeUint8(this.OutputChannelCount);
  stream.writeUint16(this.PreSkip);
  stream.writeUint32(this.InputSampleRate);
  stream.writeUint16(0);
  stream.writeUint8(0);
};

// ../rtp/src/extra/container/mp4/container.ts
var Mp4Container = class {
  constructor(props) {
    this.props = props;
    this.#mp4 = new ISOFile();
    this.#mp4.init();
  }
  #mp4;
  #audioFrame;
  #videoFrame;
  // 1 frame buffer
  audioTrack;
  videoTrack;
  #audioSegment = 0;
  #videoSegment = 0;
  onData = new Event();
  get tracksReady() {
    let ready = true;
    if (this.props.track.audio && !this.audioTrack) {
      ready = false;
    }
    if (this.props.track.video && !this.videoTrack) {
      ready = false;
    }
    return ready;
  }
  write(frame) {
    if (isDecoderConfig(frame)) {
      return this.#init(frame);
    } else {
      return this.#enqueue(frame);
    }
  }
  #init(frame) {
    let codec = frame.codec.substring(0, 4);
    if (codec == "opus") {
      codec = "Opus";
    }
    const options = {
      type: codec,
      timescale: 1e6
    };
    if (isVideoConfig(frame)) {
      options.width = frame.codedWidth;
      options.height = frame.codedHeight;
    } else {
      options.channel_count = frame.numberOfChannels;
      options.samplerate = frame.sampleRate;
      options.hdlr = "soun";
    }
    if (!frame.description) throw new Error("missing frame description");
    const desc = frame.description;
    if (codec === "avc1") {
      options.avcDecoderConfigRecord = desc;
    } else if (codec === "hev1") {
      options.hevcDecoderConfigRecord = desc;
    } else if (codec === "Opus") {
      const dops = new BoxParser.dOpsBox();
      dops.parse(new DataStream(desc, 8, DataStream.LITTLE_ENDIAN));
      options.description = dops;
    } else {
      throw new Error(`unsupported codec: ${codec}`);
    }
    const track = this.#mp4.addTrack(options);
    if (track == void 0) {
      throw new Error("failed to initialize MP4 track");
    }
    if (frame.track === "audio") {
      this.audioTrack = track;
    } else {
      this.videoTrack = track;
    }
    if (!this.tracksReady) {
      return;
    }
    const buffer2 = ISOFile.writeInitializationSegment(
      this.#mp4.ftyp,
      this.#mp4.moov,
      0,
      0
    );
    const data = new Uint8Array(buffer2);
    const res = {
      type: "init",
      timestamp: 0,
      duration: 0,
      data,
      kind: frame.track
    };
    this.onData.execute(res);
  }
  frameBuffer = [];
  #enqueue(frame) {
    this.frameBuffer.push(frame);
    if (!this.tracksReady) {
      return;
    }
    for (const frame2 of this.frameBuffer) {
      this._enqueue(frame2);
    }
    this.frameBuffer = [];
  }
  _enqueue(frame) {
    const track = frame.track === "audio" ? this.audioTrack : this.videoTrack;
    if (!track) {
      throw new Error("track missing");
    }
    if (frame.track === "video") {
      if (frame.type == "key") {
        this.#videoSegment += 1;
      } else if (this.#videoSegment == 0) {
        throw new Error("must start with keyframe");
      }
    } else {
      this.#audioSegment += 1;
    }
    if (frame.track === "video") {
      if (!this.#videoFrame) {
        this.#videoFrame = frame;
        return;
      }
    } else {
      if (!this.#audioFrame) {
        this.#audioFrame = frame;
        return;
      }
    }
    const bufferFrame = frame.track === "video" ? this.#videoFrame : this.#audioFrame;
    if (!bufferFrame) {
      throw new Error("bufferFrame missing");
    }
    const duration = frame.timestamp - bufferFrame.timestamp;
    const buffer2 = new ArrayBuffer(bufferFrame.byteLength);
    bufferFrame.copyTo(buffer2);
    this.#mp4.addSample(track, buffer2, {
      duration,
      dts: bufferFrame.timestamp,
      cts: bufferFrame.timestamp,
      is_sync: bufferFrame.type == "key"
    });
    const stream = new DataStream(void 0, 0, DataStream.BIG_ENDIAN);
    for (; ; ) {
      const moof = this.#mp4.moofs.shift();
      const mdat = this.#mp4.mdats.shift();
      if (!moof && !mdat) break;
      if (!moof) throw new Error("moof missing");
      if (!mdat) throw new Error("mdat missing");
      moof.write(stream);
      mdat.write(stream);
    }
    const data = new Uint8Array(stream.buffer);
    if (frame.track === "video") {
      this.#videoFrame = frame;
    } else {
      this.#audioFrame = frame;
    }
    const res = {
      type: bufferFrame.type,
      timestamp: bufferFrame.timestamp,
      kind: frame.track,
      duration,
      data
    };
    this.onData.execute(res);
  }
  /* TODO flush the last frame
  #flush(controller: TransformStreamDefaultController<Chunk>) {
  	if (this.#frame) {
  		// TODO guess the duration
  		this.#enqueue(this.#frame, 0, controller)
  	}
  }
  */
};
function isDecoderConfig(frame) {
  return frame.codec !== void 0;
}
function isVideoConfig(frame) {
  return frame.codedWidth !== void 0;
}
var mp4SupportedCodecs = ["avc1", "opus"];

// ../rtp/src/extra/container/mp4/exp-golomb.ts
var ExpGolomb = class {
  constructor(uint8array) {
    this.uint8array = uint8array;
    this._buffer = uint8array;
    this._total_bytes = uint8array.byteLength;
    this._total_bits = uint8array.byteLength * 8;
  }
  TAG = "ExpGolomb";
  _buffer;
  _buffer_index = 0;
  _total_bytes;
  _total_bits;
  _current_word = 0;
  _current_word_bits_left = 0;
  destroy() {
    this._buffer = null;
  }
  _fillCurrentWord() {
    const buffer_bytes_left = this._total_bytes - this._buffer_index;
    if (buffer_bytes_left <= 0)
      throw new Error("ExpGolomb: _fillCurrentWord() but no bytes available");
    const bytes_read = Math.min(4, buffer_bytes_left);
    const word = new Uint8Array(4);
    word.set(
      this._buffer.subarray(
        this._buffer_index,
        this._buffer_index + bytes_read
      )
    );
    this._current_word = new DataView(word.buffer).getUint32(0, false);
    this._buffer_index += bytes_read;
    this._current_word_bits_left = bytes_read * 8;
  }
  readBits(bits) {
    if (bits > 32)
      throw new Error("ExpGolomb: readBits() bits exceeded max 32bits!");
    if (bits <= this._current_word_bits_left) {
      const result3 = this._current_word >>> 32 - bits;
      this._current_word <<= bits;
      this._current_word_bits_left -= bits;
      return result3;
    }
    let result = this._current_word_bits_left ? this._current_word : 0;
    result = result >>> 32 - this._current_word_bits_left;
    const bits_need_left = bits - this._current_word_bits_left;
    this._fillCurrentWord();
    const bits_read_next = Math.min(
      bits_need_left,
      this._current_word_bits_left
    );
    const result2 = this._current_word >>> 32 - bits_read_next;
    this._current_word <<= bits_read_next;
    this._current_word_bits_left -= bits_read_next;
    result = result << bits_read_next | result2;
    return result;
  }
  readBool() {
    return this.readBits(1) === 1;
  }
  readByte() {
    return this.readBits(8);
  }
  _skipLeadingZero() {
    let zero_count;
    for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {
      if (0 !== (this._current_word & 2147483648 >>> zero_count)) {
        this._current_word <<= zero_count;
        this._current_word_bits_left -= zero_count;
        return zero_count;
      }
    }
    this._fillCurrentWord();
    return zero_count + this._skipLeadingZero();
  }
  readUEG() {
    const leading_zeros = this._skipLeadingZero();
    return this.readBits(leading_zeros + 1) - 1;
  }
  readSEG() {
    const value = this.readUEG();
    if (value & 1) {
      return value + 1 >>> 1;
    } else {
      return -1 * (value >>> 1);
    }
  }
};
var exp_golomb_default = ExpGolomb;

// ../rtp/src/extra/container/mp4/sps-parser.ts
var SPSParser = class _SPSParser {
  static _ebsp2rbsp(uint8array) {
    const src = uint8array;
    const src_length = src.byteLength;
    const dst = new Uint8Array(src_length);
    let dst_idx = 0;
    for (let i = 0; i < src_length; i++) {
      if (i >= 2) {
        if (src[i] === 3 && src[i - 1] === 0 && src[i - 2] === 0) {
          continue;
        }
      }
      dst[dst_idx] = src[i];
      dst_idx++;
    }
    return new Uint8Array(dst.buffer, 0, dst_idx);
  }
  static parseSPS(uint8array) {
    const codec_array = uint8array.subarray(1, 4);
    let codec_mimetype = "avc1.";
    for (let j = 0; j < 3; j++) {
      let h = codec_array[j].toString(16);
      if (h.length < 2) {
        h = "0" + h;
      }
      codec_mimetype += h;
    }
    const rbsp = _SPSParser._ebsp2rbsp(uint8array);
    let gb = new exp_golomb_default(rbsp);
    gb.readByte();
    const profile_idc = gb.readByte();
    gb.readByte();
    const level_idc = gb.readByte();
    gb.readUEG();
    const profile_string = _SPSParser.getProfileString(profile_idc);
    const level_string = _SPSParser.getLevelString(level_idc);
    let chroma_format_idc = 1;
    let chroma_format = 420;
    const chroma_format_table = [0, 420, 422, 444];
    let bit_depth_luma = 8;
    let bit_depth_chroma = 8;
    if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {
      chroma_format_idc = gb.readUEG();
      if (chroma_format_idc === 3) {
        gb.readBits(1);
      }
      if (chroma_format_idc <= 3) {
        chroma_format = chroma_format_table[chroma_format_idc];
      }
      bit_depth_luma = gb.readUEG() + 8;
      bit_depth_chroma = gb.readUEG() + 8;
      gb.readBits(1);
      if (gb.readBool()) {
        const scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;
        for (let i = 0; i < scaling_list_count; i++) {
          if (gb.readBool()) {
            if (i < 6) {
              _SPSParser._skipScalingList(gb, 16);
            } else {
              _SPSParser._skipScalingList(gb, 64);
            }
          }
        }
      }
    }
    gb.readUEG();
    const pic_order_cnt_type = gb.readUEG();
    if (pic_order_cnt_type === 0) {
      gb.readUEG();
    } else if (pic_order_cnt_type === 1) {
      gb.readBits(1);
      gb.readSEG();
      gb.readSEG();
      const num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();
      for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
        gb.readSEG();
      }
    }
    const ref_frames = gb.readUEG();
    gb.readBits(1);
    const pic_width_in_mbs_minus1 = gb.readUEG();
    const pic_height_in_map_units_minus1 = gb.readUEG();
    const frame_mbs_only_flag = gb.readBits(1);
    if (frame_mbs_only_flag === 0) {
      gb.readBits(1);
    }
    gb.readBits(1);
    let frame_crop_left_offset = 0;
    let frame_crop_right_offset = 0;
    let frame_crop_top_offset = 0;
    let frame_crop_bottom_offset = 0;
    const frame_cropping_flag = gb.readBool();
    if (frame_cropping_flag) {
      frame_crop_left_offset = gb.readUEG();
      frame_crop_right_offset = gb.readUEG();
      frame_crop_top_offset = gb.readUEG();
      frame_crop_bottom_offset = gb.readUEG();
    }
    let sar_width = 1, sar_height = 1;
    let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;
    const vui_parameters_present_flag = gb.readBool();
    if (vui_parameters_present_flag) {
      if (gb.readBool()) {
        const aspect_ratio_idc = gb.readByte();
        const sar_w_table = [
          1,
          12,
          10,
          16,
          40,
          24,
          20,
          32,
          80,
          18,
          15,
          64,
          160,
          4,
          3,
          2
        ];
        const sar_h_table = [
          1,
          11,
          11,
          11,
          33,
          11,
          11,
          11,
          33,
          11,
          11,
          33,
          99,
          3,
          2,
          1
        ];
        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
          sar_width = sar_w_table[aspect_ratio_idc - 1];
          sar_height = sar_h_table[aspect_ratio_idc - 1];
        } else if (aspect_ratio_idc === 255) {
          sar_width = gb.readByte() << 8 | gb.readByte();
          sar_height = gb.readByte() << 8 | gb.readByte();
        }
      }
      if (gb.readBool()) {
        gb.readBool();
      }
      if (gb.readBool()) {
        gb.readBits(4);
        if (gb.readBool()) {
          gb.readBits(24);
        }
      }
      if (gb.readBool()) {
        gb.readUEG();
        gb.readUEG();
      }
      if (gb.readBool()) {
        const num_units_in_tick = gb.readBits(32);
        const time_scale = gb.readBits(32);
        fps_fixed = gb.readBool();
        fps_num = time_scale;
        fps_den = num_units_in_tick * 2;
        fps = fps_num / fps_den;
      }
    }
    let sarScale = 1;
    if (sar_width !== 1 || sar_height !== 1) {
      sarScale = sar_width / sar_height;
    }
    let crop_unit_x = 0, crop_unit_y = 0;
    if (chroma_format_idc === 0) {
      crop_unit_x = 1;
      crop_unit_y = 2 - frame_mbs_only_flag;
    } else {
      const sub_wc = chroma_format_idc === 3 ? 1 : 2;
      const sub_hc = chroma_format_idc === 1 ? 2 : 1;
      crop_unit_x = sub_wc;
      crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);
    }
    let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;
    let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);
    codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;
    codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;
    const present_width = Math.ceil(codec_width * sarScale);
    gb.destroy();
    gb = null;
    return {
      codec_mimetype,
      profile_idc,
      level_idc,
      profile_string,
      // baseline, high, high10, ...
      level_string,
      // 3, 3.1, 4, 4.1, 5, 5.1, ...
      chroma_format_idc,
      bit_depth: bit_depth_luma,
      // 8bit, 10bit, ...
      bit_depth_luma,
      bit_depth_chroma,
      ref_frames,
      chroma_format,
      // 4:2:0, 4:2:2, ...
      chroma_format_string: _SPSParser.getChromaFormatString(chroma_format),
      frame_rate: {
        fixed: fps_fixed,
        fps,
        fps_den,
        fps_num
      },
      sar_ratio: {
        width: sar_width,
        height: sar_height
      },
      codec_size: {
        width: codec_width,
        height: codec_height
      },
      present_size: {
        width: present_width,
        height: codec_height
      }
    };
  }
  static _skipScalingList(gb, count) {
    let last_scale = 8, next_scale = 8;
    let delta_scale = 0;
    for (let i = 0; i < count; i++) {
      if (next_scale !== 0) {
        delta_scale = gb.readSEG();
        next_scale = (last_scale + delta_scale + 256) % 256;
      }
      last_scale = next_scale === 0 ? last_scale : next_scale;
    }
  }
  static getProfileString(profile_idc) {
    switch (profile_idc) {
      case 66:
        return "Baseline";
      case 77:
        return "Main";
      case 88:
        return "Extended";
      case 100:
        return "High";
      case 110:
        return "High10";
      case 122:
        return "High422";
      case 244:
        return "High444";
      default:
        return "Unknown";
    }
  }
  static getLevelString(level_idc) {
    return (level_idc / 10).toFixed(1);
  }
  static getChromaFormatString(chroma) {
    switch (chroma) {
      case 420:
        return "4:2:0";
      case 422:
        return "4:2:2";
      case 444:
        return "4:4:4";
      default:
        return "Unknown";
    }
  }
};
var sps_parser_default = SPSParser;

// ../rtp/src/extra/container/mp4/h264.ts
var H264NaluType = /* @__PURE__ */ ((H264NaluType2) => {
  H264NaluType2[H264NaluType2["kUnspecified"] = 0] = "kUnspecified";
  H264NaluType2[H264NaluType2["kSliceNonIDR"] = 1] = "kSliceNonIDR";
  H264NaluType2[H264NaluType2["kSliceDPA"] = 2] = "kSliceDPA";
  H264NaluType2[H264NaluType2["kSliceDPB"] = 3] = "kSliceDPB";
  H264NaluType2[H264NaluType2["kSliceDPC"] = 4] = "kSliceDPC";
  H264NaluType2[H264NaluType2["kSliceIDR"] = 5] = "kSliceIDR";
  H264NaluType2[H264NaluType2["kSliceSEI"] = 6] = "kSliceSEI";
  H264NaluType2[H264NaluType2["kSliceSPS"] = 7] = "kSliceSPS";
  H264NaluType2[H264NaluType2["kSlicePPS"] = 8] = "kSlicePPS";
  H264NaluType2[H264NaluType2["kSliceAUD"] = 9] = "kSliceAUD";
  H264NaluType2[H264NaluType2["kEndOfSequence"] = 10] = "kEndOfSequence";
  H264NaluType2[H264NaluType2["kEndOfStream"] = 11] = "kEndOfStream";
  H264NaluType2[H264NaluType2["kFiller"] = 12] = "kFiller";
  H264NaluType2[H264NaluType2["kSPSExt"] = 13] = "kSPSExt";
  H264NaluType2[H264NaluType2["kReserved0"] = 14] = "kReserved0";
  return H264NaluType2;
})(H264NaluType || {});
var H264NaluPayload = class {
  type;
  data;
};
var H264NaluAVC1 = class {
  type;
  data;
  constructor(nalu) {
    const nalu_size = nalu.data.byteLength;
    this.type = nalu.type;
    this.data = new Uint8Array(4 + nalu_size);
    const v = new DataView(this.data.buffer);
    v.setUint32(0, nalu_size);
    this.data.set(nalu.data, 4);
  }
};
var H264AnnexBParser = class {
  TAG = "H264AnnexBParser";
  data_;
  current_startcode_offset_ = 0;
  eof_flag_ = false;
  constructor(data) {
    this.data_ = data;
    this.current_startcode_offset_ = this.findNextStartCodeOffset(0);
  }
  findNextStartCodeOffset(start_offset) {
    let i = start_offset;
    const data = this.data_;
    for (; ; ) {
      if (i + 3 >= data.byteLength) {
        this.eof_flag_ = true;
        return data.byteLength;
      }
      const uint32 = data[i + 0] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3];
      const uint242 = data[i + 0] << 16 | data[i + 1] << 8 | data[i + 2];
      if (uint32 === 1 || uint242 === 1) {
        return i;
      } else {
        i++;
      }
    }
  }
  readNextNaluPayload() {
    const data = this.data_;
    let nalu_payload = null;
    while (nalu_payload == null) {
      if (this.eof_flag_) {
        break;
      }
      const startcode_offset = this.current_startcode_offset_;
      let offset = startcode_offset;
      const u32 = data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
      if (u32 === 1) {
        offset += 4;
      } else {
        offset += 3;
      }
      const nalu_type = data[offset] & 31;
      const forbidden_bit = (data[offset] & 128) >>> 7;
      const next_startcode_offset = this.findNextStartCodeOffset(offset);
      this.current_startcode_offset_ = next_startcode_offset;
      if (nalu_type >= 14 /* kReserved0 */) {
        continue;
      }
      if (forbidden_bit !== 0) {
        continue;
      }
      const payload_data = data.subarray(offset, next_startcode_offset);
      nalu_payload = new H264NaluPayload();
      nalu_payload.type = nalu_type;
      nalu_payload.data = payload_data;
    }
    return nalu_payload;
  }
};
var AVCDecoderConfigurationRecord = class {
  data;
  // sps, pps: require Nalu without 4 byte length-header
  constructor(sps, pps, sps_details) {
    let length = 6 + 2 + sps.byteLength + 1 + 2 + pps.byteLength;
    let need_extra_fields = false;
    if (sps[3] !== 66 && sps[3] !== 77 && sps[3] !== 88) {
      need_extra_fields = true;
      length += 4;
    }
    const data = this.data = new Uint8Array(length);
    data[0] = 1;
    data[1] = sps[1];
    data[2] = sps[2];
    data[3] = sps[3];
    data[4] = 255;
    data[5] = 224 | 1;
    const sps_length = sps.byteLength;
    data[6] = sps_length >>> 8;
    data[7] = sps_length & 255;
    let offset = 8;
    data.set(sps, 8);
    offset += sps_length;
    data[offset] = 1;
    const pps_length = pps.byteLength;
    data[offset + 1] = pps_length >>> 8;
    data[offset + 2] = pps_length & 255;
    data.set(pps, offset + 3);
    offset += 3 + pps_length;
    if (need_extra_fields) {
      data[offset] = 252 | sps_details.chroma_format_idc;
      data[offset + 1] = 248 | sps_details.bit_depth_luma - 8;
      data[offset + 2] = 248 | sps_details.bit_depth_chroma - 8;
      data[offset + 3] = 0;
      offset += 4;
    }
  }
  getData() {
    return this.data;
  }
};
function annexb2avcc(data) {
  const annexb_parser = new H264AnnexBParser(data);
  let nalu_payload = null;
  const video_init_segment_dispatched_ = false;
  const video_metadata_changed_ = false;
  const video_metadata_ = {
    sps: void 0,
    pps: void 0,
    details: void 0
  };
  while ((nalu_payload = annexb_parser.readNextNaluPayload()) != null) {
    const nalu_avc1 = new H264NaluAVC1(nalu_payload);
    if (nalu_avc1.type === 7 /* kSliceSPS */) {
      const details2 = sps_parser_default.parseSPS(nalu_payload.data);
      if (!video_init_segment_dispatched_) {
        video_metadata_.sps = nalu_avc1;
        video_metadata_.details = details2;
      }
    } else if (nalu_avc1.type === 8 /* kSlicePPS */) {
      if (!video_init_segment_dispatched_ || video_metadata_changed_) {
        video_metadata_.pps = nalu_avc1;
      }
    }
  }
  const sps_without_header = video_metadata_.sps.data.subarray(4);
  const pps_without_header = video_metadata_.pps.data.subarray(4);
  const details = video_metadata_.details;
  const avcc = new AVCDecoderConfigurationRecord(
    sps_without_header,
    pps_without_header,
    details
  );
  return avcc.getData();
}

// ../rtp/src/extra/container/ogg/parser.ts
var OggParser = class {
  pages = [];
  checkSegments(page) {
    if (!page) {
      return { ok: true };
    }
    for (let i = 0; i < page.segmentTable.length; i++) {
      const segment = page.segments[i];
      const table = page.segmentTable[i];
      if (segment.length !== table) {
        return { invalid: i };
      }
    }
    return { ok: true };
  }
  exportSegments() {
    let i = 0;
    const pages = [];
    for (; i < this.pages.length; i++) {
      const page = this.pages[i];
      const { invalid } = this.checkSegments(page);
      if (invalid) {
        break;
      }
      pages.push(page);
    }
    this.pages = this.pages.slice(i);
    return pages.flatMap((page) => page.segments);
  }
  read(buf) {
    for (let index = 0; ; ) {
      if (index > buf.length) break;
      try {
        const lastPage = this.pages.at(-1);
        const invalid = this.checkSegments(lastPage).invalid;
        if (lastPage && invalid) {
          for (let i = invalid; i < lastPage.segmentTable.length; i++) {
            const diff = lastPage.segmentTable[i] - lastPage.segments[i].length;
            lastPage.segments[i] = Buffer.concat([
              lastPage.segments[i],
              buf.subarray(index, index + diff)
            ]);
            index += diff;
          }
        } else {
          const magic = buf.subarray(index, index + 4).toString();
          if (magic !== "OggS") {
            break;
          }
          index += 4;
          index += 1;
          const headerType = buf.readUInt8(index);
          index += 1;
          const granulePosition = buf.readBigInt64LE(index);
          index += 8;
          const bitstreamSerialNumber = buf.readUInt32LE(index);
          index += 4;
          const pageSequenceNumber = buf.readUInt32LE(index);
          index += 4;
          const pageChecksum = buf.readUInt32LE(index);
          index += 4;
          const pageSegments = buf.readUInt8(index);
          index += 1;
          const segmentTable = buf.subarray(index, index + pageSegments);
          index += pageSegments;
          const segments = [];
          for (let i = 0; i < pageSegments; i++) {
            const segment = segmentTable.readUInt8(i);
            const segmentData = buf.subarray(index, index + segment);
            index += segment;
            segments.push(segmentData);
          }
          this.pages.push({
            segments,
            granulePosition: Number(granulePosition),
            segmentTable: [...segmentTable.map((s) => s)]
          });
        }
      } catch (error) {
        break;
      }
    }
    return this;
  }
};

// ../rtp/src/extra/container/webm/container.ts
import { createCipheriv, randomBytes as randomBytes2, randomFillSync } from "crypto";

// ../rtp/src/codec/av1.ts
import { LEB128 } from "@minhducsun2002/leb128";
var log2 = debug("werift-rtp : packages/rtp/src/codec/av1.ts");
var AV1RtpPayload = class _AV1RtpPayload {
  /**
   * RtpStartsWithFragment
   * MUST be set to 1 if the first OBU element is an OBU fragment that is a continuation of an OBU fragment from the previous packet, and MUST be set to 0 otherwise.
   */
  zBit_RtpStartsWithFragment;
  /**
   * RtpEndsWithFragment
   * MUST be set to 1 if the last OBU element is an OBU fragment that will continue in the next packet, and MUST be set to 0 otherwise.
   */
  yBit_RtpEndsWithFragment;
  /**
   * RtpNumObus
   * two bit field that describes the number of OBU elements in the packet. This field MUST be set equal to 0 or equal to the number of OBU elements contained in the packet. If set to 0, each OBU element MUST be preceded by a length field.
   */
  w_RtpNumObus;
  /**
   * RtpStartsNewCodedVideoSequence
   * MUST be set to 1 if the packet is the first packet of a coded video sequence, and MUST be set to 0 otherwise.
   */
  nBit_RtpStartsNewCodedVideoSequence;
  obu_or_fragment = [];
  static deSerialize = (buf) => {
    const p = new _AV1RtpPayload();
    let offset = 0;
    p.zBit_RtpStartsWithFragment = getBit(buf[offset], 0);
    p.yBit_RtpEndsWithFragment = getBit(buf[offset], 1);
    p.w_RtpNumObus = getBit(buf[offset], 2, 2);
    p.nBit_RtpStartsNewCodedVideoSequence = getBit(buf[offset], 4);
    offset++;
    if (p.nBit_RtpStartsNewCodedVideoSequence && p.zBit_RtpStartsWithFragment) {
      throw new Error();
    }
    [...Array(p.w_RtpNumObus - 1).keys()].forEach((i) => {
      const [elementSize, bytes2] = leb128decode(buf.subarray(offset));
      const start = offset + bytes2;
      const end = start + elementSize;
      let isFragment2 = false;
      if (p.zBit_RtpStartsWithFragment && i === 0) {
        isFragment2 = true;
      }
      p.obu_or_fragment.push({ data: buf.subarray(start, end), isFragment: isFragment2 });
      offset += bytes2 + elementSize;
    });
    let isFragment = false;
    if (p.yBit_RtpEndsWithFragment || p.w_RtpNumObus === 1 && p.zBit_RtpStartsWithFragment) {
      isFragment = true;
    }
    p.obu_or_fragment.push({
      data: buf.subarray(offset),
      isFragment
    });
    return p;
  };
  static isDetectedFinalPacketInSequence(header) {
    return header.marker;
  }
  get isKeyframe() {
    return this.nBit_RtpStartsNewCodedVideoSequence === 1;
  }
  static getFrame(payloads) {
    const frames = [];
    const objects = payloads.flatMap((p) => p.obu_or_fragment).reduce(
      (acc, cur, i) => {
        acc[i] = cur;
        return acc;
      },
      {}
    );
    const length = Object.keys(objects).length;
    for (const i of Object.keys(objects).map(Number)) {
      const exist = objects[i];
      if (!exist) continue;
      const { data, isFragment } = exist;
      if (isFragment) {
        let fragments = [];
        for (let head = i; head < length; head++) {
          const target = objects[head];
          if (target.isFragment) {
            fragments.push(target.data);
            delete objects[head];
          } else {
            break;
          }
        }
        if (fragments.length <= 1) {
          log2("fragment lost, maybe packet lost");
          fragments = [];
        }
        frames.push(Buffer.concat(fragments));
      } else {
        frames.push(data);
      }
    }
    const obus = frames.map((f) => AV1Obu.deSerialize(f));
    const lastObu = obus.pop();
    return Buffer.concat([
      ...obus.map((o) => {
        o.obu_has_size_field = 1;
        return o.serialize();
      }),
      lastObu.serialize()
    ]);
  }
};
var AV1Obu = class _AV1Obu {
  obu_forbidden_bit;
  obu_type;
  obu_extension_flag;
  obu_has_size_field;
  obu_reserved_1bit;
  payload;
  static deSerialize(buf) {
    const obu = new _AV1Obu();
    let offset = 0;
    obu.obu_forbidden_bit = getBit(buf[offset], 0);
    obu.obu_type = OBU_TYPES[getBit(buf[offset], 1, 4)];
    obu.obu_extension_flag = getBit(buf[offset], 5);
    obu.obu_has_size_field = getBit(buf[offset], 6);
    obu.obu_reserved_1bit = getBit(buf[offset], 7);
    offset++;
    obu.payload = buf.subarray(offset);
    return obu;
  }
  serialize() {
    const header = new BitWriter2(8).set(this.obu_forbidden_bit).set(OBU_TYPE_IDS[this.obu_type], 4).set(this.obu_extension_flag).set(this.obu_has_size_field).set(this.obu_reserved_1bit).buffer;
    let obuSize = Buffer.alloc(0);
    if (this.obu_has_size_field) {
      obuSize = LEB128.encode(this.payload.length);
    }
    return Buffer.concat([header, obuSize, this.payload]);
  }
};
function leb128decode(buf) {
  let value = 0;
  let leb128bytes = 0;
  for (let i = 0; i < 8; i++) {
    const leb128byte = buf.readUInt8(i);
    value |= (leb128byte & 127) << i * 7;
    leb128bytes++;
    if (!(leb128byte & 128)) {
      break;
    }
  }
  return [value, leb128bytes];
}
var OBU_TYPES = {
  0: "Reserved",
  1: "OBU_SEQUENCE_HEADER",
  2: "OBU_TEMPORAL_DELIMITER",
  3: "OBU_FRAME_HEADER",
  4: "OBU_TILE_GROUP",
  5: "OBU_METADATA",
  6: "OBU_FRAME",
  7: "OBU_REDUNDANT_FRAME_HEADER",
  8: "OBU_TILE_LIST",
  15: "OBU_PADDING"
};
var OBU_TYPE_IDS = Object.entries(OBU_TYPES).reduce(
  (acc, [key, value]) => {
    acc[value] = Number(key);
    return acc;
  },
  {}
);

// ../rtp/src/codec/h264.ts
var H264RtpPayload = class _H264RtpPayload {
  /**forbidden_zero_bit */
  f;
  /**nal_ref_idc */
  nri;
  /**nal_unit_types */
  nalUnitType;
  /**start of a fragmented NAL unit */
  s;
  /**end of a fragmented NAL unit */
  e;
  r;
  nalUnitPayloadType;
  payload;
  fragment;
  static deSerialize(buf, fragment) {
    const h264 = new _H264RtpPayload();
    let offset = 0;
    const naluHeader = buf[offset];
    h264.f = getBit(naluHeader, 0);
    h264.nri = getBit(naluHeader, 1, 2);
    h264.nalUnitType = getBit(naluHeader, 3, 5);
    offset++;
    h264.s = getBit(buf[offset], 0);
    h264.e = getBit(buf[offset], 1);
    h264.r = getBit(buf[offset], 2);
    h264.nalUnitPayloadType = getBit(buf[offset], 3, 5);
    offset++;
    if (0 < h264.nalUnitType && h264.nalUnitType < NalUnitType.stap_a) {
      h264.payload = this.packaging(buf);
    } else if (h264.nalUnitType === NalUnitType.stap_a) {
      let offset2 = stap_aHeaderSize;
      let result = Buffer.alloc(0);
      while (offset2 < buf.length) {
        const naluSize = buf.readUInt16BE(offset2);
        offset2 += stap_aNALULengthSize;
        result = Buffer.concat([
          result,
          this.packaging(buf.subarray(offset2, offset2 + naluSize))
        ]);
        offset2 += naluSize;
      }
      h264.payload = result;
    } else if (h264.nalUnitType === NalUnitType.fu_a) {
      if (!fragment) {
        fragment = Buffer.alloc(0);
      }
      const fu = buf.subarray(offset);
      h264.fragment = Buffer.concat([fragment, fu]);
      if (h264.e) {
        const bitStream = new BitStream(Buffer.alloc(1)).writeBits(1, 0).writeBits(2, h264.nri).writeBits(5, h264.nalUnitPayloadType);
        const nalu = Buffer.concat([bitStream.uint8Array, h264.fragment]);
        h264.fragment = void 0;
        h264.payload = this.packaging(nalu);
      }
    }
    return h264;
  }
  static packaging(buf) {
    return Buffer.concat([annex_bNALUStartCode, buf]);
  }
  static isDetectedFinalPacketInSequence(header) {
    return header.marker;
  }
  get isKeyframe() {
    return this.nalUnitType === NalUnitType.idrSlice || this.nalUnitPayloadType === NalUnitType.idrSlice;
  }
  get isPartitionHead() {
    if (this.nalUnitType === NalUnitType.fu_a || this.nalUnitType === NalUnitType.fu_b) {
      return this.s !== 0;
    }
    return true;
  }
};
var NalUnitType = {
  idrSlice: 5,
  stap_a: 24,
  stap_b: 25,
  mtap16: 26,
  mtap24: 27,
  fu_a: 28,
  fu_b: 29
};
var annex_bNALUStartCode = Buffer.from([0, 0, 0, 1]);
var stap_aHeaderSize = 1;
var stap_aNALULengthSize = 2;

// ../rtp/src/codec/opus.ts
var OpusRtpPayload = class _OpusRtpPayload {
  payload;
  static deSerialize(buf) {
    const opus = new _OpusRtpPayload();
    opus.payload = buf;
    return opus;
  }
  static isDetectedFinalPacketInSequence(header) {
    return true;
  }
  get isKeyframe() {
    return true;
  }
  static createCodecPrivate(samplingFrequency = 48e3) {
    return Buffer.concat([
      Buffer.from("OpusHead"),
      bufferWriter([1, 1], [1, 2]),
      bufferWriterLE([2, 4, 2, 1], [312, samplingFrequency, 0, 0])
    ]);
  }
};

// ../rtp/src/codec/vp8.ts
var Vp8RtpPayload = class _Vp8RtpPayload {
  xBit;
  nBit;
  sBit;
  pid;
  iBit;
  lBit;
  tBit;
  kBit;
  mBit;
  pictureId;
  payload;
  size0 = 0;
  hBit;
  ver;
  pBit;
  size1 = 0;
  size2 = 0;
  static deSerialize(buf) {
    const p = new _Vp8RtpPayload();
    let offset = 0;
    p.xBit = getBit(buf[offset], 0);
    p.nBit = getBit(buf[offset], 2);
    p.sBit = getBit(buf[offset], 3);
    p.pid = getBit(buf[offset], 5, 3);
    offset++;
    if (p.xBit) {
      p.iBit = getBit(buf[offset], 0);
      p.lBit = getBit(buf[offset], 1);
      p.tBit = getBit(buf[offset], 2);
      p.kBit = getBit(buf[offset], 3);
      offset++;
    }
    if (p.iBit) {
      p.mBit = getBit(buf[offset], 0);
      if (p.mBit) {
        const _7 = paddingByte(getBit(buf[offset], 1, 7));
        const _8 = paddingByte(buf[offset + 1]);
        p.pictureId = Number.parseInt(_7 + _8, 2);
        offset += 2;
      } else {
        p.pictureId = getBit(buf[offset], 1, 7);
        offset++;
      }
    }
    if (p.lBit) {
      offset++;
    }
    if (p.lBit || p.kBit) {
      if (p.tBit) {
      }
      if (p.kBit) {
      }
      offset++;
    }
    p.payload = buf.subarray(offset);
    if (p.payloadHeaderExist) {
      p.size0 = getBit(buf[offset], 0, 3);
      p.hBit = getBit(buf[offset], 3);
      p.ver = getBit(buf[offset], 4, 3);
      p.pBit = getBit(buf[offset], 7);
      offset++;
      p.size1 = buf[offset];
      offset++;
      p.size2 = buf[offset];
    }
    return p;
  }
  static isDetectedFinalPacketInSequence(header) {
    return header.marker;
  }
  get isKeyframe() {
    return this.pBit === 0;
  }
  get isPartitionHead() {
    return this.sBit === 1;
  }
  get payloadHeaderExist() {
    return this.sBit === 1 && this.pid === 0;
  }
  get size() {
    if (this.payloadHeaderExist) {
      const size = this.size0 + 8 * this.size1 + 2048 * this.size2;
      return size;
    }
    return 0;
  }
};

// ../rtp/src/codec/vp9.ts
var Vp9RtpPayload = class _Vp9RtpPayload {
  /**Picture ID (PID) present */
  iBit;
  /**Inter-picture predicted frame */
  pBit;
  /**Layer indices present */
  lBit;
  /**Flexible mode */
  fBit;
  /**Start of a frame */
  bBit;
  /**End of a frame */
  eBit;
  /**Scalability structure */
  vBit;
  zBit;
  m;
  pictureId;
  tid;
  u;
  sid;
  /**inter_layer_predicted */
  d;
  tl0PicIdx;
  pDiff = [];
  n_s;
  y;
  g;
  width = [];
  height = [];
  n_g = 0;
  pgT = [];
  pgU = [];
  pgP_Diff = [];
  payload;
  static deSerialize(buf) {
    const { p, offset } = this.parseRtpPayload(buf);
    p.payload = buf.subarray(offset);
    return p;
  }
  static parseRtpPayload(buf) {
    const p = new _Vp9RtpPayload();
    let offset = 0;
    p.iBit = getBit(buf[offset], 0);
    p.pBit = getBit(buf[offset], 1);
    p.lBit = getBit(buf[offset], 2);
    p.fBit = getBit(buf[offset], 3);
    p.bBit = getBit(buf[offset], 4);
    p.eBit = getBit(buf[offset], 5);
    p.vBit = getBit(buf[offset], 6);
    p.zBit = getBit(buf[offset], 7);
    offset++;
    if (p.iBit) {
      p.m = getBit(buf[offset], 0);
      if (p.m) {
        const _7 = paddingByte(getBit(buf[offset], 1, 7));
        const _8 = paddingByte(buf[offset + 1]);
        p.pictureId = Number.parseInt(_7 + _8, 2);
        offset += 2;
      } else {
        p.pictureId = getBit(buf[offset], 1, 7);
        offset++;
      }
    }
    if (p.lBit) {
      p.tid = getBit(buf[offset], 0, 3);
      p.u = getBit(buf[offset], 3);
      p.sid = getBit(buf[offset], 4, 3);
      p.d = getBit(buf[offset], 7);
      offset++;
      if (p.fBit === 0) {
        p.tl0PicIdx = buf[offset];
        offset++;
      }
    }
    if (p.fBit && p.pBit) {
      for (; ; ) {
        p.pDiff = [...p.pDiff, getBit(buf[offset], 0, 7)];
        const n = getBit(buf[offset], 7);
        offset++;
        if (n === 0) break;
      }
    }
    if (p.vBit) {
      p.n_s = getBit(buf[offset], 0, 3);
      p.y = getBit(buf[offset], 3);
      p.g = getBit(buf[offset], 4);
      offset++;
      if (p.y) {
        [...Array(p.n_s + 1)].forEach(() => {
          p.width.push(buf.readUInt16BE(offset));
          offset += 2;
          p.height.push(buf.readUInt16BE(offset));
          offset += 2;
        });
      }
      if (p.g) {
        p.n_g = buf[offset];
        offset++;
      }
      if (p.n_g > 0) {
        [...Array(p.n_g).keys()].forEach((i) => {
          p.pgT.push(getBit(buf[offset], 0, 3));
          p.pgU.push(getBit(buf[offset], 3));
          const r = getBit(buf[offset], 4, 2);
          offset++;
          p.pgP_Diff[i] = [];
          if (r > 0) {
            [...Array(r)].forEach(() => {
              p.pgP_Diff[i].push(buf[offset]);
              offset++;
            });
          }
        });
      }
    }
    return { offset, p };
  }
  static isDetectedFinalPacketInSequence(header) {
    return header.marker;
  }
  get isKeyframe() {
    return !!(!this.pBit && this.bBit && (!this.sid || !this.lBit));
  }
  get isPartitionHead() {
    return this.bBit && (!this.lBit || !this.d);
  }
};

// ../rtp/src/codec/base.ts
var DePacketizerBase = class {
  payload;
  fragment;
  static deSerialize(buf, fragment) {
    return {};
  }
  static isDetectedFinalPacketInSequence(header) {
    return true;
  }
  get isKeyframe() {
    return true;
  }
};

// ../rtp/src/codec/index.ts
function dePacketizeRtpPackets(codec, packets, frameFragmentBuffer) {
  const basicCodecParser = (Depacketizer) => {
    const partitions = [];
    for (const p of packets) {
      const codec2 = Depacketizer.deSerialize(p.payload, frameFragmentBuffer);
      if (codec2.fragment) {
        frameFragmentBuffer ??= Buffer.alloc(0);
        frameFragmentBuffer = codec2.fragment;
      } else if (codec2.payload) {
        frameFragmentBuffer = void 0;
      }
      partitions.push(codec2);
    }
    const isKeyframe = !!partitions.find((f) => f.isKeyframe);
    const data = Buffer.concat(
      partitions.map((f) => f.payload).filter((p) => p)
    );
    return {
      isKeyframe,
      data,
      sequence: packets.at(-1)?.header.sequenceNumber ?? 0,
      timestamp: packets.at(-1)?.header.timestamp ?? 0,
      frameFragmentBuffer
    };
  };
  switch (codec.toUpperCase()) {
    case "AV1": {
      const chunks = packets.map((p) => AV1RtpPayload.deSerialize(p.payload));
      const isKeyframe = !!chunks.find((f) => f.isKeyframe);
      const data = AV1RtpPayload.getFrame(chunks);
      return {
        isKeyframe,
        data,
        sequence: packets.at(-1)?.header.sequenceNumber ?? 0,
        timestamp: packets.at(-1)?.header.timestamp ?? 0
      };
    }
    case "MPEG4/ISO/AVC":
      return basicCodecParser(H264RtpPayload);
    case "VP8":
      return basicCodecParser(Vp8RtpPayload);
    case "VP9":
      return basicCodecParser(Vp9RtpPayload);
    case "OPUS":
      return basicCodecParser(OpusRtpPayload);
    default:
      throw new Error();
  }
}
var depacketizerCodecs = [
  "MPEG4/ISO/AVC",
  "VP8",
  "VP9",
  "OPUS",
  "AV1"
];

// ../rtp/src/extra/container/webm/ebml/typedArrayUtils.ts
var numberToByteArray = (num, byteLength = getNumberByteLength(num)) => {
  let byteArray;
  if (byteLength === 1) {
    byteArray = new DataView(new ArrayBuffer(1));
    byteArray.setUint8(0, num);
  } else if (byteLength === 2) {
    byteArray = new DataView(new ArrayBuffer(2));
    byteArray.setUint16(0, num);
  } else if (byteLength === 3) {
    byteArray = new DataView(new ArrayBuffer(3));
    byteArray.setUint8(0, num >> 16);
    byteArray.setUint16(1, num & 65535);
  } else if (byteLength === 4) {
    byteArray = new DataView(new ArrayBuffer(4));
    byteArray.setUint32(0, num);
  } else if (
    /* byteLength === 5 && */
    num < 4294967295
  ) {
    byteArray = new DataView(new ArrayBuffer(5));
    byteArray.setUint32(1, num);
  } else if (byteLength === 5) {
    byteArray = new DataView(new ArrayBuffer(5));
    byteArray.setUint8(0, num / 4294967296 | 0);
    byteArray.setUint32(1, num % 4294967296);
  } else if (byteLength === 6) {
    byteArray = new DataView(new ArrayBuffer(6));
    byteArray.setUint16(0, num / 4294967296 | 0);
    byteArray.setUint32(2, num % 4294967296);
  } else if (byteLength === 7) {
    byteArray = new DataView(new ArrayBuffer(7));
    byteArray.setUint8(0, num / 281474976710656 | 0);
    byteArray.setUint16(1, num / 4294967296 & 65535);
    byteArray.setUint32(3, num % 4294967296);
  } else if (byteLength === 8) {
    byteArray = new DataView(new ArrayBuffer(8));
    byteArray.setUint32(0, num / 4294967296 | 0);
    byteArray.setUint32(4, num % 4294967296);
  } else {
    throw new Error(
      "EBML.typedArrayUtils.numberToByteArray: byte length must be less than or equal to 8"
    );
  }
  return new Uint8Array(byteArray.buffer);
};
var stringToByteArray = (str) => {
  return Uint8Array.from(Array.from(str).map((_) => _.codePointAt(0)));
};
function getNumberByteLength(num) {
  if (num < 0) {
    throw new Error(
      "EBML.typedArrayUtils.getNumberByteLength: negative number not implemented"
    );
  } else if (num < 256) {
    return 1;
  } else if (num < 65536) {
    return 2;
  } else if (num < 16777216) {
    return 3;
  } else if (num < 4294967296) {
    return 4;
  } else if (num < 1099511627776) {
    return 5;
  } else if (num < 281474976710656) {
    return 6;
  } else if (num < 0x20000000000000n) {
    return 7;
  } else {
    throw new Error(
      "EBML.typedArrayUtils.getNumberByteLength: number exceeds Number.MAX_SAFE_INTEGER"
    );
  }
}
var int16Bit = (num) => {
  const ab = new ArrayBuffer(2);
  new DataView(ab).setInt16(0, num);
  return new Uint8Array(ab);
};
var float32bit = (num) => {
  const ab = new ArrayBuffer(4);
  new DataView(ab).setFloat32(0, num);
  return new Uint8Array(ab);
};
var dumpBytes = (b) => {
  return Array.from(new Uint8Array(b)).map((_) => `0x${_.toString(16)}`).join(", ");
};

// ../rtp/src/extra/container/webm/ebml/ebml.ts
var Value = class {
  constructor(bytes2) {
    this.bytes = bytes2;
  }
  write(buf, pos) {
    buf.set(this.bytes, pos);
    return pos + this.bytes.length;
  }
  countSize() {
    return this.bytes.length;
  }
};
var Element = class {
  constructor(id, children, isSizeUnknown) {
    this.id = id;
    this.children = children;
    const bodySize = this.children.reduce((p, c) => p + c.countSize(), 0);
    this.sizeMetaData = isSizeUnknown ? UNKNOWN_SIZE : vintEncode(numberToByteArray(bodySize, getEBMLByteLength(bodySize)));
    this.size = this.id.length + this.sizeMetaData.length + bodySize;
  }
  size;
  sizeMetaData;
  write(buf, pos) {
    buf.set(this.id, pos);
    buf.set(this.sizeMetaData, pos + this.id.length);
    return this.children.reduce(
      (p, c) => c.write(buf, p),
      pos + this.id.length + this.sizeMetaData.length
    );
  }
  countSize() {
    return this.size;
  }
};
var bytes = (data) => {
  return new Value(data);
};
var number = (num) => {
  return bytes(numberToByteArray(num));
};
var float = (num) => bytes(float32bit(num));
var vintEncodedNumber = (num) => {
  return bytes(vintEncode(numberToByteArray(num, getEBMLByteLength(num))));
};
var string = (str) => {
  return bytes(stringToByteArray(str));
};
var element = (id, child) => {
  return new Element(id, Array.isArray(child) ? child : [child], false);
};
var unknownSizeElement = (id, child) => {
  return new Element(id, Array.isArray(child) ? child : [child], true);
};
var build = (v) => {
  const b = new Uint8Array(v.countSize());
  v.write(b, 0);
  return b;
};
var getEBMLByteLength = (num) => {
  if (num < 127) {
    return 1;
  } else if (num < 16383) {
    return 2;
  } else if (num < 2097151) {
    return 3;
  } else if (num < 268435455) {
    return 4;
  } else if (num < 34359738367) {
    return 5;
  } else if (num < 4398046511103) {
    return 6;
  } else if (num < 562949953421311) {
    return 7;
  } else if (num < 0x20000000000000n) {
    return 8;
  } else if (num < 0xffffffffffffffn) {
    throw new Error(
      "EBMLgetEBMLByteLength: number exceeds Number.MAX_SAFE_INTEGER"
    );
  } else {
    throw new Error(
      "EBMLgetEBMLByteLength: data size must be less than or equal to " + (2 ** 56 - 2)
    );
  }
};
var UNKNOWN_SIZE = new Uint8Array([
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255
]);
var vintEncode = (byteArray) => {
  byteArray[0] = getSizeMask(byteArray.length) | byteArray[0];
  return byteArray;
};
var getSizeMask = (byteLength) => {
  return 128 >> byteLength - 1;
};

// ../rtp/src/extra/container/webm/ebml/id.ts
var ID = {
  EBML: Uint8Array.of(26, 69, 223, 163),
  EBMLVersion: Uint8Array.of(66, 134),
  EBMLReadVersion: Uint8Array.of(66, 247),
  EBMLMaxIDLength: Uint8Array.of(66, 242),
  EBMLMaxSizeLength: Uint8Array.of(66, 243),
  DocType: Uint8Array.of(66, 130),
  DocTypeVersion: Uint8Array.of(66, 135),
  DocTypeReadVersion: Uint8Array.of(66, 133),
  Void: Uint8Array.of(236),
  CRC32: Uint8Array.of(191),
  Segment: Uint8Array.of(24, 83, 128, 103),
  SeekHead: Uint8Array.of(17, 77, 155, 116),
  Seek: Uint8Array.of(77, 187),
  SeekID: Uint8Array.of(83, 171),
  SeekPosition: Uint8Array.of(83, 172),
  Info: Uint8Array.of(21, 73, 169, 102),
  SegmentUID: Uint8Array.of(115, 164),
  SegmentFilename: Uint8Array.of(115, 132),
  PrevUID: Uint8Array.of(60, 185, 35),
  PrevFilename: Uint8Array.of(60, 131, 171),
  NextUID: Uint8Array.of(62, 185, 35),
  NextFilename: Uint8Array.of(62, 131, 187),
  SegmentFamily: Uint8Array.of(68, 68),
  ChapterTranslate: Uint8Array.of(105, 36),
  ChapterTranslateEditionUID: Uint8Array.of(105, 252),
  ChapterTranslateCodec: Uint8Array.of(105, 191),
  ChapterTranslateID: Uint8Array.of(105, 165),
  TimecodeScale: Uint8Array.of(42, 215, 177),
  Duration: Uint8Array.of(68, 137),
  DateUTC: Uint8Array.of(68, 97),
  Title: Uint8Array.of(123, 169),
  MuxingApp: Uint8Array.of(77, 128),
  WritingApp: Uint8Array.of(87, 65),
  Cluster: Uint8Array.of(31, 67, 182, 117),
  Timecode: Uint8Array.of(231),
  SilentTracks: Uint8Array.of(88, 84),
  SilentTrackNumber: Uint8Array.of(88, 215),
  Position: Uint8Array.of(167),
  PrevSize: Uint8Array.of(171),
  SimpleBlock: Uint8Array.of(163),
  BlockGroup: Uint8Array.of(160),
  Block: Uint8Array.of(161),
  BlockAdditions: Uint8Array.of(117, 161),
  BlockMore: Uint8Array.of(166),
  BlockAddID: Uint8Array.of(238),
  BlockAdditional: Uint8Array.of(165),
  BlockDuration: Uint8Array.of(155),
  ReferencePriority: Uint8Array.of(250),
  ReferenceBlock: Uint8Array.of(251),
  CodecState: Uint8Array.of(164),
  DiscardPadding: Uint8Array.of(117, 162),
  Slices: Uint8Array.of(142),
  TimeSlice: Uint8Array.of(232),
  LaceNumber: Uint8Array.of(204),
  Tracks: Uint8Array.of(22, 84, 174, 107),
  TrackEntry: Uint8Array.of(174),
  TrackNumber: Uint8Array.of(215),
  TrackUID: Uint8Array.of(115, 197),
  TrackType: Uint8Array.of(131),
  FlagEnabled: Uint8Array.of(185),
  FlagDefault: Uint8Array.of(136),
  FlagForced: Uint8Array.of(85, 170),
  FlagLacing: Uint8Array.of(156),
  MinCache: Uint8Array.of(109, 231),
  MaxCache: Uint8Array.of(109, 248),
  DefaultDuration: Uint8Array.of(35, 227, 131),
  DefaultDecodedFieldDuration: Uint8Array.of(35, 78, 122),
  MaxBlockAdditionID: Uint8Array.of(85, 238),
  Name: Uint8Array.of(83, 110),
  Language: Uint8Array.of(34, 181, 156),
  CodecID: Uint8Array.of(134),
  CodecPrivate: Uint8Array.of(99, 162),
  CodecName: Uint8Array.of(37, 134, 136),
  AttachmentLink: Uint8Array.of(116, 70),
  CodecDecodeAll: Uint8Array.of(170),
  TrackOverlay: Uint8Array.of(111, 171),
  CodecDelay: Uint8Array.of(86, 170),
  SeekPreRoll: Uint8Array.of(86, 187),
  TrackTranslate: Uint8Array.of(102, 36),
  TrackTranslateEditionUID: Uint8Array.of(102, 252),
  TrackTranslateCodec: Uint8Array.of(102, 191),
  TrackTranslateTrackID: Uint8Array.of(102, 165),
  Video: Uint8Array.of(224),
  FlagInterlaced: Uint8Array.of(154),
  FieldOrder: Uint8Array.of(157),
  StereoMode: Uint8Array.of(83, 184),
  AlphaMode: Uint8Array.of(83, 192),
  PixelWidth: Uint8Array.of(176),
  PixelHeight: Uint8Array.of(186),
  PixelCropBottom: Uint8Array.of(84, 170),
  PixelCropTop: Uint8Array.of(84, 187),
  PixelCropLeft: Uint8Array.of(84, 204),
  PixelCropRight: Uint8Array.of(84, 221),
  DisplayWidth: Uint8Array.of(84, 176),
  DisplayHeight: Uint8Array.of(84, 186),
  DisplayUnit: Uint8Array.of(84, 178),
  AspectRatioType: Uint8Array.of(84, 179),
  ColourSpace: Uint8Array.of(46, 181, 36),
  Colour: Uint8Array.of(85, 176),
  MatrixCoefficients: Uint8Array.of(85, 177),
  BitsPerChannel: Uint8Array.of(85, 178),
  ChromaSubsamplingHorz: Uint8Array.of(85, 179),
  ChromaSubsamplingVert: Uint8Array.of(85, 180),
  CbSubsamplingHorz: Uint8Array.of(85, 181),
  CbSubsamplingVert: Uint8Array.of(85, 182),
  ChromaSitingHorz: Uint8Array.of(85, 183),
  ChromaSitingVert: Uint8Array.of(85, 184),
  Range: Uint8Array.of(85, 185),
  TransferCharacteristics: Uint8Array.of(85, 186),
  Primaries: Uint8Array.of(85, 187),
  MaxCLL: Uint8Array.of(85, 188),
  MaxFALL: Uint8Array.of(85, 189),
  MasteringMetadata: Uint8Array.of(85, 208),
  PrimaryRChromaticityX: Uint8Array.of(85, 209),
  PrimaryRChromaticityY: Uint8Array.of(85, 210),
  PrimaryGChromaticityX: Uint8Array.of(85, 211),
  PrimaryGChromaticityY: Uint8Array.of(85, 212),
  PrimaryBChromaticityX: Uint8Array.of(85, 213),
  PrimaryBChromaticityY: Uint8Array.of(85, 214),
  WhitePointChromaticityX: Uint8Array.of(85, 215),
  WhitePointChromaticityY: Uint8Array.of(85, 216),
  LuminanceMax: Uint8Array.of(85, 217),
  LuminanceMin: Uint8Array.of(85, 218),
  Audio: Uint8Array.of(225),
  SamplingFrequency: Uint8Array.of(181),
  OutputSamplingFrequency: Uint8Array.of(120, 181),
  Channels: Uint8Array.of(159),
  BitDepth: Uint8Array.of(98, 100),
  TrackOperation: Uint8Array.of(226),
  TrackCombinePlanes: Uint8Array.of(227),
  TrackPlane: Uint8Array.of(228),
  TrackPlaneUID: Uint8Array.of(229),
  TrackPlaneType: Uint8Array.of(230),
  TrackJoinBlocks: Uint8Array.of(233),
  TrackJoinUID: Uint8Array.of(237),
  ContentEncodings: Uint8Array.of(109, 128),
  ContentEncoding: Uint8Array.of(98, 64),
  ContentEncodingOrder: Uint8Array.of(80, 49),
  ContentEncodingScope: Uint8Array.of(80, 50),
  ContentEncodingType: Uint8Array.of(80, 51),
  ContentCompression: Uint8Array.of(80, 52),
  ContentCompAlgo: Uint8Array.of(66, 84),
  ContentCompSettings: Uint8Array.of(66, 85),
  ContentEncryption: Uint8Array.of(80, 53),
  ContentEncAlgo: Uint8Array.of(71, 225),
  ContentEncKeyID: Uint8Array.of(71, 226),
  ContentSignature: Uint8Array.of(71, 227),
  ContentSigKeyID: Uint8Array.of(71, 228),
  ContentSigAlgo: Uint8Array.of(71, 229),
  ContentSigHashAlgo: Uint8Array.of(71, 230),
  Cues: Uint8Array.of(28, 83, 187, 107),
  CuePoint: Uint8Array.of(187),
  CueTime: Uint8Array.of(179),
  CueTrackPositions: Uint8Array.of(183),
  CueTrack: Uint8Array.of(247),
  CueClusterPosition: Uint8Array.of(241),
  CueRelativePosition: Uint8Array.of(240),
  CueDuration: Uint8Array.of(178),
  CueBlockNumber: Uint8Array.of(83, 120),
  CueCodecState: Uint8Array.of(234),
  CueReference: Uint8Array.of(219),
  CueRefTime: Uint8Array.of(150),
  Attachments: Uint8Array.of(25, 65, 164, 105),
  AttachedFile: Uint8Array.of(97, 167),
  FileDescription: Uint8Array.of(70, 126),
  FileName: Uint8Array.of(70, 110),
  FileMimeType: Uint8Array.of(70, 96),
  FileData: Uint8Array.of(70, 92),
  FileUID: Uint8Array.of(70, 174),
  Chapters: Uint8Array.of(16, 67, 167, 112),
  EditionEntry: Uint8Array.of(69, 185),
  EditionUID: Uint8Array.of(69, 188),
  EditionFlagHidden: Uint8Array.of(69, 189),
  EditionFlagDefault: Uint8Array.of(69, 219),
  EditionFlagOrdered: Uint8Array.of(69, 221),
  EncryptionAlgorithm: Uint8Array.of(71, 225),
  EncryptionKeyID: Uint8Array.of(71, 226),
  ContentEncAESSettings: Uint8Array.of(71, 231),
  AESSettingsCipherMode: Uint8Array.of(71, 232),
  ChapterAtom: Uint8Array.of(182),
  ChapterUID: Uint8Array.of(115, 196),
  ChapterStringUID: Uint8Array.of(86, 84),
  ChapterTimeStart: Uint8Array.of(145),
  ChapterTimeEnd: Uint8Array.of(146),
  ChapterFlagHidden: Uint8Array.of(152),
  ChapterFlagEnabled: Uint8Array.of(69, 152),
  ChapterSegmentUID: Uint8Array.of(110, 103),
  ChapterSegmentEditionUID: Uint8Array.of(110, 188),
  ChapterPhysicalEquiv: Uint8Array.of(99, 195),
  ChapterTrack: Uint8Array.of(143),
  ChapterTrackNumber: Uint8Array.of(137),
  ChapterDisplay: Uint8Array.of(128),
  ChapString: Uint8Array.of(133),
  ChapLanguage: Uint8Array.of(67, 124),
  ChapCountry: Uint8Array.of(67, 126),
  ChapProcess: Uint8Array.of(105, 68),
  ChapProcessCodecID: Uint8Array.of(105, 85),
  ChapProcessPrivate: Uint8Array.of(69, 13),
  ChapProcessCommand: Uint8Array.of(105, 17),
  ChapProcessTime: Uint8Array.of(105, 34),
  ChapProcessData: Uint8Array.of(105, 51),
  Tags: Uint8Array.of(18, 84, 195, 103),
  Tag: Uint8Array.of(115, 115),
  Targets: Uint8Array.of(99, 192),
  TargetTypeValue: Uint8Array.of(104, 202),
  TargetType: Uint8Array.of(99, 202),
  TagTrackUID: Uint8Array.of(99, 197),
  TagEditionUID: Uint8Array.of(99, 201),
  TagChapterUID: Uint8Array.of(99, 196),
  TagAttachmentUID: Uint8Array.of(99, 198),
  SimpleTag: Uint8Array.of(103, 200),
  TagName: Uint8Array.of(69, 163),
  TagLanguage: Uint8Array.of(68, 122),
  TagDefault: Uint8Array.of(68, 132),
  TagString: Uint8Array.of(68, 135),
  TagBinary: Uint8Array.of(68, 133),
  Projection: Uint8Array.of(118, 112),
  ProjectionType: Uint8Array.of(118, 113),
  ProjectionPrivate: Uint8Array.of(118, 114),
  ProjectionPoseYaw: Uint8Array.of(118, 115),
  ProjectionPosePitch: Uint8Array.of(118, 116),
  ProjectionPoseRoll: Uint8Array.of(118, 117)
};

// ../rtp/src/extra/container/webm/container.ts
var WEBMContainer = class {
  ebmlHeader = build(
    element(ID.EBML, [
      element(ID.EBMLVersion, number(1)),
      element(ID.EBMLReadVersion, number(1)),
      element(ID.EBMLMaxIDLength, number(4)),
      element(ID.EBMLMaxSizeLength, number(8)),
      element(ID.DocType, string("webm")),
      element(ID.DocTypeVersion, number(2)),
      element(ID.DocTypeReadVersion, number(2))
    ])
  );
  trackEntries = [];
  trackIvs = {};
  trackKeyIds = {};
  encryptionKey;
  encryptionKeyID = randomBytes2(16);
  constructor(tracks, encryptionKey) {
    this.encryptionKey = encryptionKey;
    this.trackEntries = tracks.map(
      ({ width, height, kind, codec, trackNumber, roll }) => {
        const track = this.createTrackEntry(kind, trackNumber, codec, {
          width,
          height,
          roll
        });
        const ivCounter = new Uint32Array(2);
        randomFillSync(ivCounter);
        this.trackIvs[trackNumber] = ivCounter;
        return track;
      }
    );
  }
  createTrackEntry(kind, trackNumber, codec, {
    width,
    height,
    roll
  } = {}) {
    const trackElements = [];
    if (kind === "video") {
      width ??= 640;
      height ??= 360;
      roll ??= 0;
      trackElements.push(
        element(ID.Video, [
          element(ID.PixelWidth, number(width)),
          element(ID.PixelHeight, number(height)),
          element(ID.Projection, [
            element(ID.ProjectionType, number(0)),
            element(ID.ProjectionPoseRoll, float(roll))
          ])
        ])
      );
    } else {
      trackElements.push(
        element(ID.Audio, [
          element(ID.SamplingFrequency, float(48e3)),
          element(ID.Channels, number(2))
        ])
      );
      trackElements.push(
        element(
          ID.CodecPrivate,
          bytes(OpusRtpPayload.createCodecPrivate())
        )
      );
    }
    if (this.encryptionKey) {
      const encryptionKeyID = this.encryptionKeyID;
      this.trackKeyIds[trackNumber] = encryptionKeyID;
      trackElements.push(
        element(
          ID.ContentEncodings,
          element(ID.ContentEncoding, [
            element(ID.ContentEncodingOrder, number(0)),
            element(ID.ContentEncodingScope, number(1)),
            element(ID.ContentEncodingType, number(1)),
            element(ID.ContentEncryption, [
              element(ID.EncryptionAlgorithm, number(5)),
              element(
                ID.EncryptionKeyID,
                bytes(encryptionKeyID)
              ),
              element(
                ID.ContentEncAESSettings,
                element(ID.AESSettingsCipherMode, number(1))
              )
            ])
          ])
        )
      );
    }
    const trackEntry = element(ID.TrackEntry, [
      element(ID.TrackNumber, number(trackNumber)),
      element(ID.TrackUID, number(trackNumber)),
      element(ID.CodecName, string(codec)),
      element(ID.TrackType, number(kind === "video" ? 1 : 2)),
      element(
        ID.CodecID,
        string(`${kind === "video" ? "V" : "A"}_${codec}`)
      ),
      ...trackElements
    ]);
    return trackEntry;
  }
  createSegment(duration) {
    const elements = [
      element(ID.TimecodeScale, number(millisecond)),
      element(ID.MuxingApp, string("webrtc")),
      element(ID.WritingApp, string("webrtc"))
    ];
    if (duration != void 0) {
      elements.push(element(ID.Duration, float(duration)));
    }
    return build(
      unknownSizeElement(ID.Segment, [
        element(ID.SeekHead, []),
        element(ID.Info, elements),
        element(ID.Tracks, this.trackEntries)
      ])
    );
  }
  createDuration(duration) {
    return build(element(ID.Duration, float(duration)));
  }
  createCuePoint(relativeTimestamp, trackNumber, clusterPosition, blockNumber) {
    return element(ID.CuePoint, [
      element(ID.CueTime, number(relativeTimestamp)),
      element(ID.CueTrackPositions, [
        element(ID.CueTrack, number(trackNumber)),
        element(ID.CueClusterPosition, number(clusterPosition)),
        element(ID.CueBlockNumber, number(blockNumber))
      ])
    ]);
  }
  createCues(cuePoints) {
    return build(element(ID.Cues, cuePoints));
  }
  createCluster(timecode) {
    return build(
      unknownSizeElement(ID.Cluster, [
        element(ID.Timecode, number(timecode))
      ])
    );
  }
  createSimpleBlock(frame, isKeyframe, trackNumber, relativeTimestamp) {
    const elementId = Buffer.from([163]);
    if (this.encryptionKey) {
      const singleByte = new BitWriter2(8).set(0).set(0, 5).set(0).set(1);
      const iv = Buffer.alloc(16);
      const ivCounter = this.trackIvs[trackNumber];
      iv.writeUInt32BE(ivCounter[0], 0);
      iv.writeUInt32BE(ivCounter[1], 4);
      ivCounter[1]++;
      if (ivCounter[1] === 0) {
        ivCounter[0]++;
      }
      const cipher = createCipheriv("AES-128-CTR", this.encryptionKey, iv);
      frame = Buffer.concat([
        singleByte.buffer,
        iv.subarray(0, 8),
        cipher.update(frame),
        cipher.final()
      ]);
    }
    const contentSize = vintEncodedNumber(
      1 + 2 + 1 + frame.length
    ).bytes;
    const keyframe = isKeyframe ? 1 : 0;
    const flags = new BitWriter2(8).set(keyframe).set(0, 3).set(0).set(0, 2).set(0);
    const simpleBlock = Buffer.concat([
      elementId,
      contentSize,
      vintEncodedNumber(trackNumber).bytes,
      new BufferChain(2).writeInt16BE(relativeTimestamp).buffer,
      new BufferChain(1).writeUInt8(flags.value).buffer,
      frame
    ]);
    return simpleBlock;
  }
};
var containerSupportedCodecs = [
  "MPEG4/ISO/AVC",
  "VP8",
  "VP9",
  "AV1",
  "OPUS"
];
var millisecond = 1e6;

// ../rtp/src/srtp/const.ts
var ProtectionProfileAes128CmHmacSha1_80 = 1;
var ProtectionProfileAeadAes128Gcm = 7;
var Profiles = [
  ProtectionProfileAes128CmHmacSha1_80,
  ProtectionProfileAeadAes128Gcm
];
var keyLength = (profile) => {
  switch (profile) {
    case ProtectionProfileAes128CmHmacSha1_80:
    case ProtectionProfileAeadAes128Gcm:
      return 16;
  }
};
var saltLength = (profile) => {
  switch (profile) {
    case ProtectionProfileAes128CmHmacSha1_80:
      return 14;
    case ProtectionProfileAeadAes128Gcm:
      return 12;
  }
};

// ../rtp/src/helper.ts
function enumerate(arr) {
  return arr.map((v, i) => [i, v]);
}
function growBufferSize(buf, size) {
  const glow = Buffer.alloc(size);
  buf.copy(glow);
  return glow;
}
function Int(v) {
  return Number.parseInt(v.toString(), 10);
}
var timer = {
  setTimeout: (...args) => {
    const id = setTimeout(...args);
    return () => clearTimeout(id);
  },
  setInterval: (...args) => {
    const id = setInterval(
      () => {
        args[0]();
      },
      ...args.slice(1)
    );
    return () => clearInterval(id);
  }
};
function isMedia(buf) {
  const firstByte = buf[0];
  return firstByte > 127 && firstByte < 192;
}

// ../rtp/src/rtcp/header.ts
var RTCP_HEADER_SIZE = 4;
var RtcpHeader = class _RtcpHeader {
  version = 2;
  padding = false;
  count = 0;
  type = 0;
  /**このパケットの長さは、ヘッダーと任意のパディングを含む32ビットワードから 1を引いたものである */
  length = 0;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  serialize() {
    const v_p_rc = new BitWriter(8);
    v_p_rc.set(2, 0, this.version);
    if (this.padding) v_p_rc.set(1, 2, 1);
    v_p_rc.set(5, 3, this.count);
    const buf = bufferWriter([1, 1, 2], [v_p_rc.value, this.type, this.length]);
    return buf;
  }
  static deSerialize(buf) {
    const [v_p_rc, type, length] = bufferReader(buf, [1, 1, 2]);
    const version = getBit(v_p_rc, 0, 2);
    const padding = getBit(v_p_rc, 2, 1) > 0;
    const count = getBit(v_p_rc, 3, 5);
    return new _RtcpHeader({ version, padding, count, type, length });
  }
};

// ../rtp/src/rtcp/rr.ts
var RtcpRrPacket = class _RtcpRrPacket {
  ssrc = 0;
  reports = [];
  static type = 201;
  type = _RtcpRrPacket.type;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  serialize() {
    let payload = bufferWriter([4], [this.ssrc]);
    payload = Buffer.concat([
      payload,
      ...this.reports.map((report) => report.serialize())
    ]);
    return RtcpPacketConverter.serialize(
      _RtcpRrPacket.type,
      this.reports.length,
      payload,
      Math.floor(payload.length / 4)
    );
  }
  static deSerialize(data, count) {
    const [ssrc] = bufferReader(data, [4]);
    let pos = 4;
    const reports = [];
    for (let _ = 0; _ < count; _++) {
      reports.push(RtcpReceiverInfo.deSerialize(data.slice(pos, pos + 24)));
      pos += 24;
    }
    return new _RtcpRrPacket({ ssrc, reports });
  }
};
var RtcpReceiverInfo = class _RtcpReceiverInfo {
  ssrc;
  fractionLost;
  packetsLost;
  highestSequence;
  jitter;
  /**last SR */
  lsr;
  /**delay since last SR */
  dlsr;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  toJSON() {
    return {
      ssrc: this.ssrc,
      fractionLost: this.fractionLost,
      packetsLost: this.packetsLost,
      highestSequence: this.highestSequence,
      jitter: this.jitter,
      lsr: this.lsr,
      dlsr: this.dlsr
    };
  }
  serialize() {
    return bufferWriter(
      [4, 1, 3, 4, 4, 4, 4],
      [
        this.ssrc,
        this.fractionLost,
        this.packetsLost,
        this.highestSequence,
        this.jitter,
        this.lsr,
        this.dlsr
      ]
    );
  }
  static deSerialize(data) {
    const [
      ssrc,
      fractionLost,
      packetsLost,
      highestSequence,
      jitter,
      lsr,
      dlsr
    ] = bufferReader(data, [4, 1, 3, 4, 4, 4, 4]);
    return new _RtcpReceiverInfo({
      ssrc,
      fractionLost,
      packetsLost,
      highestSequence,
      jitter,
      lsr,
      dlsr
    });
  }
};

// ../rtp/src/rtcp/rtpfb/nack.ts
var GenericNack = class _GenericNack {
  static count = 1;
  count = _GenericNack.count;
  header;
  senderSsrc;
  mediaSourceSsrc;
  lost = [];
  toJSON() {
    return {
      lost: this.lost,
      senderSsrc: this.senderSsrc,
      mediaSourceSsrc: this.mediaSourceSsrc
    };
  }
  constructor(props = {}) {
    Object.assign(this, props);
    if (!this.header) {
      this.header = new RtcpHeader({
        type: RtcpTransportLayerFeedback.type,
        count: this.count,
        version: 2
      });
    }
  }
  static deSerialize(data, header) {
    const [senderSsrc, mediaSourceSsrc] = bufferReader(data, [4, 4]);
    const lost = [];
    for (let pos = 8; pos < data.length; pos += 4) {
      const [pid, blp] = bufferReader(data.subarray(pos), [2, 2]);
      lost.push(pid);
      for (let diff = 0; diff < 16; diff++) {
        if (blp >> diff & 1) {
          lost.push(pid + diff + 1);
        }
      }
    }
    return new _GenericNack({
      header,
      senderSsrc,
      mediaSourceSsrc,
      lost
    });
  }
  serialize() {
    const ssrcPair = bufferWriter(
      [4, 4],
      [this.senderSsrc, this.mediaSourceSsrc]
    );
    const fci = [];
    if (this.lost.length > 0) {
      let headPid = this.lost[0], blp = 0;
      this.lost.slice(1).forEach((pid) => {
        const diff = pid - headPid - 1;
        if (diff >= 0 && diff < 16) {
          blp |= 1 << diff;
        } else {
          fci.push(bufferWriter([2, 2], [headPid, blp]));
          headPid = pid;
          blp = 0;
        }
      });
      fci.push(bufferWriter([2, 2], [headPid, blp]));
    }
    const buf = Buffer.concat([ssrcPair, Buffer.concat(fci)]);
    this.header.length = buf.length / 4;
    return Buffer.concat([this.header.serialize(), buf]);
  }
};

// ../rtp/src/rtcp/rtpfb/twcc.ts
var log3 = debug("werift/rtp/rtcp/rtpfb/twcc");
var TransportWideCC = class _TransportWideCC {
  static count = 15;
  count = _TransportWideCC.count;
  length = 2;
  senderSsrc;
  mediaSourceSsrc;
  baseSequenceNumber;
  packetStatusCount;
  /** 24bit multiples of 64ms */
  referenceTime;
  fbPktCount;
  packetChunks = [];
  recvDeltas = [];
  header;
  constructor(props = {}) {
    Object.assign(this, props);
    if (!this.header) {
      this.header = new RtcpHeader({
        type: 205,
        count: this.count,
        version: 2
      });
    }
  }
  static deSerialize(data, header) {
    const [
      senderSsrc,
      mediaSsrc,
      baseSequenceNumber,
      packetStatusCount,
      referenceTime,
      fbPktCount
    ] = bufferReader(data, [4, 4, 2, 2, 3, 1]);
    const packetChunks = [];
    const recvDeltas = [];
    let packetStatusPos = 16;
    for (let processedPacketNum = 0; processedPacketNum < packetStatusCount; ) {
      const type = getBit(
        data.slice(packetStatusPos, packetStatusPos + 1)[0],
        0,
        1
      );
      let iPacketStatus;
      switch (type) {
        case 0 /* TypeTCCRunLengthChunk */:
          {
            const packetStatus = RunLengthChunk.deSerialize(
              data.slice(packetStatusPos, packetStatusPos + 2)
            );
            iPacketStatus = packetStatus;
            const packetNumberToProcess = Math.min(
              packetStatusCount - processedPacketNum,
              packetStatus.runLength
            );
            if (packetStatus.packetStatus === 1 /* TypeTCCPacketReceivedSmallDelta */ || packetStatus.packetStatus === 2 /* TypeTCCPacketReceivedLargeDelta */) {
              for (let _ = 0; _ < packetNumberToProcess; _++) {
                recvDeltas.push(
                  new RecvDelta({ type: packetStatus.packetStatus })
                );
              }
            }
            processedPacketNum += packetNumberToProcess;
          }
          break;
        case 1 /* TypeTCCStatusVectorChunk */:
          {
            const packetStatus = StatusVectorChunk.deSerialize(
              data.slice(packetStatusPos, packetStatusPos + 2)
            );
            iPacketStatus = packetStatus;
            if (packetStatus.symbolSize === 0) {
              packetStatus.symbolList.forEach((v) => {
                if (v === 1 /* TypeTCCPacketReceivedSmallDelta */) {
                  recvDeltas.push(
                    new RecvDelta({
                      type: 1 /* TypeTCCPacketReceivedSmallDelta */
                    })
                  );
                }
              });
            }
            if (packetStatus.symbolSize === 1) {
              packetStatus.symbolList.forEach((v) => {
                if (v === 1 /* TypeTCCPacketReceivedSmallDelta */ || v === 2 /* TypeTCCPacketReceivedLargeDelta */) {
                  recvDeltas.push(
                    new RecvDelta({
                      type: v
                    })
                  );
                }
              });
            }
            processedPacketNum += packetStatus.symbolList.length;
          }
          break;
      }
      if (!iPacketStatus) throw new Error();
      packetStatusPos += 2;
      packetChunks.push(iPacketStatus);
    }
    let recvDeltaPos = packetStatusPos;
    recvDeltas.forEach((delta) => {
      if (delta.type === 1 /* TypeTCCPacketReceivedSmallDelta */) {
        delta.deSerialize(data.slice(recvDeltaPos, recvDeltaPos + 1));
        recvDeltaPos++;
      }
      if (delta.type === 2 /* TypeTCCPacketReceivedLargeDelta */) {
        delta.deSerialize(data.slice(recvDeltaPos, recvDeltaPos + 2));
        recvDeltaPos += 2;
      }
    });
    return new _TransportWideCC({
      senderSsrc,
      mediaSourceSsrc: mediaSsrc,
      baseSequenceNumber,
      packetStatusCount,
      referenceTime,
      fbPktCount,
      recvDeltas,
      packetChunks,
      header
    });
  }
  serialize() {
    const constBuf = bufferWriter(
      [4, 4, 2, 2, 3, 1],
      [
        this.senderSsrc,
        this.mediaSourceSsrc,
        this.baseSequenceNumber,
        this.packetStatusCount,
        this.referenceTime,
        this.fbPktCount
      ]
    );
    const chunks = Buffer.concat(
      this.packetChunks.map((chunk) => chunk.serialize())
    );
    const deltas = Buffer.concat(
      this.recvDeltas.map((delta) => {
        try {
          return delta.serialize();
        } catch (error) {
          log3(error?.message);
          return void 0;
        }
      }).filter((v) => v)
    );
    const buf = Buffer.concat([constBuf, chunks, deltas]);
    if (this.header.padding && buf.length % 4 !== 0) {
      const rest = 4 - buf.length % 4;
      const padding = Buffer.alloc(rest);
      padding[padding.length - 1] = padding.length;
      this.header.length = Math.floor((buf.length + padding.length) / 4);
      return Buffer.concat([this.header.serialize(), buf, padding]);
    }
    this.header.length = Math.floor(buf.length / 4);
    return Buffer.concat([this.header.serialize(), buf]);
  }
  get packetResults() {
    const currentSequenceNumber = this.baseSequenceNumber - 1;
    const results = this.packetChunks.filter((v) => v instanceof RunLengthChunk).flatMap(
      (chunk) => chunk.results(currentSequenceNumber)
    );
    let deltaIdx = 0;
    const referenceTime = BigInt(this.referenceTime) * 64n;
    let currentReceivedAtMs = referenceTime;
    for (const result of results) {
      const recvDelta = this.recvDeltas[deltaIdx];
      if (!result.received || !recvDelta) {
        continue;
      }
      currentReceivedAtMs += BigInt(recvDelta.delta) / 1000n;
      result.delta = recvDelta.delta;
      result.receivedAtMs = Number(currentReceivedAtMs);
      deltaIdx++;
    }
    return results;
  }
};
var RunLengthChunk = class _RunLengthChunk {
  type;
  packetStatus;
  /** 13bit */
  runLength;
  constructor(props = {}) {
    Object.assign(this, props);
    this.type = 0 /* TypeTCCRunLengthChunk */;
  }
  static deSerialize(data) {
    const packetStatus = getBit(data[0], 1, 2);
    const runLength = (getBit(data[0], 3, 5) << 8) + data[1];
    return new _RunLengthChunk({ type: 0, packetStatus, runLength });
  }
  serialize() {
    const buf = new BitWriter2(16).set(0).set(this.packetStatus, 2).set(this.runLength, 13).buffer;
    return buf;
  }
  results(currentSequenceNumber) {
    const received = this.packetStatus === 1 /* TypeTCCPacketReceivedSmallDelta */ || this.packetStatus === 2 /* TypeTCCPacketReceivedLargeDelta */;
    const results = [];
    for (let i = 0; i <= this.runLength; ++i) {
      results.push(
        new PacketResult({ sequenceNumber: ++currentSequenceNumber, received })
      );
    }
    return results;
  }
};
var StatusVectorChunk = class _StatusVectorChunk {
  type;
  symbolSize;
  symbolList = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static deSerialize(data) {
    const type = 1 /* TypeTCCStatusVectorChunk */;
    let symbolSize = getBit(data[0], 1, 1);
    const symbolList = [];
    function range6(n, cb) {
      for (let i = 0; i < n; i++) {
        cb(i);
      }
    }
    switch (symbolSize) {
      case 0:
        range6(6, (i) => symbolList.push(getBit(data[0], 2 + i, 1)));
        range6(8, (i) => symbolList.push(getBit(data[1], i, 1)));
        break;
      case 1:
        range6(3, (i) => symbolList.push(getBit(data[0], 2 + i * 2, 2)));
        range6(4, (i) => symbolList.push(getBit(data[1], i * 2, 2)));
        break;
      default:
        symbolSize = (getBit(data[0], 2, 6) << 8) + data[1];
    }
    return new _StatusVectorChunk({ type, symbolSize, symbolList });
  }
  serialize() {
    const buf = Buffer.alloc(2);
    const writer = new BitWriter2(16).set(1).set(this.symbolSize);
    const bits = this.symbolSize === 0 ? 1 : 2;
    this.symbolList.forEach((v) => {
      writer.set(v, bits);
    });
    buf.writeUInt16BE(writer.value);
    return buf;
  }
};
var RecvDelta = class _RecvDelta {
  /**optional (If undefined, it will be set automatically.)*/
  type;
  /**micro sec */
  delta;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static deSerialize(data) {
    let type;
    let delta;
    if (data.length === 1) {
      type = 1 /* TypeTCCPacketReceivedSmallDelta */;
      delta = 250 * data[0];
    } else if (data.length === 2) {
      type = 2 /* TypeTCCPacketReceivedLargeDelta */;
      delta = 250 * data.readInt16BE();
    }
    if (type === void 0 || delta === void 0) throw new Error();
    return new _RecvDelta({ type, delta });
  }
  deSerialize(data) {
    const res = _RecvDelta.deSerialize(data);
    this.delta = res.delta;
  }
  parsed = false;
  // todo refactor
  parseDelta() {
    this.delta = Math.floor(this.delta / 250);
    if (this.delta < 0 || this.delta > 255) {
      if (this.delta > 32767) this.delta = 32767;
      if (this.delta < -32768) this.delta = -32768;
      if (!this.type) this.type = 2 /* TypeTCCPacketReceivedLargeDelta */;
    } else {
      if (!this.type) this.type = 1 /* TypeTCCPacketReceivedSmallDelta */;
    }
    this.parsed = true;
  }
  serialize() {
    if (!this.parsed) this.parseDelta();
    if (this.type === 1 /* TypeTCCPacketReceivedSmallDelta */) {
      const buf = Buffer.alloc(1);
      buf.writeUInt8(this.delta);
      return buf;
    } else if (this.type === 2 /* TypeTCCPacketReceivedLargeDelta */) {
      const buf = Buffer.alloc(2);
      buf.writeInt16BE(this.delta);
      return buf;
    }
    throw new Error("errDeltaExceedLimit " + this.delta + " " + this.type);
  }
};
var PacketChunk = /* @__PURE__ */ ((PacketChunk2) => {
  PacketChunk2[PacketChunk2["TypeTCCRunLengthChunk"] = 0] = "TypeTCCRunLengthChunk";
  PacketChunk2[PacketChunk2["TypeTCCStatusVectorChunk"] = 1] = "TypeTCCStatusVectorChunk";
  PacketChunk2[PacketChunk2["packetStatusChunkLength"] = 2] = "packetStatusChunkLength";
  return PacketChunk2;
})(PacketChunk || {});
var PacketStatus = /* @__PURE__ */ ((PacketStatus2) => {
  PacketStatus2[PacketStatus2["TypeTCCPacketNotReceived"] = 0] = "TypeTCCPacketNotReceived";
  PacketStatus2[PacketStatus2["TypeTCCPacketReceivedSmallDelta"] = 1] = "TypeTCCPacketReceivedSmallDelta";
  PacketStatus2[PacketStatus2["TypeTCCPacketReceivedLargeDelta"] = 2] = "TypeTCCPacketReceivedLargeDelta";
  PacketStatus2[PacketStatus2["TypeTCCPacketReceivedWithoutDelta"] = 3] = "TypeTCCPacketReceivedWithoutDelta";
  return PacketStatus2;
})(PacketStatus || {});
var PacketResult = class {
  sequenceNumber = 0;
  delta = 0;
  received = false;
  receivedAtMs = 0;
  constructor(props) {
    Object.assign(this, props);
  }
};

// ../rtp/src/rtcp/rtpfb/index.ts
var log4 = debug("werift-rtp:packages/rtp/rtcp/rtpfb/index");
var RtcpTransportLayerFeedback = class _RtcpTransportLayerFeedback {
  static type = 205;
  type = _RtcpTransportLayerFeedback.type;
  feedback;
  header;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  serialize() {
    const payload = this.feedback.serialize();
    return payload;
  }
  static deSerialize(data, header) {
    let feedback;
    switch (header.count) {
      case GenericNack.count:
        feedback = GenericNack.deSerialize(data, header);
        break;
      case TransportWideCC.count:
        feedback = TransportWideCC.deSerialize(data, header);
        break;
      default:
        log4("unknown rtpfb packet", header.count);
        break;
    }
    return new _RtcpTransportLayerFeedback({ feedback, header });
  }
};

// ../rtp/src/rtcp/sdes.ts
var RtcpSourceDescriptionPacket = class _RtcpSourceDescriptionPacket {
  static type = 202;
  type = _RtcpSourceDescriptionPacket.type;
  chunks = [];
  constructor(props) {
    Object.assign(this, props);
  }
  get length() {
    let length = 0;
    this.chunks.forEach((chunk) => length += chunk.length);
    return length;
  }
  serialize() {
    let payload = Buffer.concat(this.chunks.map((chunk) => chunk.serialize()));
    while (payload.length % 4)
      payload = Buffer.concat([payload, Buffer.from([0])]);
    return RtcpPacketConverter.serialize(
      this.type,
      this.chunks.length,
      payload,
      payload.length / 4
    );
  }
  static deSerialize(payload, header) {
    const chunks = [];
    for (let i = 0; i < payload.length; ) {
      const chunk = SourceDescriptionChunk.deSerialize(payload.slice(i));
      chunks.push(chunk);
      i += chunk.length;
    }
    return new _RtcpSourceDescriptionPacket({ chunks });
  }
};
var SourceDescriptionChunk = class _SourceDescriptionChunk {
  source;
  items = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  get length() {
    let length = 4;
    this.items.forEach((item) => length += item.length);
    length += 1;
    length += getPadding(length);
    return length;
  }
  serialize() {
    const data = Buffer.concat([
      bufferWriter([4], [this.source]),
      Buffer.concat(this.items.map((item) => item.serialize()))
    ]);
    const res = Buffer.concat([data, Buffer.alloc(getPadding(data.length))]);
    return res;
  }
  static deSerialize(data) {
    const source = data.readUInt32BE();
    const items = [];
    for (let i = 4; i < data.length; ) {
      const type = data[i];
      if (type === 0) break;
      const item = SourceDescriptionItem.deSerialize(data.slice(i));
      items.push(item);
      i += item.length;
    }
    return new _SourceDescriptionChunk({ source, items });
  }
};
var SourceDescriptionItem = class _SourceDescriptionItem {
  type;
  text;
  constructor(props) {
    Object.assign(this, props);
  }
  get length() {
    return 1 + 1 + Buffer.from(this.text).length;
  }
  serialize() {
    const text = Buffer.from(this.text);
    return Buffer.concat([
      bufferWriter([1, 1], [this.type, text.length]),
      text
    ]);
  }
  static deSerialize(data) {
    const type = data[0];
    const octetCount = data[1];
    const text = data.slice(2, 2 + octetCount).toString();
    return new _SourceDescriptionItem({ type, text });
  }
};
function getPadding(len) {
  if (len % 4 == 0) {
    return 0;
  }
  return 4 - len % 4;
}

// ../rtp/src/rtcp/sr.ts
var RtcpSrPacket = class _RtcpSrPacket {
  ssrc = 0;
  senderInfo;
  reports = [];
  static type = 200;
  type = _RtcpSrPacket.type;
  constructor(props) {
    Object.assign(this, props);
  }
  toJSON() {
    return {
      ssrc: this.ssrc,
      senderInfo: this.senderInfo.toJSON(),
      reports: this.reports.map((r) => r.toJSON())
    };
  }
  serialize() {
    let payload = Buffer.alloc(4);
    payload.writeUInt32BE(this.ssrc);
    payload = Buffer.concat([payload, this.senderInfo.serialize()]);
    payload = Buffer.concat([
      payload,
      ...this.reports.map((report) => report.serialize())
    ]);
    return RtcpPacketConverter.serialize(
      _RtcpSrPacket.type,
      this.reports.length,
      payload,
      Math.floor(payload.length / 4)
    );
  }
  static deSerialize(payload, count) {
    const ssrc = payload.readUInt32BE();
    const senderInfo = RtcpSenderInfo.deSerialize(payload.subarray(4, 24));
    let pos = 24;
    const reports = [];
    for (let _ = 0; _ < count; _++) {
      reports.push(
        RtcpReceiverInfo.deSerialize(payload.subarray(pos, pos + 24))
      );
      pos += 24;
    }
    const packet = new _RtcpSrPacket({ ssrc, senderInfo, reports });
    return packet;
  }
};
var RtcpSenderInfo = class _RtcpSenderInfo {
  ntpTimestamp;
  rtpTimestamp;
  packetCount;
  octetCount;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  toJSON() {
    return {
      ntpTimestamp: ntpTime2Sec(this.ntpTimestamp),
      rtpTimestamp: this.rtpTimestamp
    };
  }
  serialize() {
    return bufferWriter(
      [8, 4, 4, 4],
      [this.ntpTimestamp, this.rtpTimestamp, this.packetCount, this.octetCount]
    );
  }
  static deSerialize(data) {
    const [ntpTimestamp, rtpTimestamp, packetCount, octetCount] = bufferReader(
      data,
      [8, 4, 4, 4]
    );
    return new _RtcpSenderInfo({
      ntpTimestamp,
      rtpTimestamp,
      packetCount,
      octetCount
    });
  }
};
var ntpTime2Sec = (ntp) => {
  const [ntpSec, ntpMsec] = bufferReader(bufferWriter([8], [ntp]), [4, 4]);
  return Number(`${ntpSec}.${ntpMsec}`);
};

// ../rtp/src/rtcp/rtcp.ts
var log5 = debug("werift-rtp:packages/rtp/src/rtcp/rtcp.ts");
var RtcpPacketConverter = class {
  static serialize(type, count, payload, length) {
    const header = new RtcpHeader({
      type,
      count,
      version: 2,
      length
    });
    const buf = header.serialize();
    return Buffer.concat([buf, payload]);
  }
  static deSerialize(data) {
    let pos = 0;
    const packets = [];
    while (pos < data.length) {
      const header = RtcpHeader.deSerialize(
        data.subarray(pos, pos + RTCP_HEADER_SIZE)
      );
      pos += RTCP_HEADER_SIZE;
      let payload = data.subarray(pos);
      pos += header.length * 4;
      if (header.padding) {
        payload = payload.subarray(0, payload.length - payload.subarray(-1)[0]);
      }
      try {
        switch (header.type) {
          case RtcpSrPacket.type:
            packets.push(RtcpSrPacket.deSerialize(payload, header.count));
            break;
          case RtcpRrPacket.type:
            packets.push(RtcpRrPacket.deSerialize(payload, header.count));
            break;
          case RtcpSourceDescriptionPacket.type:
            packets.push(
              RtcpSourceDescriptionPacket.deSerialize(payload, header)
            );
            break;
          case RtcpTransportLayerFeedback.type:
            packets.push(
              RtcpTransportLayerFeedback.deSerialize(payload, header)
            );
            break;
          case RtcpPayloadSpecificFeedback.type:
            packets.push(
              RtcpPayloadSpecificFeedback.deSerialize(payload, header)
            );
            break;
          default:
            break;
        }
      } catch (error) {
        log5("deSerialize RTCP", error);
      }
    }
    return packets;
  }
};
function isRtcp(buf) {
  return buf.length >= 2 && buf[1] >= 192 && buf[1] <= 208;
}

// ../rtp/src/rtcp/psfb/fullIntraRequest.ts
var FullIntraRequest = class _FullIntraRequest {
  static count = 4;
  count = _FullIntraRequest.count;
  senderSsrc;
  mediaSsrc;
  fir = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  get length() {
    return Math.floor(this.serialize().length / 4 - 1);
  }
  static deSerialize(data) {
    const [senderSsrc, mediaSsrc] = bufferReader(data, [4, 4]);
    const fir = [];
    for (let i = 8; i < data.length; i += 8) {
      fir.push({ ssrc: data.readUInt32BE(i), sequenceNumber: data[i + 4] });
    }
    return new _FullIntraRequest({ senderSsrc, mediaSsrc, fir });
  }
  serialize() {
    const ssrcs = bufferWriter([4, 4], [this.senderSsrc, this.mediaSsrc]);
    const fir = Buffer.alloc(this.fir.length * 8);
    this.fir.forEach(({ ssrc, sequenceNumber }, i) => {
      fir.writeUInt32BE(ssrc, i * 8);
      fir[i * 8 + 4] = sequenceNumber;
    });
    return Buffer.concat([ssrcs, fir]);
  }
};

// ../rtp/src/rtcp/psfb/pictureLossIndication.ts
var PictureLossIndication = class _PictureLossIndication {
  static count = 1;
  count = _PictureLossIndication.count;
  length = 2;
  senderSsrc;
  mediaSsrc;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static deSerialize(data) {
    const [senderSsrc, mediaSsrc] = bufferReader(data, [4, 4]);
    return new _PictureLossIndication({ senderSsrc, mediaSsrc });
  }
  serialize() {
    return bufferWriter([4, 4], [this.senderSsrc, this.mediaSsrc]);
  }
};

// ../rtp/src/rtcp/psfb/remb.ts
var ReceiverEstimatedMaxBitrate = class _ReceiverEstimatedMaxBitrate {
  static count = 15;
  length;
  count = _ReceiverEstimatedMaxBitrate.count;
  senderSsrc;
  mediaSsrc;
  uniqueID = "REMB";
  ssrcNum = 0;
  brExp;
  brMantissa;
  bitrate;
  ssrcFeedbacks = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static deSerialize(data) {
    const [senderSsrc, mediaSsrc, uniqueID, ssrcNum, e_m] = bufferReader(
      data,
      [4, 4, 4, 1, 1]
    );
    const brExp = getBit(e_m, 0, 6);
    const brMantissa = (getBit(e_m, 6, 2) << 16) + (data[14] << 8) + data[15];
    const bitrate = brExp > 46 ? 18446744073709551615n : BigInt(brMantissa) << BigInt(brExp);
    const ssrcFeedbacks = [];
    for (let i = 16; i < data.length; i += 4) {
      const feedback = data.slice(i).readUIntBE(0, 4);
      ssrcFeedbacks.push(feedback);
    }
    return new _ReceiverEstimatedMaxBitrate({
      senderSsrc,
      mediaSsrc,
      uniqueID: bufferWriter([4], [uniqueID]).toString(),
      ssrcNum,
      brExp,
      brMantissa,
      ssrcFeedbacks,
      bitrate
    });
  }
  serialize() {
    const constant = Buffer.concat([
      bufferWriter([4, 4], [this.senderSsrc, this.mediaSsrc]),
      Buffer.from(this.uniqueID),
      bufferWriter([1], [this.ssrcNum])
    ]);
    const writer = new BitWriter(24);
    writer.set(6, 0, this.brExp).set(18, 6, this.brMantissa);
    const feedbacks = Buffer.concat(
      this.ssrcFeedbacks.map((feedback) => bufferWriter([4], [feedback]))
    );
    const buf = Buffer.concat([
      constant,
      bufferWriter([3], [writer.value]),
      feedbacks
    ]);
    this.length = buf.length / 4;
    return buf;
  }
};

// ../rtp/src/rtcp/psfb/index.ts
var log6 = debug("werift-rtp: /rtcp/psfb/index");
var RtcpPayloadSpecificFeedback = class _RtcpPayloadSpecificFeedback {
  static type = 206;
  type = _RtcpPayloadSpecificFeedback.type;
  feedback;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  serialize() {
    const payload = this.feedback.serialize();
    return RtcpPacketConverter.serialize(
      this.type,
      this.feedback.count,
      payload,
      this.feedback.length
    );
  }
  static deSerialize(data, header) {
    let feedback;
    switch (header.count) {
      case FullIntraRequest.count:
        feedback = FullIntraRequest.deSerialize(data);
        break;
      case PictureLossIndication.count:
        feedback = PictureLossIndication.deSerialize(data);
        break;
      case ReceiverEstimatedMaxBitrate.count:
        feedback = ReceiverEstimatedMaxBitrate.deSerialize(data);
        break;
      default:
        log6("unknown psfb packet", header.count);
        break;
    }
    return new _RtcpPayloadSpecificFeedback({ feedback });
  }
};

// ../rtp/src/rtp/headerExtension.ts
var RTP_EXTENSION_URI = {
  sdesMid: "urn:ietf:params:rtp-hdrext:sdes:mid",
  sdesRTPStreamID: "urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id",
  repairedRtpStreamId: "urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id",
  transportWideCC: "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01",
  absSendTime: "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time",
  dependencyDescriptor: "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension",
  audioLevelIndication: "urn:ietf:params:rtp-hdrext:ssrc-audio-level",
  videoOrientation: "urn:3gpp:video-orientation"
};
function rtpHeaderExtensionsParser(extensions, extIdUriMap) {
  return extensions.map((extension) => {
    const uri = extIdUriMap[extension.id];
    if (!uri) {
      return { uri: "unknown", value: extension.payload };
    }
    switch (uri) {
      case RTP_EXTENSION_URI.sdesMid:
      case RTP_EXTENSION_URI.sdesRTPStreamID:
      case RTP_EXTENSION_URI.repairedRtpStreamId:
        return { uri, value: deserializeString(extension.payload) };
      case RTP_EXTENSION_URI.transportWideCC:
        return { uri, value: deserializeUint16BE(extension.payload) };
      case RTP_EXTENSION_URI.absSendTime:
        return {
          uri,
          value: deserializeAbsSendTime(extension.payload)
        };
      case RTP_EXTENSION_URI.audioLevelIndication: {
        return {
          uri,
          value: deserializeAudioLevelIndication(extension.payload)
        };
      }
      case RTP_EXTENSION_URI.videoOrientation:
        return { uri, value: deserializeVideoOrientation(extension.payload) };
      default:
        return { uri, value: extension.payload };
    }
  }).reduce((acc, cur) => {
    if (cur) acc[cur.uri] = cur.value;
    return acc;
  }, {});
}
function serializeSdesMid(id) {
  return Buffer.from(id);
}
function serializeSdesRTPStreamID(id) {
  return Buffer.from(id);
}
function serializeRepairedRtpStreamId(id) {
  return Buffer.from(id);
}
function serializeTransportWideCC(transportSequenceNumber) {
  return bufferWriter([2], [transportSequenceNumber]);
}
function serializeAbsSendTime(ntpTime2) {
  const buf = Buffer.alloc(3);
  const time = ntpTime2 >> 14n & 0x00ffffffn;
  buf.writeUIntBE(Number(time), 0, 3);
  return buf;
}
function serializeAudioLevelIndication(level) {
  const stream = new BitStream(Buffer.alloc(1));
  stream.writeBits(1, 1);
  stream.writeBits(7, level);
  return stream.uint8Array;
}
function deserializeString(buf) {
  return buf.toString();
}
function deserializeUint16BE(buf) {
  return buf.readUInt16BE();
}
function deserializeAbsSendTime(buf) {
  return bufferReader(buf, [3])[0];
}
function deserializeAudioLevelIndication(buf) {
  const stream = new BitStream(buf);
  const value = {
    v: stream.readBits(1) === 1,
    level: stream.readBits(7)
  };
  return value;
}
function deserializeVideoOrientation(payload) {
  const stream = new BitStream(payload);
  stream.readBits(4);
  const value = {
    c: stream.readBits(1),
    f: stream.readBits(1),
    r1: stream.readBits(1),
    r0: stream.readBits(1)
  };
  return value;
}

// ../rtp/src/rtp/red/packet.ts
var log7 = debug("packages/rtp/src/rtp/red/packet.ts");
var Red = class _Red {
  header;
  blocks = [];
  static deSerialize(bufferOrArrayBuffer) {
    const buf = bufferOrArrayBuffer instanceof ArrayBuffer ? Buffer.from(bufferOrArrayBuffer) : bufferOrArrayBuffer;
    const red = new _Red();
    let offset = 0;
    [red.header, offset] = RedHeader.deSerialize(buf);
    red.header.fields.forEach(({ blockLength, timestampOffset: timestampOffset2, blockPT }) => {
      if (blockLength && timestampOffset2) {
        const block = buf.subarray(offset, offset + blockLength);
        red.blocks.push({ block, blockPT, timestampOffset: timestampOffset2 });
        offset += blockLength;
      } else {
        const block = buf.subarray(offset);
        red.blocks.push({ block, blockPT });
      }
    });
    return red;
  }
  serialize() {
    this.header = new RedHeader();
    for (const { timestampOffset: timestampOffset2, blockPT, block } of this.blocks) {
      if (timestampOffset2) {
        this.header.fields.push({
          fBit: 1,
          blockPT,
          blockLength: block.length,
          timestampOffset: timestampOffset2
        });
      } else {
        this.header.fields.push({ fBit: 0, blockPT });
      }
    }
    let buf = this.header.serialize();
    for (const { block } of this.blocks) {
      buf = Buffer.concat([buf, block]);
    }
    return buf;
  }
};
var RedHeader = class _RedHeader {
  fields = [];
  static deSerialize(buf) {
    let offset = 0;
    const header = new _RedHeader();
    for (; ; ) {
      const field = {};
      header.fields.push(field);
      const bitStream = new BitStream(buf.subarray(offset));
      field.fBit = bitStream.readBits(1);
      field.blockPT = bitStream.readBits(7);
      offset++;
      if (field.fBit === 0) {
        break;
      }
      field.timestampOffset = bitStream.readBits(14);
      field.blockLength = bitStream.readBits(10);
      offset += 3;
    }
    return [header, offset];
  }
  serialize() {
    let buf = Buffer.alloc(0);
    for (const field of this.fields) {
      try {
        if (field.timestampOffset && field.blockLength) {
          const bitStream = new BitStream(Buffer.alloc(4)).writeBits(1, field.fBit).writeBits(7, field.blockPT).writeBits(14, field.timestampOffset).writeBits(10, field.blockLength);
          buf = Buffer.concat([buf, bitStream.uint8Array]);
        } else {
          const bitStream = new BitStream(Buffer.alloc(1)).writeBits(1, 0).writeBits(7, field.blockPT);
          buf = Buffer.concat([buf, bitStream.uint8Array]);
        }
      } catch (error) {
        log7(error?.message);
      }
    }
    return buf;
  }
};

// ../rtp/src/rtp/red/encoder.ts
var RedEncoder = class {
  constructor(distance = 1) {
    this.distance = distance;
  }
  cache = [];
  cacheSize = 10;
  push(payload) {
    this.cache.push(payload);
    if (this.cache.length > this.cacheSize) {
      this.cache.shift();
    }
  }
  build() {
    const red = new Red();
    const redundantPayloads = this.cache.slice(-(this.distance + 1));
    const presentPayload = redundantPayloads.pop();
    if (!presentPayload) {
      return red;
    }
    redundantPayloads.forEach((redundant) => {
      const timestampOffset2 = uint32Add(
        presentPayload.timestamp,
        -redundant.timestamp
      );
      if (timestampOffset2 > Max14Uint) {
        return;
      }
      red.blocks.push({
        block: redundant.block,
        blockPT: redundant.blockPT,
        timestampOffset: timestampOffset2
      });
    });
    red.blocks.push({
      block: presentPayload.block,
      blockPT: presentPayload.blockPT
    });
    return red;
  }
};
var Max14Uint = (1 << 14) - 1;

// ../rtp/src/rtp/red/handler.ts
var RedHandler = class {
  size = 150;
  sequenceNumbers = [];
  push(red, base) {
    const packets = [];
    red.blocks.forEach(({ blockPT, timestampOffset: timestampOffset2, block }, i) => {
      const sequenceNumber = uint16Add(
        base.header.sequenceNumber,
        -(red.blocks.length - (i + 1))
      );
      if (timestampOffset2) {
        packets.push(
          new RtpPacket(
            new RtpHeader({
              timestamp: uint32Add(base.header.timestamp, -timestampOffset2),
              payloadType: blockPT,
              ssrc: base.header.ssrc,
              sequenceNumber,
              marker: true
            }),
            block
          )
        );
      } else {
        packets.push(
          new RtpPacket(
            new RtpHeader({
              timestamp: base.header.timestamp,
              payloadType: blockPT,
              ssrc: base.header.ssrc,
              sequenceNumber,
              marker: true
            }),
            block
          )
        );
      }
    });
    const filtered = packets.filter((p) => {
      if (this.sequenceNumbers.includes(p.header.sequenceNumber)) {
        return false;
      } else {
        if (this.sequenceNumbers.length > this.size) {
          this.sequenceNumbers.shift();
        }
        this.sequenceNumbers.push(p.header.sequenceNumber);
        return true;
      }
    });
    return filtered;
  }
};

// ../rtp/src/rtp/rtp.ts
var ExtensionProfiles = {
  OneByte: 48862,
  // 48862
  TwoByte: 4096
  // 4096
};
var seqNumOffset = 2;
var timestampOffset = 4;
var ssrcOffset = 8;
var csrcOffset = 12;
var csrcSize = 4;
var RtpHeader = class _RtpHeader {
  version = 2;
  padding = false;
  paddingSize = 0;
  extension = false;
  marker = false;
  payloadOffset = 0;
  payloadType = 0;
  /**16bit, 初期値はランダムである必要があります*/
  sequenceNumber = 0;
  /**32bit microsec (milli/1000), 初期値はランダムである必要があります*/
  timestamp = 0;
  ssrc = 0;
  csrcLength = 0;
  csrc = [];
  extensionProfile = ExtensionProfiles.OneByte;
  /**deserialize only */
  extensionLength;
  extensions = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static deSerialize(rawPacket) {
    const h = new _RtpHeader();
    let currOffset = 0;
    const v_p_x_cc = rawPacket[currOffset++];
    h.version = getBit(v_p_x_cc, 0, 2);
    h.padding = getBit(v_p_x_cc, 2) > 0;
    h.extension = getBit(v_p_x_cc, 3) > 0;
    h.csrcLength = getBit(v_p_x_cc, 4, 4);
    h.csrc = [...Array(h.csrcLength)].map(() => {
      const csrc = rawPacket.readUInt32BE(currOffset);
      currOffset += 4;
      return csrc;
    });
    currOffset += csrcOffset - 1;
    const m_pt = rawPacket[1];
    h.marker = getBit(m_pt, 0) > 0;
    h.payloadType = getBit(m_pt, 1, 7);
    h.sequenceNumber = rawPacket.readUInt16BE(seqNumOffset);
    h.timestamp = rawPacket.readUInt32BE(timestampOffset);
    h.ssrc = rawPacket.readUInt32BE(ssrcOffset);
    for (let i = 0; i < h.csrc.length; i++) {
      const offset = csrcOffset + i * csrcSize;
      h.csrc[i] = rawPacket.subarray(offset).readUInt32BE();
    }
    if (h.extension) {
      h.extensionProfile = rawPacket.subarray(currOffset).readUInt16BE();
      currOffset += 2;
      const extensionLength = rawPacket.subarray(currOffset).readUInt16BE() * 4;
      h.extensionLength = extensionLength;
      currOffset += 2;
      switch (h.extensionProfile) {
        // RFC 8285 RTP One Byte Header Extension
        case ExtensionProfiles.OneByte:
          {
            const end = currOffset + extensionLength;
            while (currOffset < end) {
              if (rawPacket[currOffset] === 0) {
                currOffset++;
                continue;
              }
              const extId = rawPacket[currOffset] >> 4;
              const len = (rawPacket[currOffset] & (rawPacket[currOffset] ^ 240)) + 1;
              currOffset++;
              if (extId === 15) {
                break;
              }
              const extension = {
                id: extId,
                payload: rawPacket.subarray(currOffset, currOffset + len)
              };
              h.extensions = [...h.extensions, extension];
              currOffset += len;
            }
          }
          break;
        // RFC 8285 RTP Two Byte Header Extension
        case ExtensionProfiles.TwoByte:
          {
            const end = currOffset + extensionLength;
            while (currOffset < end) {
              if (rawPacket[currOffset] === 0) {
                currOffset++;
                continue;
              }
              const extId = rawPacket[currOffset];
              currOffset++;
              const len = rawPacket[currOffset];
              currOffset++;
              const extension = {
                id: extId,
                payload: rawPacket.subarray(currOffset, currOffset + len)
              };
              h.extensions = [...h.extensions, extension];
              currOffset += len;
            }
          }
          break;
        default:
          {
            const extension = {
              id: 0,
              payload: rawPacket.subarray(
                currOffset,
                currOffset + extensionLength
              )
            };
            h.extensions = [...h.extensions, extension];
            currOffset += h.extensions[0].payload.length;
          }
          break;
      }
    }
    h.payloadOffset = currOffset;
    if (h.padding) {
      h.paddingSize = rawPacket[rawPacket.length - 1];
    }
    return h;
  }
  get serializeSize() {
    const { csrc, extensionProfile, extensions } = this;
    let size = 12 + csrc.length * csrcSize;
    if (extensions.length > 0 || this.extension === true) {
      let extSize = 4;
      switch (extensionProfile) {
        case ExtensionProfiles.OneByte:
          for (const extension of extensions) {
            extSize += 1 + extension.payload.length;
          }
          break;
        case ExtensionProfiles.TwoByte:
          for (const extension of extensions) {
            extSize += 2 + extension.payload.length;
          }
          break;
        default:
          extSize += extensions[0].payload.length;
      }
      size += Math.floor((extSize + 3) / 4) * 4;
    }
    return size;
  }
  serialize(size) {
    const buf = Buffer.alloc(size);
    let offset = 0;
    const v_p_x_cc = new BitWriter(8);
    v_p_x_cc.set(2, 0, this.version);
    if (this.padding) v_p_x_cc.set(1, 2, 1);
    if (this.extensions.length > 0) this.extension = true;
    if (this.extension) v_p_x_cc.set(1, 3, 1);
    v_p_x_cc.set(4, 4, this.csrc.length);
    buf.writeUInt8(v_p_x_cc.value, offset++);
    const m_pt = new BitWriter(8);
    if (this.marker) m_pt.set(1, 0, 1);
    m_pt.set(7, 1, this.payloadType);
    buf.writeUInt8(m_pt.value, offset++);
    buf.writeUInt16BE(this.sequenceNumber, seqNumOffset);
    offset += 2;
    buf.writeUInt32BE(this.timestamp, timestampOffset);
    offset += 4;
    buf.writeUInt32BE(this.ssrc, ssrcOffset);
    offset += 4;
    for (const csrc of this.csrc) {
      buf.writeUInt32BE(csrc, offset);
      offset += 4;
    }
    if (this.extension) {
      const extHeaderPos = offset;
      buf.writeUInt16BE(this.extensionProfile, offset);
      offset += 4;
      const startExtensionsPos = offset;
      switch (this.extensionProfile) {
        case ExtensionProfiles.OneByte:
          for (const extension of this.extensions) {
            buf.writeUInt8(
              extension.id << 4 | extension.payload.length - 1,
              offset++
            );
            extension.payload.copy(buf, offset);
            offset += extension.payload.length;
          }
          break;
        case ExtensionProfiles.TwoByte:
          for (const extension of this.extensions) {
            buf.writeUInt8(extension.id, offset++);
            buf.writeUInt8(extension.payload.length, offset++);
            extension.payload.copy(buf, offset);
            offset += extension.payload.length;
          }
          break;
        default: {
          const extLen = this.extensions[0].payload.length;
          if (extLen % 4 != 0) {
            throw new Error();
          }
          this.extensions[0].payload.copy(buf, offset);
          offset += extLen;
        }
      }
      const extSize = offset - startExtensionsPos;
      const roundedExtSize = Math.trunc((extSize + 3) / 4) * 4;
      buf.writeUInt16BE(Math.trunc(roundedExtSize / 4), extHeaderPos + 2);
      for (let i = 0; i < roundedExtSize - extSize; i++) {
        buf.writeUInt8(0, offset);
        offset++;
      }
    }
    this.payloadOffset = offset;
    return buf;
  }
};
var RtpPacket = class _RtpPacket {
  constructor(header, payload) {
    this.header = header;
    this.payload = payload;
  }
  get serializeSize() {
    return this.header.serializeSize + this.payload.length;
  }
  clone() {
    return new _RtpPacket(new RtpHeader({ ...this.header }), this.payload);
  }
  serialize() {
    let buf = this.header.serialize(
      this.header.serializeSize + this.payload.length
    );
    const { payloadOffset } = this.header;
    this.payload.copy(buf, payloadOffset);
    if (this.header.padding) {
      const padding = Buffer.alloc(this.header.paddingSize);
      padding.writeUInt8(this.header.paddingSize, this.header.paddingSize - 1);
      buf = Buffer.concat([buf, padding]);
    }
    return buf;
  }
  static deSerialize(buf) {
    const header = RtpHeader.deSerialize(buf);
    const p = new _RtpPacket(
      header,
      buf.subarray(header.payloadOffset, buf.length - header.paddingSize)
    );
    return p;
  }
  clear() {
    this.payload = null;
  }
};

// ../rtp/src/rtp/rtx.ts
import { jspack as jspack2 } from "@shinyoshiaki/jspack";
function unwrapRtx(rtx, payloadType, ssrc) {
  const packet = new RtpPacket(
    new RtpHeader({
      payloadType,
      marker: rtx.header.marker,
      sequenceNumber: jspack2.Unpack("!H", rtx.payload.subarray(0, 2))[0],
      timestamp: rtx.header.timestamp,
      ssrc
    }),
    rtx.payload.subarray(2)
  );
  return packet;
}
function wrapRtx(packet, payloadType, sequenceNumber, ssrc) {
  const rtx = new RtpPacket(
    new RtpHeader({
      payloadType,
      marker: packet.header.marker,
      sequenceNumber,
      timestamp: packet.header.timestamp,
      ssrc,
      csrc: packet.header.csrc,
      extensions: packet.header.extensions
    }),
    Buffer.concat([
      Buffer.from(jspack2.Pack("!H", [packet.header.sequenceNumber])),
      packet.payload
    ])
  );
  return rtx;
}

// ../rtp/src/srtp/context/context.ts
import { createHmac as createHmac2 } from "crypto";
import AES from "aes-js";

// ../rtp/src/srtp/cipher/ctr.ts
import { createCipheriv as createCipheriv2, createDecipheriv, createHmac } from "crypto";

// ../rtp/src/srtp/cipher/index.ts
var CipherAesBase = class {
  constructor(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt) {
    this.srtpSessionKey = srtpSessionKey;
    this.srtpSessionSalt = srtpSessionSalt;
    this.srtcpSessionKey = srtcpSessionKey;
    this.srtcpSessionSalt = srtcpSessionSalt;
  }
  encryptRtp(header, payload, rolloverCounter) {
    return Buffer.from([]);
  }
  decryptRtp(cipherText, rolloverCounter) {
    return [];
  }
  encryptRTCP(rawRtcp, srtcpIndex) {
    return Buffer.from([]);
  }
  decryptRTCP(encrypted) {
    return [];
  }
};

// ../rtp/src/srtp/cipher/ctr.ts
var CipherAesCtr = class extends CipherAesBase {
  constructor(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt, srtpSessionAuthTag, srtcpSessionAuthTag) {
    super(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt);
    this.srtpSessionAuthTag = srtpSessionAuthTag;
    this.srtcpSessionAuthTag = srtcpSessionAuthTag;
  }
  authTagLength = 10;
  encryptRtp(header, payload, rolloverCounter) {
    const headerBuffer = header.serialize(header.serializeSize);
    const counter = this.generateCounter(
      header.sequenceNumber,
      rolloverCounter,
      header.ssrc,
      this.srtpSessionSalt
    );
    const cipher = createCipheriv2("aes-128-ctr", this.srtpSessionKey, counter);
    const enc = cipher.update(payload);
    const authTag = this.generateSrtpAuthTag(
      rolloverCounter,
      headerBuffer,
      enc
    );
    return Buffer.concat([headerBuffer, enc, authTag]);
  }
  decryptRtp(cipherText, rolloverCounter) {
    const header = RtpHeader.deSerialize(cipherText);
    const size = cipherText.length - this.authTagLength;
    cipherText = cipherText.subarray(0, cipherText.length - this.authTagLength);
    const counter = this.generateCounter(
      header.sequenceNumber,
      rolloverCounter,
      header.ssrc,
      this.srtpSessionSalt
    );
    const cipher = createDecipheriv(
      "aes-128-ctr",
      this.srtpSessionKey,
      counter
    );
    const payload = cipherText.subarray(header.payloadOffset);
    const buf = cipher.update(payload);
    const dst = Buffer.concat([
      cipherText.subarray(0, header.payloadOffset),
      buf,
      Buffer.alloc(size - header.payloadOffset - buf.length)
    ]);
    return [dst, header];
  }
  encryptRTCP(rtcpPacket, srtcpIndex) {
    let out = Buffer.from(rtcpPacket);
    const ssrc = out.readUInt32BE(4);
    const counter = this.generateCounter(
      srtcpIndex & 65535,
      srtcpIndex >> 16,
      ssrc,
      this.srtcpSessionSalt
    );
    const cipher = createCipheriv2("aes-128-ctr", this.srtcpSessionKey, counter);
    const buf = cipher.update(out.slice(8));
    buf.copy(out, 8);
    out = Buffer.concat([out, Buffer.alloc(4)]);
    out.writeUInt32BE(srtcpIndex, out.length - 4);
    out[out.length - 4] |= 128;
    const authTag = this.generateSrtcpAuthTag(out);
    out = Buffer.concat([out, authTag]);
    return out;
  }
  decryptRTCP(encrypted) {
    const header = RtcpHeader.deSerialize(encrypted);
    const tailOffset = encrypted.length - (this.authTagLength + srtcpIndexSize);
    const out = Buffer.from(encrypted).slice(0, tailOffset);
    const isEncrypted = encrypted[tailOffset] >> 7;
    if (isEncrypted === 0) return [out, header];
    let srtcpIndex = encrypted.readUInt32BE(tailOffset);
    srtcpIndex &= ~(1 << 31);
    const ssrc = encrypted.readUInt32BE(4);
    const actualTag = encrypted.subarray(encrypted.length - 10);
    const counter = this.generateCounter(
      srtcpIndex & 65535,
      srtcpIndex >> 16,
      ssrc,
      this.srtcpSessionSalt
    );
    const cipher = createDecipheriv(
      "aes-128-ctr",
      this.srtcpSessionKey,
      counter
    );
    const buf = cipher.update(out.subarray(8));
    buf.copy(out, 8);
    return [out, header];
  }
  generateSrtcpAuthTag(buf) {
    const srtcpSessionAuth = createHmac("sha1", this.srtcpSessionAuthTag);
    return srtcpSessionAuth.update(buf).digest().slice(0, 10);
  }
  generateCounter(sequenceNumber, rolloverCounter, ssrc, sessionSalt) {
    const counter = Buffer.alloc(16);
    counter.writeUInt32BE(ssrc, 4);
    counter.writeUInt32BE(rolloverCounter, 8);
    counter.writeUInt32BE(Number(BigInt(sequenceNumber) << 16n), 12);
    for (let i = 0; i < sessionSalt.length; i++) {
      counter[i] ^= sessionSalt[i];
    }
    return counter;
  }
  generateSrtpAuthTag(roc, ...buffers) {
    const srtpSessionAuth = createHmac("sha1", this.srtpSessionAuthTag);
    const rocRaw = Buffer.alloc(4);
    rocRaw.writeUInt32BE(roc);
    for (const buf of buffers) {
      srtpSessionAuth.update(buf);
    }
    return srtpSessionAuth.update(rocRaw).digest().subarray(0, 10);
  }
};
var srtcpIndexSize = 4;

// ../rtp/src/srtp/cipher/gcm.ts
import { createCipheriv as createCipheriv3, createDecipheriv as createDecipheriv2 } from "crypto";
var CipherAesGcm = class extends CipherAesBase {
  aeadAuthTagLen = 16;
  rtpIvWriter = createBufferWriter([2, 4, 4, 2], true);
  rtcpIvWriter = createBufferWriter([2, 4, 2, 4], true);
  aadWriter = createBufferWriter([4], true);
  constructor(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt) {
    super(srtpSessionKey, srtpSessionSalt, srtcpSessionKey, srtcpSessionSalt);
  }
  encryptRtp(header, payload, rolloverCounter) {
    const hdr = header.serialize(header.serializeSize);
    const iv = this.rtpInitializationVector(header, rolloverCounter);
    const cipher = createCipheriv3("aes-128-gcm", this.srtpSessionKey, iv);
    cipher.setAAD(hdr);
    const enc = cipher.update(payload);
    cipher.final();
    const authTag = cipher.getAuthTag();
    const dst = Buffer.concat([hdr, enc, authTag]);
    return dst;
  }
  decryptRtp(cipherText, rolloverCounter) {
    const header = RtpHeader.deSerialize(cipherText);
    let dst = Buffer.from([]);
    dst = growBufferSize(dst, cipherText.length - this.aeadAuthTagLen);
    cipherText.slice(0, header.payloadOffset).copy(dst);
    const iv = this.rtpInitializationVector(header, rolloverCounter);
    const enc = cipherText.slice(
      header.payloadOffset,
      cipherText.length - this.aeadAuthTagLen
    );
    const cipher = createDecipheriv2("aes-128-gcm", this.srtpSessionKey, iv);
    const dec = cipher.update(enc);
    dec.copy(dst, header.payloadOffset);
    return [dst, header];
  }
  encryptRTCP(rtcpPacket, srtcpIndex) {
    const ssrc = rtcpPacket.readUInt32BE(4);
    const addPos = rtcpPacket.length + this.aeadAuthTagLen;
    let dst = Buffer.from([]);
    dst = growBufferSize(dst, addPos + srtcpIndexSize2);
    rtcpPacket.slice(0, 8).copy(dst);
    const iv = this.rtcpInitializationVector(ssrc, srtcpIndex);
    const aad = this.rtcpAdditionalAuthenticatedData(rtcpPacket, srtcpIndex);
    const cipher = createCipheriv3("aes-128-gcm", this.srtcpSessionKey, iv);
    cipher.setAAD(aad);
    const enc = cipher.update(rtcpPacket.slice(8));
    cipher.final();
    enc.copy(dst, 8);
    const authTag = cipher.getAuthTag();
    authTag.copy(dst, 8 + enc.length);
    aad.slice(8, 12).copy(dst, addPos);
    return dst;
  }
  decryptRTCP(encrypted) {
    const header = RtcpHeader.deSerialize(encrypted);
    const aadPos = encrypted.length - srtcpIndexSize2;
    const dst = Buffer.alloc(aadPos - this.aeadAuthTagLen);
    encrypted.slice(0, 8).copy(dst);
    const ssrc = encrypted.readUInt32BE(4);
    let srtcpIndex = encrypted.readUInt32BE(encrypted.length - 4);
    srtcpIndex &= ~(rtcpEncryptionFlag << 24);
    const iv = this.rtcpInitializationVector(ssrc, srtcpIndex);
    const aad = this.rtcpAdditionalAuthenticatedData(encrypted, srtcpIndex);
    const cipher = createDecipheriv2("aes-128-gcm", this.srtcpSessionKey, iv);
    cipher.setAAD(aad);
    const dec = cipher.update(encrypted.slice(8, aadPos));
    dec.copy(dst, 8);
    return [dst, header];
  }
  // https://tools.ietf.org/html/rfc7714#section-8.1
  rtpInitializationVector(header, rolloverCounter) {
    const iv = this.rtpIvWriter([
      0,
      header.ssrc,
      rolloverCounter,
      header.sequenceNumber
    ]);
    for (let i = 0; i < iv.length; i++) {
      iv[i] ^= this.srtpSessionSalt[i];
    }
    return iv;
  }
  // https://tools.ietf.org/html/rfc7714#section-9.1
  rtcpInitializationVector(ssrc, srtcpIndex) {
    const iv = this.rtcpIvWriter([0, ssrc, 0, srtcpIndex]);
    for (let i = 0; i < iv.length; i++) {
      iv[i] ^= this.srtcpSessionSalt[i];
    }
    return iv;
  }
  // https://datatracker.ietf.org/doc/html/rfc7714#section-17
  rtcpAdditionalAuthenticatedData(rtcpPacket, srtcpIndex) {
    const aad = Buffer.concat([
      rtcpPacket.subarray(0, 8),
      this.aadWriter([srtcpIndex])
    ]);
    aad[8] |= rtcpEncryptionFlag;
    return aad;
  }
};
var srtcpIndexSize2 = 4;
var rtcpEncryptionFlag = 128;

// ../rtp/src/srtp/context/context.ts
var Context = class {
  constructor(masterKey, masterSalt, profile) {
    this.masterKey = masterKey;
    this.masterSalt = masterSalt;
    this.profile = profile;
    {
      const diff = 14 - masterSalt.length;
      if (diff > 0) {
        this.masterSalt = Buffer.concat([masterSalt, Buffer.alloc(diff)]);
      }
    }
    this.srtpSessionKey = this.generateSessionKey(0);
    this.srtpSessionSalt = this.generateSessionSalt(2);
    this.srtpSessionAuthTag = this.generateSessionAuthTag(1);
    this.srtpSessionAuth = createHmac2("sha1", this.srtpSessionAuthTag);
    this.srtcpSessionKey = this.generateSessionKey(3);
    this.srtcpSessionSalt = this.generateSessionSalt(5);
    this.srtcpSessionAuthTag = this.generateSessionAuthTag(4);
    this.srtcpSessionAuth = createHmac2("sha1", this.srtcpSessionAuthTag);
    switch (profile) {
      case ProtectionProfileAes128CmHmacSha1_80:
        this.cipher = new CipherAesCtr(
          this.srtpSessionKey,
          this.srtpSessionSalt,
          this.srtcpSessionKey,
          this.srtcpSessionSalt,
          this.srtpSessionAuthTag,
          this.srtcpSessionAuthTag
        );
        break;
      case ProtectionProfileAeadAes128Gcm:
        this.cipher = new CipherAesGcm(
          this.srtpSessionKey,
          this.srtpSessionSalt,
          this.srtcpSessionKey,
          this.srtcpSessionSalt
        );
        break;
    }
  }
  srtpSSRCStates = {};
  srtpSessionKey;
  srtpSessionSalt;
  srtpSessionAuthTag;
  srtpSessionAuth;
  srtcpSSRCStates = {};
  srtcpSessionKey;
  srtcpSessionSalt;
  srtcpSessionAuthTag;
  srtcpSessionAuth;
  cipher;
  generateSessionKey(label) {
    let sessionKey = Buffer.from(this.masterSalt);
    const labelAndIndexOverKdr = Buffer.from([
      label,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    for (let i = labelAndIndexOverKdr.length - 1, j = sessionKey.length - 1; i >= 0; i--, j--) {
      sessionKey[j] = sessionKey[j] ^ labelAndIndexOverKdr[i];
    }
    sessionKey = Buffer.concat([sessionKey, Buffer.from([0, 0])]);
    const block = new AES.AES(this.masterKey);
    return Buffer.from(block.encrypt(sessionKey));
  }
  generateSessionSalt(label) {
    let sessionSalt = Buffer.from(this.masterSalt);
    const labelAndIndexOverKdr = Buffer.from([
      label,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    for (let i = labelAndIndexOverKdr.length - 1, j = sessionSalt.length - 1; i >= 0; i--, j--) {
      sessionSalt[j] = sessionSalt[j] ^ labelAndIndexOverKdr[i];
    }
    sessionSalt = Buffer.concat([sessionSalt, Buffer.from([0, 0])]);
    const block = new AES.AES(this.masterKey);
    sessionSalt = Buffer.from(block.encrypt(sessionSalt));
    return sessionSalt.subarray(0, 14);
  }
  generateSessionAuthTag(label) {
    const sessionAuthTag = Buffer.from(this.masterSalt);
    const labelAndIndexOverKdr = Buffer.from([
      label,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    for (let i = labelAndIndexOverKdr.length - 1, j = sessionAuthTag.length - 1; i >= 0; i--, j--) {
      sessionAuthTag[j] = sessionAuthTag[j] ^ labelAndIndexOverKdr[i];
    }
    let firstRun = Buffer.concat([
      sessionAuthTag,
      Buffer.from([0, 0])
    ]);
    let secondRun = Buffer.concat([
      sessionAuthTag,
      Buffer.from([0, 1])
    ]);
    const block = new AES.AES(this.masterKey);
    firstRun = Buffer.from(block.encrypt(firstRun));
    secondRun = Buffer.from(block.encrypt(secondRun));
    return Buffer.concat([firstRun, secondRun.subarray(0, 4)]);
  }
  getSrtpSsrcState(ssrc) {
    let s = this.srtpSSRCStates[ssrc];
    if (s) return s;
    s = {
      ssrc,
      rolloverCounter: 0,
      lastSequenceNumber: 0
    };
    this.srtpSSRCStates[ssrc] = s;
    return s;
  }
  getSrtcpSsrcState(ssrc) {
    let s = this.srtcpSSRCStates[ssrc];
    if (s) return s;
    s = {
      srtcpIndex: 0,
      ssrc
    };
    this.srtcpSSRCStates[ssrc] = s;
    return s;
  }
  // 3.3.1.  Packet Index Determination, and ROC, s_l Update
  // In particular, out-of-order RTP packets with
  // sequence numbers close to 2^16 or zero must be properly handled.
  updateRolloverCount(sequenceNumber, s) {
    if (!s.rolloverHasProcessed) {
      s.rolloverHasProcessed = true;
    } else if (sequenceNumber === 0) {
      if (s.lastSequenceNumber > MaxROCDisorder) {
        s.rolloverCounter++;
      }
    } else if (s.lastSequenceNumber < MaxROCDisorder && sequenceNumber > MaxSequenceNumber - MaxROCDisorder) {
      if (s.rolloverCounter > 0) {
        s.rolloverCounter--;
      }
    } else if (sequenceNumber < MaxROCDisorder && s.lastSequenceNumber > MaxSequenceNumber - MaxROCDisorder) {
      s.rolloverCounter++;
    }
    s.lastSequenceNumber = sequenceNumber;
  }
  generateSrtpAuthTag(buf, roc) {
    this.srtpSessionAuth = createHmac2("sha1", this.srtpSessionAuthTag);
    const rocRaw = Buffer.alloc(4);
    rocRaw.writeUInt32BE(roc);
    return this.srtpSessionAuth.update(buf).update(rocRaw).digest().slice(0, 10);
  }
  index(ssrc) {
    const s = this.srtcpSSRCStates[ssrc];
    if (!s) {
      return 0;
    }
    return s.srtcpIndex;
  }
  setIndex(ssrc, index) {
    const s = this.getSrtcpSsrcState(ssrc);
    s.srtcpIndex = index % 2147483647;
  }
};
var MaxROCDisorder = 100;
var MaxSequenceNumber = 65535;

// ../rtp/src/srtp/context/srtcp.ts
var SrtcpContext = class extends Context {
  constructor(masterKey, masterSalt, profile) {
    super(masterKey, masterSalt, profile);
  }
  encryptRTCP(rawRtcp) {
    const ssrc = rawRtcp.readUInt32BE(4);
    const s = this.getSrtcpSsrcState(ssrc);
    s.srtcpIndex++;
    if (s.srtcpIndex >> maxSRTCPIndex) {
      s.srtcpIndex = 0;
    }
    const enc = this.cipher.encryptRTCP(rawRtcp, s.srtcpIndex);
    return enc;
  }
  decryptRTCP(encrypted) {
    const dec = this.cipher.decryptRTCP(encrypted);
    return dec;
  }
};
var maxSRTCPIndex = 2147483647;

// ../rtp/src/srtp/session.ts
var Session = class {
  constructor(ContextCls) {
    this.ContextCls = ContextCls;
  }
  localContext;
  remoteContext;
  onData;
  start(localMasterKey, localMasterSalt, remoteMasterKey, remoteMasterSalt, profile) {
    this.localContext = new this.ContextCls(
      localMasterKey,
      localMasterSalt,
      profile
    );
    this.remoteContext = new this.ContextCls(
      remoteMasterKey,
      remoteMasterSalt,
      profile
    );
  }
};

// ../rtp/src/srtp/srtcp.ts
var SrtcpSession = class extends Session {
  constructor(config) {
    super(SrtcpContext);
    this.config = config;
    this.start(
      config.keys.localMasterKey,
      config.keys.localMasterSalt,
      config.keys.remoteMasterKey,
      config.keys.remoteMasterSalt,
      config.profile
    );
  }
  decrypt = (buf) => {
    const [decrypted] = this.remoteContext.decryptRTCP(buf);
    return decrypted;
  };
  encrypt(rawRtcp) {
    const enc = this.localContext.encryptRTCP(rawRtcp);
    return enc;
  }
};

// ../rtp/src/srtp/context/srtp.ts
var SrtpContext = class extends Context {
  constructor(masterKey, masterSalt, profile) {
    super(masterKey, masterSalt, profile);
  }
  encryptRtp(payload, header) {
    const s = this.getSrtpSsrcState(header.ssrc);
    this.updateRolloverCount(header.sequenceNumber, s);
    const enc = this.cipher.encryptRtp(header, payload, s.rolloverCounter);
    return enc;
  }
  decryptRtp(cipherText) {
    const header = RtpHeader.deSerialize(cipherText);
    const s = this.getSrtpSsrcState(header.ssrc);
    this.updateRolloverCount(header.sequenceNumber, s);
    const dec = this.cipher.decryptRtp(cipherText, s.rolloverCounter);
    return dec;
  }
};

// ../rtp/src/srtp/srtp.ts
var SrtpSession = class extends Session {
  constructor(config) {
    super(SrtpContext);
    this.config = config;
    this.start(
      config.keys.localMasterKey,
      config.keys.localMasterSalt,
      config.keys.remoteMasterKey,
      config.keys.remoteMasterSalt,
      config.profile
    );
  }
  decrypt = (buf) => {
    const [decrypted] = this.remoteContext.decryptRtp(buf);
    return decrypted;
  };
  encrypt(payload, header) {
    return this.localContext.encryptRtp(payload, header);
  }
};

// ../rtp/src/util.ts
var RtpBuilder = class {
  constructor(props) {
    this.props = props;
  }
  sequenceNumber = random16();
  timestamp = random32();
  create(payload) {
    this.sequenceNumber = uint16Add(this.sequenceNumber, 1);
    const elapsed = this.props.between * this.props.clockRate / 1e3;
    this.timestamp = uint32Add(this.timestamp, elapsed);
    const header = new RtpHeader({
      sequenceNumber: this.sequenceNumber,
      timestamp: Number(this.timestamp),
      payloadType: 96,
      extension: true,
      marker: false,
      padding: false
    });
    const rtp = new RtpPacket(header, payload);
    return rtp;
  }
};

// ../rtp/src/extra/processor/depacketizer.ts
var path = `werift-rtp : packages/rtp/src/processor/depacketizer.ts`;
var log8 = debug(path);
var DepacketizeBase = class {
  constructor(codec, options = {}) {
    this.codec = codec;
    this.options = options;
  }
  rtpBuffer = [];
  frameFragmentBuffer;
  lastSeqNum;
  frameBroken = false;
  keyframeReceived = false;
  count = 0;
  onNeedKeyFrame = new Event();
  internalStats = {};
  toJSON() {
    return {
      ...this.internalStats,
      codec: this.codec,
      bufferingLength: this.rtpBuffer.length,
      lastSeqNum: this.lastSeqNum,
      count: this.count
    };
  }
  processInput(input) {
    const output = [];
    if (!input.rtp) {
      if (input.eol) {
        output.push({ eol: true });
        this.stop();
      }
      return output;
    }
    if (this.options.isFinalPacketInSequence) {
      const isFinal = this.checkFinalPacket(input);
      if (isFinal) {
        try {
          const { data, isKeyframe, sequence, timestamp, frameFragmentBuffer } = dePacketizeRtpPackets(
            this.codec,
            this.rtpBuffer.map((b) => b.rtp),
            this.frameFragmentBuffer
          );
          this.frameFragmentBuffer = frameFragmentBuffer;
          if (isKeyframe) {
            this.keyframeReceived = true;
          }
          if (this.options.waitForKeyframe && this.keyframeReceived === false) {
            this.onNeedKeyFrame.execute();
            return [];
          }
          if (!this.frameBroken && data.length > 0) {
            const time = this.rtpBuffer.at(-1)?.time ?? 0;
            output.push({
              frame: {
                data,
                isKeyframe,
                time,
                sequence: this.count++,
                rtpSeq: sequence,
                timestamp
              }
            });
            this.internalStats["depacketizer"] = (/* @__PURE__ */ new Date()).toISOString();
          }
          if (this.frameBroken) {
            this.frameBroken = false;
          }
          this.clearBuffer();
          return output;
        } catch (error) {
          log8("error", error, { input, codec: this.codec });
          this.clearBuffer();
        }
      }
    } else {
      try {
        const { data, isKeyframe, sequence, timestamp, frameFragmentBuffer } = dePacketizeRtpPackets(
          this.codec,
          [input.rtp],
          this.frameFragmentBuffer
        );
        this.frameFragmentBuffer = frameFragmentBuffer;
        output.push({
          frame: {
            data,
            isKeyframe,
            time: input.time,
            sequence: this.count++,
            rtpSeq: sequence,
            timestamp
          }
        });
        this.internalStats["depacketizer"] = (/* @__PURE__ */ new Date()).toISOString();
        return output;
      } catch (error) {
        log8("error", error, { input, codec: this.codec });
      }
    }
    return [];
  }
  stop() {
    this.clearBuffer();
    this.onNeedKeyFrame.allUnsubscribe();
  }
  clearBuffer() {
    this.rtpBuffer.forEach((b) => b.rtp.clear());
    this.rtpBuffer = [];
    this.frameFragmentBuffer = void 0;
  }
  checkFinalPacket({ rtp, time }) {
    if (!this.options.isFinalPacketInSequence) {
      throw new Error("isFinalPacketInSequence not exist");
    }
    const { sequenceNumber } = rtp.header;
    if (this.lastSeqNum != void 0) {
      const expect = uint16Add(this.lastSeqNum, 1);
      if (uint16Gt(expect, sequenceNumber)) {
        this.internalStats["unExpect"] = {
          expect,
          sequenceNumber,
          codec: this.codec,
          at: (/* @__PURE__ */ new Date()).toISOString(),
          count: (this.internalStats["unExpect"]?.count ?? 0) + 1
        };
        return false;
      }
      if (uint16Gt(sequenceNumber, expect)) {
        this.internalStats["packetLost"] ??= [];
        if (this.internalStats["packetLost"].length > 10) {
          this.internalStats["packetLost"].shift();
        }
        this.internalStats["packetLost"].push({
          expect,
          sequenceNumber,
          codec: this.codec,
          at: (/* @__PURE__ */ new Date()).toISOString()
        });
        this.internalStats["packetLostCount"] ??= 0;
        this.internalStats["packetLostCount"]++;
        this.frameBroken = true;
        this.clearBuffer();
      }
    }
    this.rtpBuffer.push({ rtp, time });
    this.lastSeqNum = sequenceNumber;
    let finalPacket;
    for (const [i, { rtp: rtp2 }] of enumerate(this.rtpBuffer)) {
      if (this.options.isFinalPacketInSequence(rtp2.header)) {
        finalPacket = i;
        break;
      }
    }
    if (finalPacket == void 0) {
      return false;
    }
    return true;
  }
};

// ../rtp/src/extra/processor/interface.ts
var SimpleProcessorCallbackBase = (Base) => {
  return class extends Base {
    cb;
    destructor;
    pipe = (cb, destructor) => {
      this.cb = cb;
      this.destructor = destructor;
      cb = void 0;
      destructor = void 0;
      return this;
    };
    input = (input) => {
      for (const output of this.processInput(input)) {
        if (this.cb) {
          this.cb(output);
        }
      }
    };
    destroy = () => {
      if (this.destructor) {
        this.destructor();
        this.destructor = void 0;
      }
      this.cb = void 0;
    };
  };
};

// ../rtp/src/extra/processor/depacketizerCallback.ts
var DepacketizeCallback = class extends SimpleProcessorCallbackBase(DepacketizeBase) {
};

// ../rtp/src/extra/processor/depacketizerTransformer.ts
import { TransformStream } from "stream/web";
var depacketizeTransformer = (...args) => new DepacketizeTransformer(...args).transform;
var DepacketizeTransformer = class extends DepacketizeBase {
  transform;
  constructor(codec, options = {}) {
    super(codec, options);
    this.transform = new TransformStream({
      transform: (input, output) => {
        for (const res of this.processInput(input)) {
          output.enqueue(res);
        }
      }
    });
  }
};

// ../rtp/src/extra/processor/dtx.ts
import { randomUUID } from "crypto";
var DtxBase = class {
  constructor(ptime, dummyPacket) {
    this.ptime = ptime;
    this.dummyPacket = dummyPacket;
  }
  id = randomUUID();
  previousTimestamp;
  fillCount = 0;
  internalStats = {};
  toJSON() {
    return { ...this.internalStats, id: this.id, fillCount: this.fillCount };
  }
  processInput({ frame, eol }) {
    if (eol) {
      this.stop();
      return [{ eol: true }];
    }
    if (frame) {
      if (!this.previousTimestamp) {
        this.previousTimestamp = frame.time;
        this.internalStats["dtx"] = (/* @__PURE__ */ new Date()).toISOString();
        return [{ frame }];
      }
      if (frame.time != this.previousTimestamp + this.ptime) {
        const dummyPackets = [];
        for (let time = this.previousTimestamp; time < frame.time; time += this.ptime) {
          dummyPackets.push({
            frame: {
              time,
              isKeyframe: frame.isKeyframe,
              data: this.dummyPacket
            }
          });
          this.fillCount++;
        }
        this.previousTimestamp = frame.time;
        this.internalStats["dtx"] = (/* @__PURE__ */ new Date()).toISOString();
        return [...dummyPackets, { frame }];
      } else {
        this.previousTimestamp = frame.time;
        this.internalStats["dtx"] = (/* @__PURE__ */ new Date()).toISOString();
        return [{ frame }];
      }
    }
    return [];
  }
  stop() {
    this.dummyPacket = void 0;
  }
};

// ../rtp/src/extra/processor/dtxCallback.ts
var DtxCallback = class extends SimpleProcessorCallbackBase(DtxBase) {
};

// ../rtp/src/extra/processor/jitterBuffer.ts
var JitterBufferBase = class {
  constructor(clockRate, options = {}) {
    this.clockRate = clockRate;
    this.options = {
      latency: options.latency ?? 200,
      bufferSize: options.bufferSize ?? 1e4
    };
  }
  options;
  /**uint16 */
  presentSeqNum;
  rtpBuffer = {};
  get expectNextSeqNum() {
    return uint16Add(this.presentSeqNum, 1);
  }
  internalStats = {};
  toJSON() {
    return {
      ...this.internalStats,
      rtpBufferLength: Object.values(this.rtpBuffer).length,
      presentSeqNum: this.presentSeqNum,
      expectNextSeqNum: this.expectNextSeqNum
    };
  }
  stop() {
    this.rtpBuffer = {};
  }
  processInput(input) {
    const output = [];
    if (!input.rtp) {
      if (input.eol) {
        const packets2 = this.sortAndClearBuffer(this.rtpBuffer);
        for (const rtp of packets2) {
          output.push({ rtp });
        }
        output.push({ eol: true });
        this.stop();
      }
      return output;
    }
    const { packets, timeoutSeqNum } = this.processRtp(input.rtp);
    if (timeoutSeqNum != void 0) {
      const isPacketLost = {
        from: this.expectNextSeqNum,
        to: timeoutSeqNum
      };
      this.presentSeqNum = input.rtp.header.sequenceNumber;
      output.push({ isPacketLost });
      if (packets) {
        for (const rtp of [...packets, input.rtp]) {
          output.push({ rtp });
        }
      }
      this.internalStats["jitterBuffer"] = (/* @__PURE__ */ new Date()).toISOString();
      return output;
    } else {
      if (packets) {
        for (const rtp of packets) {
          output.push({ rtp });
        }
        this.internalStats["jitterBuffer"] = (/* @__PURE__ */ new Date()).toISOString();
        return output;
      }
      return [];
    }
  }
  processRtp(rtp) {
    const { sequenceNumber, timestamp } = rtp.header;
    if (this.presentSeqNum == void 0) {
      this.presentSeqNum = sequenceNumber;
      return { packets: [rtp] };
    }
    if (uint16Gte(this.presentSeqNum, sequenceNumber)) {
      this.internalStats["duplicate"] = {
        count: (this.internalStats["duplicate"]?.count ?? 0) + 1,
        sequenceNumber,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      };
      return { nothing: void 0 };
    }
    if (sequenceNumber === this.expectNextSeqNum) {
      this.presentSeqNum = sequenceNumber;
      const rtpBuffer = this.resolveBuffer(uint16Add(sequenceNumber, 1));
      this.presentSeqNum = rtpBuffer.at(-1)?.header.sequenceNumber ?? this.presentSeqNum;
      this.disposeTimeoutPackets(timestamp);
      return { packets: [rtp, ...rtpBuffer] };
    }
    this.pushRtpBuffer(rtp);
    const { latestTimeoutSeqNum, sorted } = this.disposeTimeoutPackets(timestamp);
    if (latestTimeoutSeqNum) {
      return { timeoutSeqNum: latestTimeoutSeqNum, packets: sorted };
    } else {
      return { nothing: void 0 };
    }
  }
  pushRtpBuffer(rtp) {
    if (Object.values(this.rtpBuffer).length > this.options.bufferSize) {
      this.internalStats["buffer_overflow"] = {
        count: (this.internalStats["buffer_overflow"]?.count ?? 0) + 1,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      };
      return;
    }
    this.rtpBuffer[rtp.header.sequenceNumber] = rtp;
  }
  resolveBuffer(seqNumFrom) {
    const resolve = [];
    for (let index = seqNumFrom; ; index = uint16Add(index, 1)) {
      const rtp = this.rtpBuffer[index];
      if (rtp) {
        resolve.push(rtp);
        delete this.rtpBuffer[index];
      } else {
        break;
      }
    }
    return resolve;
  }
  sortAndClearBuffer(rtpBuffer) {
    const buffer2 = [];
    for (let index = this.presentSeqNum ?? 0; ; index = uint16Add(index, 1)) {
      const rtp = rtpBuffer[index];
      if (rtp) {
        buffer2.push(rtp);
        delete rtpBuffer[index];
      }
      if (Object.values(rtpBuffer).length === 0) {
        break;
      }
    }
    return buffer2;
  }
  disposeTimeoutPackets(baseTimestamp) {
    let latestTimeoutSeqNum;
    const packets = Object.values(this.rtpBuffer).map((rtp) => {
      const { timestamp, sequenceNumber } = rtp.header;
      if (uint32Gt(timestamp, baseTimestamp)) {
        return;
      }
      const elapsedSec = uint32Add(baseTimestamp, -timestamp) / this.clockRate;
      if (elapsedSec * 1e3 > this.options.latency) {
        this.internalStats["timeout_packet"] = {
          count: (this.internalStats["timeout_packet"]?.count ?? 0) + 1,
          at: (/* @__PURE__ */ new Date()).toISOString(),
          sequenceNumber,
          elapsedSec,
          baseTimestamp,
          timestamp
        };
        if (latestTimeoutSeqNum == void 0) {
          latestTimeoutSeqNum = sequenceNumber;
        }
        if (uint16Add(sequenceNumber, -this.presentSeqNum) > uint16Add(latestTimeoutSeqNum, -this.presentSeqNum)) {
          latestTimeoutSeqNum = sequenceNumber;
        }
        const packet = this.rtpBuffer[sequenceNumber];
        delete this.rtpBuffer[sequenceNumber];
        return packet;
      }
    }).flatMap((p) => p).filter((p) => p);
    const sorted = this.sortAndClearBuffer(
      packets.reduce((acc, cur) => {
        acc[cur.header.sequenceNumber] = cur;
        return acc;
      }, {})
    );
    return { latestTimeoutSeqNum, sorted };
  }
};

// ../rtp/src/extra/processor/jitterBufferCallback.ts
var JitterBufferCallback = class extends SimpleProcessorCallbackBase(JitterBufferBase) {
};

// ../rtp/src/extra/processor/jitterBufferTransformer.ts
import { TransformStream as TransformStream2 } from "stream/web";
var jitterBufferTransformer = (...args) => new JitterBufferTransformer(...args).transform;
var JitterBufferTransformer = class extends JitterBufferBase {
  constructor(clockRate, options = {}) {
    super(clockRate, options);
    this.clockRate = clockRate;
    this.transform = new TransformStream2({
      transform: (input, output) => {
        for (const res of this.processInput(input)) {
          output.enqueue(res);
        }
      }
    });
  }
  transform;
};

// ../rtp/src/extra/processor/lipsync.ts
import { randomUUID as randomUUID2 } from "crypto";
var LipsyncBase = class {
  constructor(audioOutput, videoOutput, options = {}) {
    this.audioOutput = audioOutput;
    this.videoOutput = videoOutput;
    this.options = options;
    this.interval = this.options.syncInterval ?? 500;
    this.bufferDuration = this.interval / 2;
    this.bufferLength = (this.options.bufferLength ?? 10) * 2;
    this.audioBuffer = [...new Array(this.bufferLength)].map(() => []);
    this.videoBuffer = [...new Array(this.bufferLength)].map(() => []);
    this.ptime = this.options.ptime ?? 20;
  }
  id = randomUUID2();
  bufferLength;
  /**ms */
  baseTime;
  audioBuffer;
  videoBuffer;
  stopped = false;
  /**ms */
  interval;
  /**ms */
  bufferDuration;
  ptime;
  index = 0;
  currentTimestamp;
  /**ms */
  lastCommittedTime = 0;
  lastExecutionTime = 0;
  internalStats = {};
  /**ms */
  lastFrameReceivedAt = 0;
  toJSON() {
    return {
      ...this.internalStats,
      id: this.id,
      audioBufferLength: this.audioBuffer.flat().length,
      videoBufferLength: this.videoBuffer.flat().length,
      baseTime: this.baseTime,
      lastCommittedTimeSec: this.lastCommittedTime / 1e3
    };
  }
  executeTask() {
    const audioBuffer = this.audioBuffer[this.index].sort(
      (a, b) => a.frame.time - b.frame.time
    );
    if (this.options.fillDummyAudioPacket) {
      const last = audioBuffer.at(-1);
      const expect = last ? last.frame.time + // offset
      this.ptime : this.currentTimestamp;
      const audioDiff = this.currentTimestamp + this.bufferDuration - expect;
      if (audioDiff > 0) {
        for (let time = expect; time < this.currentTimestamp + this.bufferDuration; time += this.ptime) {
          audioBuffer.push({
            frame: {
              time,
              data: this.options.fillDummyAudioPacket,
              isKeyframe: true
            },
            kind: "audio"
          });
          this.internalStats["pushDummyPacket"] = {
            count: (this.internalStats["pushDummyPacket"]?.count ?? 0) + 1,
            at: (/* @__PURE__ */ new Date()).toISOString(),
            time
          };
        }
      }
    }
    this.currentTimestamp += this.bufferDuration;
    const joined = [...audioBuffer, ...this.videoBuffer[this.index]].filter(
      (b) => b.frame.time >= this.lastCommittedTime
    );
    const sorted = joined.sort((a, b) => a.frame.time - b.frame.time);
    this.audioBuffer[this.index] = [];
    this.videoBuffer[this.index] = [];
    for (const output of sorted) {
      if (output.kind === "audio") {
        this.audioOutput(output);
      } else {
        this.videoOutput(output);
      }
      this.internalStats["lipsync"] = (/* @__PURE__ */ new Date()).toISOString();
      this.lastCommittedTime = output.frame.time;
    }
    this.index++;
    if (this.index === this.bufferLength) {
      this.index = 0;
    }
  }
  stop() {
    this.stopped = true;
    this.audioBuffer = [];
    this.videoBuffer = [];
  }
  processAudioInput = ({ frame, eol }) => {
    if (!frame) {
      this.audioOutput({ eol });
      this.stop();
      this.audioOutput = void 0;
      return;
    }
    this.processInput(frame, this.audioBuffer, "audio");
  };
  processVideoInput = ({ frame, eol }) => {
    if (!frame) {
      this.videoOutput({ eol });
      this.stop();
      this.videoOutput = void 0;
      return;
    }
    this.processInput(frame, this.videoBuffer, "video");
  };
  processInput = (frame, buffer2, kind) => {
    if (this.stopped) {
      return;
    }
    if (this.baseTime == void 0) {
      this.baseTime = frame.time;
      this.currentTimestamp = this.baseTime;
      this.lastExecutionTime = this.baseTime;
      this.lastCommittedTime = this.baseTime;
      this.lastFrameReceivedAt = Date.now();
    }
    if (frame.time < this.lastCommittedTime) {
      return;
    }
    const now2 = Date.now();
    const gap = 5e3;
    const lastCommittedElapsed = frame.time - this.lastCommittedTime;
    const lastFrameReceivedElapsed = now2 - this.lastFrameReceivedAt;
    if (gap < lastFrameReceivedElapsed && lastCommittedElapsed < gap) {
      this.internalStats["invalidFrameTime"] = {
        count: (this.internalStats["invalidFrameTime"]?.count ?? 0) + 1,
        at: (/* @__PURE__ */ new Date()).toISOString(),
        lastCommittedElapsed,
        lastFrameReceivedElapsed
      };
      return;
    }
    this.lastFrameReceivedAt = now2;
    const elapsed = frame.time - this.baseTime;
    const index = int(elapsed / this.bufferDuration) % this.bufferLength;
    buffer2[index].push({
      frame,
      kind
    });
    const diff = frame.time - this.lastExecutionTime;
    if (diff >= this.interval) {
      const times2 = int(diff / this.bufferDuration) - 1;
      this.lastExecutionTime = this.currentTimestamp;
      for (let i = 0; i < times2; i++) {
        this.executeTask();
        this.lastExecutionTime += this.bufferDuration;
      }
    }
    return;
  };
};

// ../rtp/src/extra/processor/lipsyncCallback.ts
var LipsyncCallback = class extends LipsyncBase {
  audioCb;
  audioDestructor;
  videoCb;
  videoDestructor;
  constructor(options = {}) {
    super(
      (output) => {
        if (this.audioCb) {
          this.audioCb(output);
        }
      },
      (output) => {
        if (this.videoCb) {
          this.videoCb(output);
        }
      },
      options
    );
  }
  pipeAudio = (cb, destructor) => {
    this.audioCb = cb;
    this.audioDestructor = destructor;
  };
  pipeVideo = (cb, destructor) => {
    this.videoCb = cb;
    this.videoDestructor = destructor;
  };
  inputAudio = (input) => {
    this.processAudioInput(input);
  };
  inputVideo = (input) => {
    this.processVideoInput(input);
  };
  destroy = () => {
    if (this.audioDestructor) {
      this.audioDestructor();
      this.audioDestructor = void 0;
    }
    if (this.videoDestructor) {
      this.videoDestructor();
      this.videoDestructor = void 0;
    }
    this.audioCb = void 0;
    this.videoCb = void 0;
  };
};

// ../rtp/src/extra/processor/mp4.ts
var MP4Base = class {
  constructor(tracks, output, options = {}) {
    this.tracks = tracks;
    this.output = output;
    this.options = options;
    this.container = new Mp4Container({
      track: {
        audio: !!this.tracks.find((t) => t.kind === "audio"),
        video: !!this.tracks.find((t) => t.kind === "video")
      }
    });
    this.container.onData.subscribe((data) => {
      this.output(data);
    });
  }
  internalStats = {};
  container;
  stopped = false;
  onStopped = new Event();
  toJSON() {
    return {
      ...this.internalStats
    };
  }
  processAudioInput = ({ frame }) => {
    const track = this.tracks.find((t) => t.kind === "audio");
    if (frame) {
      if (!this.container.audioTrack) {
        this.container.write({
          codec: track.codec,
          description: buffer2ArrayBuffer(
            OpusRtpPayload.createCodecPrivate()
          ),
          numberOfChannels: 2,
          sampleRate: track.clockRate,
          track: "audio"
        });
      } else {
        this.container.write({
          byteLength: frame.data.length,
          duration: null,
          timestamp: frame.time * 1e3,
          type: "key",
          copyTo: (destination) => {
            frame.data.copy(destination);
          },
          track: "audio"
        });
      }
    }
  };
  processVideoInput = ({ frame }) => {
    const track = this.tracks.find((t) => t.kind === "video");
    if (frame) {
      if (!this.container.videoTrack) {
        if (frame.isKeyframe) {
          const avcc = annexb2avcc(frame.data);
          const [displayAspectWidth, displayAspectHeight] = computeRatio(
            track.width,
            track.height
          );
          this.container.write({
            codec: track.codec,
            codedWidth: track.width,
            codedHeight: track.height,
            description: avcc.buffer,
            displayAspectWidth,
            displayAspectHeight,
            track: "video"
          });
          this.container.write({
            byteLength: frame.data.length,
            duration: null,
            timestamp: frame.time * 1e3,
            type: "key",
            copyTo: (destination) => {
              frame.data.copy(destination);
            },
            track: "video"
          });
        }
      } else {
        this.container.write({
          byteLength: frame.data.length,
          duration: null,
          timestamp: frame.time * 1e3,
          type: frame.isKeyframe ? "key" : "delta",
          copyTo: (destination) => {
            frame.data.copy(destination);
          },
          track: "video"
        });
      }
    }
  };
  start() {
  }
  stop() {
  }
};
function computeRatio(a, b) {
  function gcd(x, y) {
    while (y !== 0) {
      const temp = y;
      y = x % y;
      x = temp;
    }
    return x;
  }
  const divisor = gcd(a, b);
  return [a / divisor, b / divisor];
}

// ../rtp/src/extra/processor/mp4Callback.ts
import { appendFile } from "fs/promises";
var MP4Callback = class extends MP4Base {
  cb;
  queue = new PromiseQueue();
  constructor(tracks, options = {}) {
    super(
      tracks,
      async (output) => {
        const cb = this.cb;
        if (cb) {
          await this.queue.push(() => cb(output));
        }
      },
      options
    );
  }
  pipe = (cb) => {
    this.cb = cb;
    this.start();
  };
  inputAudio = (input) => {
    this.processAudioInput(input);
  };
  inputVideo = (input) => {
    this.processVideoInput(input);
  };
  destroy = () => {
    this.cb = void 0;
    this.queue.cancel();
  };
  static saveToFileSystem = (path2) => {
    const queue = new PromiseQueue();
    return async (value) => {
      await queue.push(async () => {
        if (value.data) {
          await appendFile(path2, value.data);
        } else if (value.eol) {
        }
      });
    };
  };
};

// ../rtp/src/extra/processor/mute.ts
import { randomUUID as randomUUID3 } from "crypto";
var MuteHandlerBase = class {
  constructor(output, props) {
    this.output = output;
    this.props = props;
    this.interval = props.interval;
    this.bufferDuration = this.interval / 2;
    this.bufferLength = this.props.bufferLength * 2;
    this.buffer = [...new Array(this.bufferLength)].map(() => []);
  }
  id = randomUUID3();
  buffer;
  index = 0;
  ended = false;
  baseTime;
  currentTimestamp;
  internalStats = {};
  /**ms */
  lastCommittedTime = 0;
  lastExecutionTime = 0;
  /**ms */
  interval;
  bufferDuration;
  bufferLength;
  /**ms */
  lastFrameReceivedAt = 0;
  toJSON() {
    return { ...this.internalStats, id: this.id };
  }
  executeTask() {
    const { ptime, dummyPacket } = this.props;
    const buffer2 = this.buffer[this.index].sort((a, b) => a.time - b.time);
    const last = buffer2.at(-1);
    const expect = last ? last.time + // offset
    ptime : this.currentTimestamp;
    if (expect < this.currentTimestamp + this.bufferDuration) {
      for (let time = expect; time < this.currentTimestamp + this.bufferDuration; time += ptime) {
        buffer2.push({
          time,
          data: dummyPacket,
          isKeyframe: true
        });
      }
    }
    this.currentTimestamp += this.bufferDuration;
    this.internalStats["mute"] = (/* @__PURE__ */ new Date()).toISOString();
    this.buffer[this.index] = [];
    buffer2.forEach((frame) => {
      this.output({ frame });
      this.lastCommittedTime = frame.time;
    });
    this.index++;
    if (this.index === this.bufferLength) {
      this.index = 0;
    }
  }
  stop() {
    this.ended = true;
    this.buffer = [];
    this.output = void 0;
  }
  processInput = ({ frame, eol }) => {
    if (!frame) {
      this.stop();
      return [{ eol }];
    }
    if (this.ended) {
      return [];
    }
    if (this.baseTime == void 0) {
      this.baseTime = frame.time;
      this.currentTimestamp = this.baseTime;
      this.lastExecutionTime = this.baseTime;
      this.lastCommittedTime = this.baseTime;
      this.lastFrameReceivedAt = Date.now();
    }
    if (frame.time < this.lastCommittedTime) {
      return [];
    }
    const now2 = Date.now();
    const gap = 5e3;
    const lastCommittedElapsed = frame.time - this.lastCommittedTime;
    const lastFrameReceivedElapsed = now2 - this.lastFrameReceivedAt;
    if (gap < lastFrameReceivedElapsed && lastCommittedElapsed < gap) {
      this.internalStats["invalidFrameTime"] = {
        count: (this.internalStats["invalidFrameTime"]?.count ?? 0) + 1,
        at: (/* @__PURE__ */ new Date()).toISOString(),
        lastCommittedElapsed,
        lastFrameReceivedElapsed
      };
      return [];
    }
    this.lastFrameReceivedAt = now2;
    const elapsed = frame.time - this.baseTime;
    const index = int(elapsed / this.bufferDuration) % this.bufferLength;
    this.buffer[index].push(frame);
    const lastExecution = frame.time - this.lastExecutionTime;
    if (lastExecution >= this.interval) {
      const times2 = int(lastExecution / this.bufferDuration) - 1;
      this.lastExecutionTime = this.currentTimestamp;
      for (let i = 0; i < times2; i++) {
        this.executeTask();
        this.lastExecutionTime += this.bufferDuration;
      }
    }
    return [];
  };
};

// ../rtp/src/extra/processor/muteCallback.ts
var MuteCallback = class extends MuteHandlerBase {
  cb;
  destructor;
  constructor(props) {
    super((o) => {
      if (this.cb) {
        this.cb(o);
      }
    }, props);
  }
  pipe = (cb, destructor) => {
    this.cb = cb;
    this.destructor = destructor;
    return this;
  };
  input = (input) => {
    for (const output of this.processInput(input)) {
      if (this.cb) {
        this.cb(output);
      }
    }
  };
  destroy = () => {
    if (this.destructor) {
      this.destructor();
      this.destructor = void 0;
    }
    this.cb = void 0;
  };
};

// ../rtp/src/extra/processor/nack.ts
var log9 = debug("werift-rtp : packages/rtp/src/processor/nack.ts");
var LOST_SIZE = 30 * 5;
var NackHandlerBase = class {
  constructor(senderSsrc, onNack) {
    this.senderSsrc = senderSsrc;
    this.onNack = onNack;
  }
  newEstSeqNum = 0;
  _lost = {};
  clearNackInterval;
  internalStats = {};
  onNackSent = new Event();
  onPacketLost = new Event();
  mediaSourceSsrc;
  retryCount = 10;
  stopped = false;
  toJSON() {
    return {
      ...this.internalStats,
      newEstSeqNum: this.newEstSeqNum,
      lostLength: Object.values(this._lost).length,
      senderSsrc: this.senderSsrc,
      mediaSourceSsrc: this.mediaSourceSsrc
    };
  }
  get lostSeqNumbers() {
    return Object.keys(this._lost).map(Number).sort();
  }
  getLost(seq) {
    return this._lost[seq];
  }
  setLost(seq, count) {
    this._lost[seq] = count;
    if (this.clearNackInterval || this.stopped) {
      return;
    }
    this.clearNackInterval = timer.setInterval(async () => {
      try {
        await this.sendNack();
        if (!Object.keys(this._lost).length) {
          this.clearNackInterval?.();
          this.clearNackInterval = void 0;
        }
      } catch (error) {
        log9("failed to send nack", error);
      }
    }, 5);
  }
  removeLost(sequenceNumber) {
    delete this._lost[sequenceNumber];
  }
  processInput = (input) => {
    if (input.rtp) {
      this.addPacket(input.rtp);
      this.internalStats["nackHandler"] = (/* @__PURE__ */ new Date()).toISOString();
      return [input];
    }
    this.stop();
    return [input];
  };
  addPacket(packet) {
    const { sequenceNumber, ssrc } = packet.header;
    this.mediaSourceSsrc = ssrc;
    if (this.newEstSeqNum === 0) {
      this.newEstSeqNum = sequenceNumber;
      return;
    }
    if (this.getLost(sequenceNumber)) {
      this.removeLost(sequenceNumber);
      return;
    }
    if (sequenceNumber === uint16Add(this.newEstSeqNum, 1)) {
      this.newEstSeqNum = sequenceNumber;
    } else if (sequenceNumber > uint16Add(this.newEstSeqNum, 1)) {
      for (let seq = uint16Add(this.newEstSeqNum, 1); seq < sequenceNumber; seq++) {
        this.setLost(seq, 1);
      }
      this.newEstSeqNum = sequenceNumber;
      this.pruneLost();
    }
  }
  pruneLost() {
    if (this.lostSeqNumbers.length > LOST_SIZE) {
      this._lost = Object.entries(this._lost).slice(-LOST_SIZE).reduce(
        (acc, [key, v]) => {
          acc[key] = v;
          return acc;
        },
        {}
      );
    }
  }
  stop() {
    this.stopped = true;
    this._lost = {};
    this.clearNackInterval?.();
    this.onNackSent.allUnsubscribe();
    this.onPacketLost.allUnsubscribe();
    this.onNack = void 0;
  }
  updateRetryCount() {
    this.lostSeqNumbers.forEach((seq) => {
      const count = this._lost[seq]++;
      if (count > this.retryCount) {
        this.removeLost(seq);
        this.onPacketLost.execute(seq);
      }
    });
  }
  sendNack = () => new Promise((r, f) => {
    if (this.lostSeqNumbers.length > 0 && this.mediaSourceSsrc) {
      this.internalStats["count"] = (this.internalStats["count"] ?? 0) + 1;
      const nack = new GenericNack({
        senderSsrc: this.senderSsrc,
        mediaSourceSsrc: this.mediaSourceSsrc,
        lost: this.lostSeqNumbers
      });
      const rtcp = new RtcpTransportLayerFeedback({
        feedback: nack
      });
      this.onNack(rtcp).then(r).catch(f);
      this.updateRetryCount();
      this.onNackSent.execute(nack);
    }
  });
};

// ../rtp/src/extra/processor/nackHandlerCallback.ts
var NackHandlerCallback = class extends SimpleProcessorCallbackBase(NackHandlerBase) {
};

// ../rtp/src/extra/processor/ntpTime.ts
import { randomUUID as randomUUID4 } from "crypto";

// ../rtp/src/extra/processor/webm.ts
var WebmBase = class {
  constructor(tracks, output, options = {}) {
    this.tracks = tracks;
    this.output = output;
    this.options = options;
    this.builder = new WEBMContainer(tracks, options.encryptionKey);
    tracks.forEach((t) => {
      this.timestamps[t.trackNumber] = new ClusterTimestamp();
    });
  }
  builder;
  relativeTimestamp = 0;
  timestamps = {};
  cuePoints = [];
  position = 0;
  clusterCounts = 0;
  /**ms */
  elapsed;
  audioStopped = false;
  videoStopped = false;
  stopped = false;
  videoKeyframeReceived = false;
  internalStats = {};
  onStopped = new Event();
  toJSON() {
    return {
      ...this.internalStats,
      videoKeyframeReceived: this.videoKeyframeReceived,
      videoStopped: this.videoStopped,
      audioStopped: this.audioStopped,
      stopped: this.stopped
    };
  }
  processInput(input, trackNumber) {
    if (this.stopped) {
      return;
    }
    const track = this.tracks.find((t) => t.trackNumber === trackNumber);
    if (!track) {
      throw new Error("track not found");
    }
    if (!input.frame) {
      if (this.tracks.length === 2) {
        if (track.kind === "audio") {
          this.audioStopped = true;
          this.internalStats["audioStopped"] = (/* @__PURE__ */ new Date()).toISOString();
          if (this.videoStopped) {
            this.stop();
          }
        } else {
          this.videoStopped = true;
          this.internalStats["videoStopped"] = (/* @__PURE__ */ new Date()).toISOString();
          if (this.audioStopped) {
            this.stop();
          }
        }
      } else if (input.eol) {
        this.stop();
      }
      return;
    }
    if (track.kind === "audio") {
      this.audioStopped = false;
    } else {
      this.videoStopped = false;
    }
    this.onFrameReceived({ ...input.frame, trackNumber });
  }
  processAudioInput = (input) => {
    const track = this.tracks.find((t) => t.kind === "audio");
    if (track) {
      this.internalStats["processAudioInput"] = (/* @__PURE__ */ new Date()).toISOString();
      this.processInput(input, track.trackNumber);
    }
  };
  processVideoInput = (input) => {
    if (input.frame?.isKeyframe) {
      this.videoKeyframeReceived = true;
    }
    if (!this.videoKeyframeReceived && input?.frame?.isKeyframe !== true) {
      return;
    }
    const track = this.tracks.find((t) => t.kind === "video");
    if (track) {
      this.internalStats["processVideoInput"] = (/* @__PURE__ */ new Date()).toISOString();
      this.processInput(input, track.trackNumber);
    }
  };
  start() {
    const staticPart = Buffer.concat([
      this.builder.ebmlHeader,
      this.builder.createSegment(this.options.duration)
    ]);
    this.output({ saveToFile: staticPart, kind: "initial" });
    this.position += staticPart.length;
    const video = this.tracks.find((t) => t.kind === "video");
    if (video) {
      this.cuePoints.push(
        new CuePoint(this.builder, video.trackNumber, 0, this.position)
      );
    }
  }
  onFrameReceived(frame) {
    const track = this.tracks.find((t) => t.trackNumber === frame.trackNumber);
    if (!track) {
      return;
    }
    this.internalStats["onFrameReceived_trackNumber" + frame.trackNumber] = (/* @__PURE__ */ new Date()).toISOString();
    this.internalStats["onFrameReceived_count"] = (this.internalStats["onFrameReceived_count"] ?? 0) + 1;
    const timestampManager = this.timestamps[track.trackNumber];
    if (timestampManager.baseTime == void 0) {
      for (const t of Object.values(this.timestamps)) {
        t.baseTime = frame.time;
      }
    }
    let elapsed = timestampManager.update(frame.time);
    if (this.clusterCounts === 0) {
      this.createCluster(0, 0);
    } else if (track.kind === "video" && frame.isKeyframe || // simpleBlockのタイムスタンプはsigned 16bitだから
    elapsed > MaxSinged16Int) {
      this.relativeTimestamp += elapsed;
      if (elapsed !== 0) {
        this.cuePoints.push(
          new CuePoint(
            this.builder,
            track.trackNumber,
            this.relativeTimestamp,
            this.position
          )
        );
        this.createCluster(this.relativeTimestamp, elapsed);
        Object.values(this.timestamps).forEach((t) => t.shift(elapsed));
        elapsed = timestampManager.update(frame.time);
      }
    }
    if (elapsed >= 0) {
      this.createSimpleBlock({
        frame,
        trackNumber: track.trackNumber,
        elapsed
      });
    } else {
      this.internalStats["delayed_frame"] = {
        elapsed,
        trackNumber: track.trackNumber,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        count: (this.internalStats["delayed_frame"]?.count ?? 0) + 1
      };
    }
  }
  createCluster(timestamp, duration) {
    const cluster = this.builder.createCluster(timestamp);
    this.clusterCounts++;
    this.output({
      saveToFile: Buffer.from(cluster),
      kind: "cluster",
      previousDuration: duration
    });
    this.position += cluster.length;
    this.elapsed = void 0;
  }
  createSimpleBlock({
    frame,
    trackNumber,
    elapsed
  }) {
    if (this.elapsed == void 0) {
      this.elapsed = elapsed;
    }
    if (elapsed < this.elapsed && this.options.strictTimestamp) {
      this.internalStats["previous_timestamp"] = {
        elapsed,
        present: this.elapsed,
        trackNumber,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        count: (this.internalStats["previous_timestamp"]?.count ?? 0) + 1
      };
      return;
    }
    if (elapsed > this.elapsed + 1e3) {
      const key = "maybe_packetLost-" + trackNumber;
      this.internalStats[key] = {
        elapsed,
        present: this.elapsed,
        trackNumber,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        count: (this.internalStats[key]?.count ?? 0) + 1
      };
    }
    this.elapsed = elapsed;
    const block = this.builder.createSimpleBlock(
      frame.data,
      frame.isKeyframe,
      trackNumber,
      elapsed
    );
    this.internalStats["createSimpleBlock_trackNumber" + trackNumber] = (/* @__PURE__ */ new Date()).toISOString();
    this.output({ saveToFile: block, kind: "block" });
    this.position += block.length;
    const [cuePoint] = this.cuePoints.slice(-1);
    if (cuePoint) {
      cuePoint.blockNumber++;
    }
  }
  stop() {
    if (this.stopped) {
      return;
    }
    this.videoStopped = true;
    this.audioStopped = true;
    this.stopped = true;
    this.internalStats["stopped"] = (/* @__PURE__ */ new Date()).toISOString();
    const latestTimestamp = Object.values(this.timestamps).sort((a, b) => a.elapsed - b.elapsed).reverse()[0].elapsed;
    const duration = this.relativeTimestamp + latestTimestamp;
    const cues = this.builder.createCues(this.cuePoints.map((c) => c.build()));
    this.output({
      saveToFile: Buffer.from(cues),
      kind: "cuePoints",
      previousDuration: duration
    });
    const durationElement = this.builder.createDuration(duration);
    const header = Buffer.concat([
      this.builder.ebmlHeader,
      this.builder.createSegment(duration)
    ]);
    this.output({ eol: { duration, durationElement, header } });
    this.timestamps = {};
    this.cuePoints = [];
    this.internalStats = {};
    this.output = void 0;
    this.onStopped.execute();
  }
};
var ClusterTimestamp = class {
  /**ms */
  baseTime;
  /**ms */
  elapsed = 0;
  offset = 0;
  shift(elapsed) {
    this.offset += elapsed;
  }
  update(time) {
    if (this.baseTime == void 0) {
      throw new Error("baseTime not exist");
    }
    this.elapsed = time - this.baseTime - this.offset;
    return this.elapsed;
  }
};
var CuePoint = class {
  constructor(builder, trackNumber, relativeTimestamp, position) {
    this.builder = builder;
    this.trackNumber = trackNumber;
    this.relativeTimestamp = relativeTimestamp;
    this.position = position;
  }
  /**
   * cuesの後のclusterのあるべき位置
   * cuesはclusterの前に挿入される
   */
  cuesLength = 0;
  blockNumber = 0;
  build() {
    return this.builder.createCuePoint(
      this.relativeTimestamp,
      this.trackNumber,
      this.position - 48 + this.cuesLength,
      this.blockNumber
    );
  }
};
var Max32Uint = Number(0x01n << 32n) - 1;
var MaxSinged16Int = (1 << 16) / 2 - 1;
var DurationPosition = 83;
var SegmentSizePosition = 40;
function replaceSegmentSize(totalFileSize) {
  const bodySize = totalFileSize - SegmentSizePosition;
  const resize = [
    ...vintEncode(numberToByteArray(bodySize, getEBMLByteLength(bodySize)))
  ];
  const todoFill = 8 - resize.length - 2;
  if (todoFill > 0) {
    resize.push(236);
    if (todoFill > 1) {
      const voidSize = vintEncode(
        numberToByteArray(todoFill, getEBMLByteLength(todoFill))
      );
      [...voidSize].forEach((i) => resize.push(i));
    }
  }
  return Buffer.from(resize);
}

// ../rtp/src/extra/processor/ntpTime.ts
var NtpTimeBase = class {
  constructor(clockRate) {
    this.clockRate = clockRate;
  }
  id = randomUUID4();
  baseNtpTimestamp;
  baseRtpTimestamp;
  latestNtpTimestamp;
  latestRtpTimestamp;
  currentElapsed = 0;
  buffer = [];
  internalStats = {};
  started = false;
  toJSON() {
    return {
      ...this.internalStats,
      id: this.id,
      baseRtpTimestamp: this.baseRtpTimestamp,
      latestRtpTimestamp: this.latestRtpTimestamp,
      baseNtpTimestamp: this.baseNtpTimestamp && ntpTime2Sec(this.baseNtpTimestamp),
      latestNtpTimestamp: this.latestNtpTimestamp && ntpTime2Sec(this.latestNtpTimestamp),
      bufferLength: this.buffer.length,
      currentElapsed: this.currentElapsed,
      clockRate: this.clockRate
    };
  }
  stop() {
    this.buffer = [];
    this.internalStats = {};
  }
  processInput({ rtcp, rtp, eol }) {
    if (eol) {
      this.stop();
      return [{ eol: true }];
    }
    if (rtcp && rtcp.type === RtcpSrPacket.type) {
      const { ntpTimestamp, rtpTimestamp } = rtcp.senderInfo;
      this.latestNtpTimestamp = ntpTimestamp;
      this.latestRtpTimestamp = rtpTimestamp;
      if (this.baseNtpTimestamp == void 0) {
        this.baseNtpTimestamp = ntpTimestamp;
        this.baseRtpTimestamp = rtpTimestamp;
      }
      this.internalStats["ntpReceived"] = (/* @__PURE__ */ new Date()).toISOString();
      this.started = true;
    }
    if (rtp) {
      this.buffer.push(rtp);
      this.internalStats["payloadType"] = rtp.header.payloadType;
      const res = [];
      if (this.baseRtpTimestamp == void 0 || this.baseNtpTimestamp == void 0 || this.latestNtpTimestamp == void 0 || this.latestRtpTimestamp == void 0) {
        return [];
      }
      for (const rtp2 of this.buffer) {
        const ntp = this.updateNtp(rtp2.header.timestamp);
        const ms = ntp * 1e3;
        const time = Math.round(ms);
        res.push({ rtp: rtp2, time });
        this.internalStats["timeSource"] = (/* @__PURE__ */ new Date()).toISOString() + " time:" + time;
      }
      this.buffer = [];
      return res;
    }
    return [];
  }
  /**
   *
   * @param rtpTimestamp
   * @returns sec
   */
  calcNtp({
    rtpTimestamp,
    baseNtpTimestamp,
    baseRtpTimestamp,
    elapsedOffset
  }) {
    const rotate = Math.abs(rtpTimestamp - baseRtpTimestamp) > Max32Uint / 4 * 3;
    const elapsed = rotate ? rtpTimestamp + Max32Uint - baseRtpTimestamp : rtpTimestamp - baseRtpTimestamp;
    const elapsedSec = elapsed / this.clockRate;
    const ntp = ntpTime2Sec(baseNtpTimestamp) + elapsedOffset + elapsedSec;
    return { ntp, elapsedSec };
  }
  updateNtp(rtpTimestamp) {
    this.internalStats["inputRtp"] = rtpTimestamp;
    const base = this.calcNtp({
      rtpTimestamp,
      baseNtpTimestamp: this.baseNtpTimestamp,
      baseRtpTimestamp: this.baseRtpTimestamp,
      elapsedOffset: this.currentElapsed
    });
    const latest = this.calcNtp({
      rtpTimestamp,
      baseNtpTimestamp: this.latestNtpTimestamp,
      baseRtpTimestamp: this.latestRtpTimestamp,
      elapsedOffset: 0
    });
    this.internalStats["calcBaseNtp"] = base.ntp;
    this.internalStats["calcLatestNtp"] = latest.ntp;
    if (base.ntp < latest.ntp) {
      this.baseNtpTimestamp = this.latestNtpTimestamp;
      this.baseRtpTimestamp = this.latestRtpTimestamp;
      this.currentElapsed = 0;
      this.internalStats["calcNtp"] = latest.ntp;
      return latest.ntp;
    } else {
      this.currentElapsed += base.elapsedSec;
      this.baseRtpTimestamp = rtpTimestamp;
      this.internalStats["calcNtp"] = base.ntp;
      return base.ntp;
    }
  }
};

// ../rtp/src/extra/processor/ntpTimeCallback.ts
var NtpTimeCallback = class extends SimpleProcessorCallbackBase(NtpTimeBase) {
};

// ../rtp/src/extra/processor/rtcpCallback.ts
var RtcpSourceCallback = class {
  cb;
  destructor;
  onStopped = new Event();
  toJSON() {
    return {};
  }
  pipe(cb, destructor) {
    this.cb = cb;
    this.destructor = destructor;
    return this;
  }
  input = (rtcp) => {
    if (this.cb) {
      this.cb({ rtcp });
    }
  };
  stop() {
    if (this.cb) {
      this.cb({ eol: true });
    }
    this.onStopped.execute();
  }
  destroy = () => {
    if (this.destructor) {
      this.destructor();
      this.destructor = void 0;
    }
    this.cb = void 0;
    this.onStopped.allUnsubscribe();
  };
};

// ../rtp/src/extra/processor/rtpCallback.ts
var RtpSourceCallback = class {
  constructor(options = {}) {
    this.options = options;
    options.clearInvalidPTPacket = options.clearInvalidPTPacket ?? true;
  }
  cb;
  destructor;
  onStopped = new Event();
  stats = {};
  buffer = [];
  bufferFulfilled = false;
  toJSON() {
    return { ...this.stats };
  }
  pipe(cb, destructor) {
    this.cb = cb;
    this.destructor = destructor;
    return this;
  }
  input = (packet) => {
    const rtp = Buffer.isBuffer(packet) ? RtpPacket.deSerialize(packet) : packet;
    if (this.options.payloadType != void 0 && this.options.payloadType !== rtp.header.payloadType) {
      if (this.options.clearInvalidPTPacket) {
        rtp.clear();
      }
      return;
    }
    this.stats["rtpSource"] = (/* @__PURE__ */ new Date()).toISOString() + " timestamp:" + rtp?.header.timestamp + " seq:" + rtp?.header.sequenceNumber;
    const cb = this.cb;
    if (cb) {
      if (this.options.initialBufferLength) {
        if (this.bufferFulfilled) {
          cb({ rtp });
          return;
        }
        this.buffer.push(rtp);
        if (this.buffer.length > this.options.initialBufferLength) {
          this.buffer.forEach((rtp2) => {
            cb({ rtp: rtp2 });
          });
          this.buffer = [];
          this.bufferFulfilled = true;
        }
      } else {
        cb({ rtp });
      }
    }
  };
  stop() {
    if (this.cb) {
      this.cb({ eol: true });
    }
    this.onStopped.execute();
  }
  destroy = () => {
    if (this.destructor) {
      this.destructor();
      this.destructor = void 0;
    }
    this.cb = void 0;
    this.onStopped.allUnsubscribe();
  };
};

// ../rtp/src/extra/processor/rtpStream.ts
import { ReadableStream } from "stream/web";
var RtpSourceStream = class {
  constructor(options = {}) {
    this.options = options;
    options.clearInvalidPTPacket = options.clearInvalidPTPacket ?? true;
    this.readable = new ReadableStream({
      start: (controller) => {
        this.controller = controller;
        this.write = (chunk) => controller.enqueue(chunk);
      }
    });
  }
  readable;
  write;
  controller;
  push = (packet) => {
    const rtp = Buffer.isBuffer(packet) ? RtpPacket.deSerialize(packet) : packet;
    if (this.options.payloadType != void 0 && this.options.payloadType !== rtp.header.payloadType) {
      if (this.options.clearInvalidPTPacket) {
        rtp.clear();
      }
      return;
    }
    this.write({ rtp });
  };
  stop() {
    this.controller.enqueue({ eol: true });
  }
};

// ../rtp/src/extra/processor/rtpTime.ts
var RtpTimeBase = class {
  constructor(clockRate) {
    this.clockRate = clockRate;
  }
  baseTimestamp;
  /**ms */
  elapsed = 0;
  toJSON() {
    return {
      baseTimestamp: this.baseTimestamp,
      elapsed: this.elapsed
    };
  }
  processInput({ rtp, eol }) {
    if (eol) {
      return [{ eol: true }];
    }
    if (rtp) {
      const elapsed = this.update(rtp.header.timestamp);
      return [{ rtp, time: elapsed }];
    }
    return [];
  }
  /**
   *
   * @param timestamp
   * @returns ms
   */
  update(timestamp) {
    if (this.baseTimestamp == void 0) {
      this.baseTimestamp = timestamp;
    }
    const rotate = Math.abs(timestamp - this.baseTimestamp) > Max32Uint / 4 * 3;
    const elapsed = rotate ? timestamp + Max32Uint - this.baseTimestamp : timestamp - this.baseTimestamp;
    this.elapsed += int(elapsed / this.clockRate * 1e3);
    this.baseTimestamp = timestamp;
    return this.elapsed;
  }
};

// ../rtp/src/extra/processor/rtpTimeCallback.ts
var RtpTimeCallback = class extends SimpleProcessorCallbackBase(RtpTimeBase) {
};

// ../rtp/src/extra/processor/webmCallback.ts
import { appendFile as appendFile2, open, stat } from "fs/promises";
var WebmCallback = class extends WebmBase {
  cb;
  queue = new PromiseQueue();
  constructor(tracks, options = {}) {
    super(
      tracks,
      async (output) => {
        const cb = this.cb;
        if (cb) {
          await this.queue.push(() => cb(output));
        }
      },
      options
    );
  }
  pipe = (cb) => {
    this.cb = cb;
    this.start();
  };
  inputAudio = (input) => {
    this.processAudioInput(input);
  };
  inputVideo = (input) => {
    this.processVideoInput(input);
  };
  destroy = () => {
    this.cb = void 0;
    this.queue.cancel();
  };
};
var saveToFileSystem = (path2) => {
  const queue = new PromiseQueue();
  return async (value) => {
    return await queue.push(async () => {
      if (value.saveToFile) {
        await appendFile2(path2, value.saveToFile);
        return false;
      } else if (value.eol) {
        const { durationElement } = value.eol;
        const handler = await open(path2, "r+");
        await handler.write(
          durationElement,
          0,
          durationElement.length,
          DurationPosition
        );
        const meta = await stat(path2);
        const resize = replaceSegmentSize(meta.size);
        await handler.write(resize, 0, resize.length, SegmentSizePosition);
        await handler.close();
        return true;
      }
      return false;
    });
  };
};

// ../rtp/src/extra/processor/webmStream.ts
import {
  ReadableStream as ReadableStream2,
  WritableStream
} from "stream/web";
var WebmStream = class extends WebmBase {
  audioStream;
  videoStream;
  webmStream;
  controller;
  constructor(tracks, options = {}) {
    super(
      tracks,
      (output) => {
        this.controller.enqueue(output);
      },
      options
    );
    const audioTrack = tracks.find((t) => t.kind === "audio");
    if (audioTrack) {
      this.audioStream = new WritableStream({
        write: (input) => {
          this.processAudioInput(input);
        }
      });
    }
    const videoTrack = tracks.find((t) => t.kind === "video");
    if (videoTrack) {
      this.videoStream = new WritableStream({
        write: (input) => {
          this.processVideoInput(input);
        }
      });
    }
    this.webmStream = new ReadableStream2({
      start: (controller) => {
        this.controller = controller;
      }
    });
    this.start();
  }
};

// src/nonstandard/navigator.ts
import { randomBytes as randomBytes4 } from "crypto";
import { createSocket as createSocket3 } from "dgram";
import { jspack as jspack8 } from "@shinyoshiaki/jspack";

// ../dtls/src/context/cipher.ts
import nodeCrypto, { createSign } from "crypto";
import { Certificate, PrivateKey } from "@fidm/x509";
import * as x509 from "@peculiar/x509";
import { encode, types } from "@shinyoshiaki/binary-data";
import { addYears } from "date-fns";

// ../dtls/src/cipher/const.ts
var SignatureAlgorithm = {
  rsa_1: 1,
  ecdsa_3: 3
};
var HashAlgorithm = {
  sha256_4: 4
};
var CipherSuite = {
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_49195: 49195,
  //49195,
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256_49199: 49199
  //49199
};
var CipherSuiteList = Object.values(CipherSuite);
var NamedCurveAlgorithm = {
  x25519_29: 29,
  secp256r1_23: 23
};
var NamedCurveAlgorithmList = Object.values(NamedCurveAlgorithm);
var CurveType = { named_curve_3: 3 };
var signatures = [
  { hash: HashAlgorithm.sha256_4, signature: SignatureAlgorithm.rsa_1 },
  { hash: HashAlgorithm.sha256_4, signature: SignatureAlgorithm.ecdsa_3 }
];

// ../dtls/src/cipher/prf.ts
import { createHash, createHmac as createHmac3 } from "crypto";
import { createDecode } from "@shinyoshiaki/binary-data";
import nacl from "tweetnacl";

// ../dtls/src/cipher/ec.ts
import { p256 } from "@noble/curves/p256";
var p256Keypair = () => {
  const priv = p256.utils.randomPrivateKey();
  const pub = p256.getPublicKey(priv, false);
  const privateKey = Buffer.from(priv);
  const publicKey = Buffer.from(pub);
  return {
    privateKey,
    publicKey
  };
};
var p256PreMasterSecret = ({
  publicKey,
  privateKey
}) => {
  const res = p256.getSharedSecret(privateKey, publicKey);
  const secret = Buffer.from(res).subarray(1);
  return secret;
};

// ../dtls/src/cipher/prf.ts
function prfPreMasterSecret(publicKey, privateKey, curve) {
  switch (curve) {
    case NamedCurveAlgorithm.secp256r1_23:
      return p256PreMasterSecret({ publicKey, privateKey });
    case NamedCurveAlgorithm.x25519_29:
      return Buffer.from(nacl.scalarMult(privateKey, publicKey));
    default:
      throw new Error();
  }
}
function hmac(algorithm, secret, data) {
  const hash2 = createHmac3(algorithm, secret);
  hash2.update(data);
  return hash2.digest();
}
function prfPHash(secret, seed, requestedLegth, algorithm = "sha256") {
  const totalLength = requestedLegth;
  const bufs = [];
  let Ai = seed;
  do {
    Ai = hmac(algorithm, secret, Ai);
    const output = hmac(algorithm, secret, Buffer.concat([Ai, seed]));
    bufs.push(output);
    requestedLegth -= output.length;
  } while (requestedLegth > 0);
  return Buffer.concat(bufs, totalLength);
}
function prfMasterSecret(preMasterSecret, clientRandom, serverRandom) {
  const seed = Buffer.concat([
    Buffer.from("master secret"),
    clientRandom,
    serverRandom
  ]);
  return prfPHash(preMasterSecret, seed, 48);
}
function prfExtendedMasterSecret(preMasterSecret, handshakes) {
  const sessionHash = hash("sha256", handshakes);
  const label = "extended master secret";
  return prfPHash(
    preMasterSecret,
    Buffer.concat([Buffer.from(label), sessionHash]),
    48
  );
}
function hash(algorithm, data) {
  return createHash(algorithm).update(data).digest();
}
function prfVerifyData(masterSecret, handshakes, label, size = 12) {
  const bytes2 = hash("sha256", handshakes);
  return prfPHash(
    masterSecret,
    Buffer.concat([Buffer.from(label), bytes2]),
    size
  );
}
function prfVerifyDataClient(masterSecret, handshakes) {
  return prfVerifyData(masterSecret, handshakes, "client finished");
}
function prfVerifyDataServer(masterSecret, handshakes) {
  return prfVerifyData(masterSecret, handshakes, "server finished");
}
function prfEncryptionKeys(masterSecret, clientRandom, serverRandom, prfKeyLen, prfIvLen, prfNonceLen, algorithm = "sha256") {
  const size = prfKeyLen * 2 + prfIvLen * 2;
  const secret = masterSecret;
  const seed = Buffer.concat([serverRandom, clientRandom]);
  const keyBlock = prfPHash(
    secret,
    Buffer.concat([Buffer.from("key expansion"), seed]),
    size,
    algorithm
  );
  const stream = createDecode(keyBlock);
  const clientWriteKey = stream.readBuffer(prfKeyLen);
  const serverWriteKey = stream.readBuffer(prfKeyLen);
  const clientNonceImplicit = stream.readBuffer(prfIvLen);
  const serverNonceImplicit = stream.readBuffer(prfIvLen);
  const clientNonce = Buffer.alloc(prfNonceLen, 0);
  const serverNonce = Buffer.alloc(prfNonceLen, 0);
  clientNonceImplicit.copy(clientNonce, 0);
  serverNonceImplicit.copy(serverNonce, 0);
  return { clientWriteKey, serverWriteKey, clientNonce, serverNonce };
}

// ../dtls/src/cipher/suites/abstract.ts
var SessionType = {
  CLIENT: 1,
  SERVER: 2
};
var AbstractCipher = class {
  id = 0;
  name;
  hashAlgorithm;
  verifyDataLength = 12;
  blockAlgorithm;
  kx;
  /**
   * Init cipher.
   * @abstract
   */
  init(...args) {
    throw new Error("not implemented");
  }
  /**
   * Encrypts data.
   * @abstract
   */
  encrypt(...args) {
    throw new Error("not implemented");
  }
  /**
   * Decrypts data.
   * @abstract
   */
  decrypt(...args) {
    throw new Error("not implemented");
  }
  /**
   * @returns {string}
   */
  toString() {
    return this.name;
  }
};

// ../dtls/src/context/cipher.ts
var crypto = nodeCrypto.webcrypto;
x509.cryptoProvider.set(crypto);
var CipherContext = class {
  constructor(sessionType, certPem, keyPem, signatureHashAlgorithm) {
    this.sessionType = sessionType;
    this.certPem = certPem;
    this.keyPem = keyPem;
    if (certPem && keyPem && signatureHashAlgorithm) {
      this.parseX509(certPem, keyPem, signatureHashAlgorithm);
    }
  }
  localRandom;
  remoteRandom;
  cipherSuite;
  remoteCertificate;
  remoteKeyPair;
  localKeyPair;
  masterSecret;
  cipher;
  namedCurve;
  signatureHashAlgorithm;
  localCert;
  localPrivateKey;
  /**
   *
   * @param signatureHash
   * @param namedCurveAlgorithm necessary when use ecdsa
   */
  static createSelfSignedCertificateWithKey = async (signatureHash, namedCurveAlgorithm) => {
    const signatureAlgorithmName = (() => {
      switch (signatureHash.signature) {
        case SignatureAlgorithm.rsa_1:
          return "RSASSA-PKCS1-v1_5";
        case SignatureAlgorithm.ecdsa_3:
          return "ECDSA";
      }
    })();
    const hash2 = (() => {
      switch (signatureHash.hash) {
        case HashAlgorithm.sha256_4:
          return "SHA-256";
      }
    })();
    const namedCurve = (() => {
      switch (namedCurveAlgorithm) {
        case NamedCurveAlgorithm.secp256r1_23:
          return "P-256";
        case NamedCurveAlgorithm.x25519_29:
          if (signatureAlgorithmName === "ECDSA") {
            return "P-256";
          }
          return "X25519";
        default: {
          if (signatureAlgorithmName === "ECDSA") return "P-256";
          if (signatureAlgorithmName === "RSASSA-PKCS1-v1_5") return "X25519";
        }
      }
    })();
    const alg = (() => {
      switch (signatureAlgorithmName) {
        case "ECDSA":
          return { name: signatureAlgorithmName, hash: hash2, namedCurve };
        case "RSASSA-PKCS1-v1_5":
          return {
            name: signatureAlgorithmName,
            hash: hash2,
            publicExponent: new Uint8Array([1, 0, 1]),
            modulusLength: 2048
          };
      }
    })();
    const keys = await crypto.subtle.generateKey(alg, true, [
      "sign",
      "verify"
    ]);
    const cert = await x509.X509CertificateGenerator.createSelfSigned({
      serialNumber: nodeCrypto.randomBytes(8).toString("hex"),
      name: "C=AU, ST=Some-State, O=Internet Widgits Pty Ltd",
      notBefore: /* @__PURE__ */ new Date(),
      notAfter: addYears(Date.now(), 10),
      signingAlgorithm: alg,
      keys
    });
    const certPem = cert.toString("pem");
    const keyPem = x509.PemConverter.encode(
      await crypto.subtle.exportKey("pkcs8", keys.privateKey),
      "private key"
    );
    return { certPem, keyPem, signatureHash };
  };
  encryptPacket(pkt) {
    const header = pkt.recordLayerHeader;
    const version = header.protocolVersion.major << 8 | header.protocolVersion.minor;
    const enc = this.cipher.encrypt(this.sessionType, pkt.fragment, {
      type: header.contentType,
      version,
      epoch: header.epoch,
      sequenceNumber: header.sequenceNumber
    });
    pkt.fragment = enc;
    pkt.recordLayerHeader.contentLen = enc.length;
    return pkt;
  }
  decryptPacket(pkt) {
    const header = pkt.recordLayerHeader;
    const version = header.protocolVersion.major << 8 | header.protocolVersion.minor;
    const dec = this.cipher.decrypt(this.sessionType, pkt.fragment, {
      type: header.contentType,
      version,
      epoch: header.epoch,
      sequenceNumber: header.sequenceNumber
    });
    return dec;
  }
  verifyData(buf) {
    if (this.sessionType === SessionType.CLIENT)
      return prfVerifyDataClient(this.masterSecret, buf);
    else return prfVerifyDataServer(this.masterSecret, buf);
  }
  signatureData(data, hash2) {
    const signature = createSign(hash2).update(data);
    const key = this.localPrivateKey.toPEM().toString();
    const signed = signature.sign(key);
    return signed;
  }
  generateKeySignature(hashAlgorithm) {
    const clientRandom = this.sessionType === SessionType.CLIENT ? this.localRandom : this.remoteRandom;
    const serverRandom = this.sessionType === SessionType.SERVER ? this.localRandom : this.remoteRandom;
    const sig = this.valueKeySignature(
      clientRandom.serialize(),
      serverRandom.serialize(),
      this.localKeyPair.publicKey,
      this.namedCurve
    );
    const enc = this.localPrivateKey.sign(sig, hashAlgorithm);
    return enc;
  }
  parseX509(certPem, keyPem, signatureHash) {
    const cert = Certificate.fromPEM(Buffer.from(certPem));
    const sec = PrivateKey.fromPEM(Buffer.from(keyPem));
    this.localCert = cert.raw;
    this.localPrivateKey = sec;
    this.signatureHashAlgorithm = signatureHash;
  }
  valueKeySignature(clientRandom, serverRandom, publicKey, namedCurve) {
    const serverParams = Buffer.from(
      encode(
        {
          type: CurveType.named_curve_3,
          curve: namedCurve,
          len: publicKey.length
        },
        { type: types.uint8, curve: types.uint16be, len: types.uint8 }
      ).slice()
    );
    return Buffer.concat([clientRandom, serverRandom, serverParams, publicKey]);
  }
};

// ../dtls/src/context/srtp.ts
var SrtpContext2 = class {
  srtpProfile;
  static findMatchingSRTPProfile(remote, local) {
    for (const v of local) {
      if (remote.includes(v)) return v;
    }
  }
};

// ../dtls/src/handshake/message/client/hello.ts
import { decode as decode3, encode as encode4, types as types5 } from "@shinyoshiaki/binary-data";

// ../dtls/src/record/message/fragment.ts
import { decode, encode as encode2, types as types2 } from "@shinyoshiaki/binary-data";

// ../dtls/src/helper.ts
var dumpBuffer2 = (data) => "0x" + data.toString("hex").replace(/(.)(.)/g, "$1$2 ").split(" ").filter((s) => s != void 0 && s.length > 0).join(",0x");
var getObjectSummary = (obj) => Object.entries({ ...obj }).reduce((acc, [key, value]) => {
  if (typeof value === "number" || typeof value === "string") {
    acc[key] = value;
  }
  if (Buffer.isBuffer(value)) {
    acc[key] = dumpBuffer2(value);
  }
  return acc;
}, {});

// ../dtls/src/record/message/fragment.ts
var FragmentedHandshake = class _FragmentedHandshake {
  constructor(msg_type, length, message_seq, fragment_offset, fragment_length, fragment) {
    this.msg_type = msg_type;
    this.length = length;
    this.message_seq = message_seq;
    this.fragment_offset = fragment_offset;
    this.fragment_length = fragment_length;
    this.fragment = fragment;
  }
  static spec = {
    msg_type: types2.uint8,
    length: types2.uint24be,
    message_seq: types2.uint16be,
    fragment_offset: types2.uint24be,
    fragment_length: types2.uint24be,
    fragment: types2.buffer((context) => context.current.fragment_length)
  };
  get summary() {
    return getObjectSummary(this);
  }
  static createEmpty() {
    return new _FragmentedHandshake(
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    return new _FragmentedHandshake(
      ...Object.values(decode(buf, _FragmentedHandshake.spec))
    );
  }
  serialize() {
    const res = encode2(this, _FragmentedHandshake.spec).slice();
    return Buffer.from(res);
  }
  chunk(maxFragmentLength) {
    let start = 0;
    const totalLength = this.fragment.length;
    if (totalLength === 0)
      return [
        new _FragmentedHandshake(
          this.msg_type,
          totalLength,
          this.message_seq,
          start,
          0,
          this.fragment
        )
      ];
    const fragments = [];
    if (!maxFragmentLength) {
      maxFragmentLength = 1280 - (20 + 8) - (1 + 3 + 2 + 3 + 3);
    }
    while (start < totalLength) {
      const fragmentLength = Math.min(maxFragmentLength, totalLength - start);
      const data = Buffer.from(
        this.fragment.slice(start, start + fragmentLength)
      );
      if (data.length <= 0) {
        throw new Error(
          `Zero or less bytes processed while fragmenting handshake message.`
        );
      }
      fragments.push(
        new _FragmentedHandshake(
          this.msg_type,
          totalLength,
          this.message_seq,
          start,
          data.length,
          data
        )
      );
      start += data.length;
    }
    return fragments;
  }
  static assemble(messages) {
    if (!messages?.length) {
      throw new Error("cannot reassemble handshake from empty array");
    }
    messages = messages.sort((a, b) => a.fragment_offset - b.fragment_offset);
    const combined = Buffer.alloc(messages[0].length);
    for (const msg of messages) {
      msg.fragment.copy(combined, msg.fragment_offset);
    }
    return new _FragmentedHandshake(
      messages[0].msg_type,
      messages[0].length,
      messages[0].message_seq,
      0,
      combined.length,
      combined
    );
  }
  static findAllFragments(fragments, type) {
    const reference = fragments.find((v) => v.msg_type === type);
    if (!reference) return [];
    if (!fragments?.length) return [];
    return fragments.filter((f) => {
      return f.msg_type === reference.msg_type && f.message_seq === reference.message_seq && f.length === reference.length;
    });
  }
};

// ../dtls/src/handshake/binary.ts
import { types as types3 } from "@shinyoshiaki/binary-data";
var { uint16be, uint24be, buffer, array, uint8, string: string2 } = types3;
var Extension = {
  type: uint16be,
  data: buffer(uint16be)
};
var ExtensionList = array(Extension, uint16be, "bytes");
var ASN11Cert = buffer(uint24be);
var ClientCertificateType = uint8;
var DistinguishedName = string2(uint16be);
var SignatureHashAlgorithm = { hash: uint8, signature: uint8 };
var ProtocolVersion = { major: uint8, minor: uint8 };

// ../dtls/src/handshake/random.ts
import { randomBytes as randomBytes3 } from "crypto";
import { decode as decode2, encode as encode3, types as types4 } from "@shinyoshiaki/binary-data";
var DtlsRandom = class _DtlsRandom {
  constructor(gmt_unix_time = Math.floor(Date.now() / 1e3), random_bytes = randomBytes3(28)) {
    this.gmt_unix_time = gmt_unix_time;
    this.random_bytes = random_bytes;
  }
  static spec = {
    gmt_unix_time: types4.uint32be,
    random_bytes: types4.buffer(28)
  };
  static deSerialize(buf) {
    return new _DtlsRandom(
      ...Object.values(decode2(buf, _DtlsRandom.spec))
    );
  }
  static from(spec) {
    return new _DtlsRandom(...Object.values(spec));
  }
  serialize() {
    const res = encode3(this, _DtlsRandom.spec).slice();
    return Buffer.from(res);
  }
};

// ../dtls/src/handshake/message/client/hello.ts
var ClientHello = class _ClientHello {
  constructor(clientVersion, random, sessionId, cookie, cipherSuites2, compressionMethods, extensions) {
    this.clientVersion = clientVersion;
    this.random = random;
    this.sessionId = sessionId;
    this.cookie = cookie;
    this.cipherSuites = cipherSuites2;
    this.compressionMethods = compressionMethods;
    this.extensions = extensions;
  }
  msgType = 1 /* client_hello_1 */;
  messageSeq = 0;
  static spec = {
    clientVersion: { major: types5.uint8, minor: types5.uint8 },
    random: DtlsRandom.spec,
    sessionId: types5.buffer(types5.uint8),
    cookie: types5.buffer(types5.uint8),
    cipherSuites: types5.array(types5.uint16be, types5.uint16be, "bytes"),
    compressionMethods: types5.array(types5.uint8, types5.uint8, "bytes"),
    extensions: ExtensionList
  };
  static createEmpty() {
    return new _ClientHello(
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    return new _ClientHello(
      ...Object.values(decode3(buf, _ClientHello.spec))
    );
  }
  serialize() {
    const res = encode4(this, _ClientHello.spec).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/record/message/header.ts
import { decode as decode4, encode as encode5, types as types6 } from "@shinyoshiaki/binary-data";
var MACHeader = class _MACHeader {
  constructor(epoch, sequenceNumber, contentType, protocolVersion, contentLen) {
    this.epoch = epoch;
    this.sequenceNumber = sequenceNumber;
    this.contentType = contentType;
    this.protocolVersion = protocolVersion;
    this.contentLen = contentLen;
  }
  static spec = {
    epoch: types6.uint16be,
    sequenceNumber: types6.uint48be,
    contentType: types6.uint8,
    protocolVersion: ProtocolVersion,
    contentLen: types6.uint16be
  };
  static createEmpty() {
    return new _MACHeader(
      void 0,
      void 0,
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    return new _MACHeader(
      ...Object.values(decode4(buf, _MACHeader.spec))
    );
  }
  serialize() {
    const res = encode5(this, _MACHeader.spec).slice();
    return Buffer.from(res);
  }
};

// ../dtls/src/flight/flight.ts
var warn = debug("werift-dtls : packages/dtls/src/flight/flight.ts : warn");
var err = debug("werift-dtls : packages/dtls/src/flight/flight.ts : err");

// ../dtls/src/flight/client/flight3.ts
var log10 = debug(
  "werift-dtls : packages/dtls/src/flight/client/flight3.ts : log"
);

// ../dtls/src/cipher/key-exchange.ts
var signTypes = {
  NULL: 0,
  ECDHE: 1
};
var keyTypes = {
  NULL: 0,
  RSA: 1,
  ECDSA: 2,
  PSK: 3
};
var kxTypes = {
  NULL: 0,
  RSA: 1,
  ECDHE_RSA: 2,
  ECDHE_ECDSA: 3,
  PSK: 4,
  ECDHE_PSK: 5
};
var KeyExchange = class {
  id = 0;
  name;
  signType;
  keyType;
  /**
   * @returns {string}
   */
  toString() {
    return this.name;
  }
};
function createRSAKeyExchange() {
  const exchange = new KeyExchange();
  exchange.id = kxTypes.RSA;
  exchange.name = "RSA";
  exchange.keyType = keyTypes.RSA;
  return exchange;
}
function createECDHERSAKeyExchange() {
  const exchange = new KeyExchange();
  exchange.id = kxTypes.ECDHE_RSA;
  exchange.name = "ECDHE_RSA";
  exchange.signType = signTypes.ECDHE;
  exchange.keyType = keyTypes.RSA;
  return exchange;
}
function createECDHEECDSAKeyExchange() {
  const exchange = new KeyExchange();
  exchange.id = kxTypes.ECDHE_ECDSA;
  exchange.name = "ECDHE_ECDSA";
  exchange.signType = signTypes.ECDHE;
  exchange.keyType = keyTypes.ECDSA;
  return exchange;
}
function createPSKKeyExchange() {
  const exchange = new KeyExchange();
  exchange.id = kxTypes.PSK;
  exchange.name = "PSK";
  exchange.signType = signTypes.NULL;
  exchange.keyType = keyTypes.PSK;
  return exchange;
}
function createECDHEPSKKeyExchange() {
  const exchange = new KeyExchange();
  exchange.id = kxTypes.ECDHE_PSK;
  exchange.name = "ECDHE_PSK";
  exchange.signType = signTypes.ECDHE;
  exchange.keyType = keyTypes.PSK;
  return exchange;
}

// ../dtls/src/cipher/suites/aead.ts
import * as crypto2 from "crypto";
var err2 = debug(
  "werift-dtls : packages/dtls/src/cipher/suites/aead.ts : err"
);
var AEADCipher = class extends AbstractCipher {
  keyLength = 0;
  nonceLength = 0;
  ivLength = 0;
  authTagLength = 0;
  nonceImplicitLength = 0;
  nonceExplicitLength = 0;
  clientWriteKey;
  serverWriteKey;
  clientNonce;
  serverNonce;
  constructor() {
    super();
  }
  get summary() {
    return getObjectSummary(this);
  }
  init(masterSecret, serverRandom, clientRandom) {
    const keys = prfEncryptionKeys(
      masterSecret,
      clientRandom,
      serverRandom,
      this.keyLength,
      this.ivLength,
      this.nonceLength,
      this.hashAlgorithm
    );
    this.clientWriteKey = keys.clientWriteKey;
    this.serverWriteKey = keys.serverWriteKey;
    this.clientNonce = keys.clientNonce;
    this.serverNonce = keys.serverNonce;
  }
  /**
   * Encrypt message.
   */
  encrypt(type, data, header) {
    const isClient = type === SessionType.CLIENT;
    const iv = isClient ? this.clientNonce : this.serverNonce;
    const writeKey = isClient ? this.clientWriteKey : this.serverWriteKey;
    if (!iv || !writeKey) throw new Error();
    iv.writeUInt16BE(header.epoch, this.nonceImplicitLength);
    iv.writeUIntBE(header.sequenceNumber, this.nonceImplicitLength + 2, 6);
    const explicitNonce = iv.slice(this.nonceImplicitLength);
    const additionalBuffer = this.encodeAdditionalBuffer(header, data.length);
    const cipher = crypto2.createCipheriv(
      this.blockAlgorithm,
      writeKey,
      iv,
      {
        authTagLength: this.authTagLength
      }
    );
    cipher.setAAD(additionalBuffer, {
      plaintextLength: data.length
    });
    const headPart = cipher.update(data);
    const finalPart = cipher.final();
    const authTag = cipher.getAuthTag();
    return Buffer.concat([explicitNonce, headPart, finalPart, authTag]);
  }
  encodeAdditionalBuffer(header, dataLength) {
    const additionalBuffer = Buffer.alloc(13);
    additionalBuffer.writeUInt16BE(header.epoch, 0);
    additionalBuffer.writeUintBE(header.sequenceNumber, 2, 6);
    additionalBuffer.writeUInt8(header.type, 8);
    additionalBuffer.writeUInt16BE(header.version, 9);
    additionalBuffer.writeUInt16BE(dataLength, 11);
    return additionalBuffer;
  }
  /**
   * Decrypt message.
   */
  decrypt(type, data, header) {
    const isClient = type === SessionType.CLIENT;
    const iv = isClient ? this.serverNonce : this.clientNonce;
    const writeKey = isClient ? this.serverWriteKey : this.clientWriteKey;
    if (!iv || !writeKey) throw new Error();
    const explicitNonce = data.subarray(0, this.nonceExplicitLength);
    explicitNonce.copy(iv, this.nonceImplicitLength);
    const encrypted = data.subarray(
      this.nonceExplicitLength,
      data.length - this.authTagLength
    );
    const authTag = data.subarray(data.length - this.authTagLength);
    const additionalBuffer = this.encodeAdditionalBuffer(
      header,
      encrypted.length
    );
    const decipher = crypto2.createDecipheriv(
      this.blockAlgorithm,
      writeKey,
      iv,
      {
        authTagLength: this.authTagLength
      }
    );
    decipher.setAuthTag(authTag);
    decipher.setAAD(additionalBuffer, {
      plaintextLength: encrypted.length
    });
    const headPart = decipher.update(encrypted);
    try {
      const finalPart = decipher.final();
      return finalPart.length > 0 ? Buffer.concat([headPart, finalPart]) : headPart;
    } catch (error) {
      err2(
        "decrypt failed",
        error,
        type,
        dumpBuffer2(data),
        header,
        this.summary
      );
      throw error;
    }
  }
};

// ../dtls/src/cipher/create.ts
var cipherSuites = {
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: 49195,
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: 49196,
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: 49199,
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: 49200,
  TLS_RSA_WITH_AES_128_GCM_SHA256: 156,
  TLS_RSA_WITH_AES_256_GCM_SHA384: 157,
  TLS_PSK_WITH_AES_128_GCM_SHA256: 168,
  TLS_PSK_WITH_AES_256_GCM_SHA384: 169,
  TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256: 53249,
  TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384: 53250,
  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: 52396,
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: 52393,
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: 52392,
  TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: 52395
};
var AEAD_AES_128_GCM = {
  K_LEN: 16,
  // Length of a key.
  N_MIN: 12,
  // Min nonce length.
  N_MAX: 12,
  // Max nonce length.
  P_MAX: 2 ** 36 - 31,
  // Max length of a plaintext.
  // Max safe int in js is 2 ** 53. So, use this value
  // instead of 2 ** 61 as described in rfc5116.
  A_MAX: 2 ** 53 - 1,
  // Max length of an additional data.
  C_MAX: 2 ** 36 - 15
  // Cipher text length.
};
var AEAD_AES_256_GCM = {
  K_LEN: 32,
  // Length of a key.
  N_MIN: 12,
  // Min nonce length.
  N_MAX: 12,
  // Max nonce length.
  P_MAX: 2 ** 36 - 31,
  // Max length of a plaintext.
  // Note: see above.
  A_MAX: 2 ** 53 - 1,
  // Max length of an additional data.
  C_MAX: 2 ** 36 - 15
  // Cipher text length.
};
var RSA_KEY_EXCHANGE = createRSAKeyExchange();
var ECDHE_RSA_KEY_EXCHANGE = createECDHERSAKeyExchange();
var ECDHE_ECDSA_KEY_EXCHANGE = createECDHEECDSAKeyExchange();
var PSK_KEY_EXCHANGE = createPSKKeyExchange();
var ECDHE_PSK_KEY_EXCHANGE = createECDHEPSKKeyExchange();
function createCipher(cipher) {
  switch (cipher) {
    case cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256:
      return createAEADCipher(
        cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256,
        "TLS_RSA_WITH_AES_128_GCM_SHA256",
        "aes-128-gcm",
        RSA_KEY_EXCHANGE,
        AEAD_AES_128_GCM
      );
    case cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384:
      return createAEADCipher(
        cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384,
        "TLS_RSA_WITH_AES_256_GCM_SHA384",
        "aes-256-gcm",
        RSA_KEY_EXCHANGE,
        AEAD_AES_256_GCM,
        "sha384"
      );
    case cipherSuites.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
        "aes-128-gcm",
        ECDHE_RSA_KEY_EXCHANGE,
        AEAD_AES_128_GCM
      );
    case cipherSuites.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
        "aes-256-gcm",
        ECDHE_RSA_KEY_EXCHANGE,
        AEAD_AES_256_GCM,
        "sha384"
      );
    case cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
        "aes-128-gcm",
        ECDHE_ECDSA_KEY_EXCHANGE,
        AEAD_AES_128_GCM
      );
    case cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
        "aes-256-gcm",
        ECDHE_ECDSA_KEY_EXCHANGE,
        AEAD_AES_256_GCM,
        "sha384"
      );
    case cipherSuites.TLS_PSK_WITH_AES_128_GCM_SHA256:
      return createAEADCipher(
        cipherSuites.TLS_PSK_WITH_AES_128_GCM_SHA256,
        "TLS_PSK_WITH_AES_128_GCM_SHA256",
        "aes-128-gcm",
        PSK_KEY_EXCHANGE,
        AEAD_AES_128_GCM,
        "sha256"
      );
    case cipherSuites.TLS_PSK_WITH_AES_256_GCM_SHA384:
      return createAEADCipher(
        cipherSuites.TLS_PSK_WITH_AES_256_GCM_SHA384,
        "TLS_PSK_WITH_AES_256_GCM_SHA384",
        "aes-256-gcm",
        PSK_KEY_EXCHANGE,
        AEAD_AES_256_GCM,
        "sha384"
      );
    case cipherSuites.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256,
        "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256",
        "aes-128-gcm",
        ECDHE_PSK_KEY_EXCHANGE,
        AEAD_AES_128_GCM,
        "sha256"
      );
    case cipherSuites.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384:
      return createAEADCipher(
        cipherSuites.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384,
        "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384",
        "aes-256-gcm",
        ECDHE_PSK_KEY_EXCHANGE,
        AEAD_AES_256_GCM,
        "sha384"
      );
    default:
      break;
  }
  return null;
}
function createAEADCipher(id, name, block, kx, constants, hash2 = "sha256") {
  const cipher = new AEADCipher();
  cipher.id = id;
  cipher.name = name;
  cipher.blockAlgorithm = block;
  cipher.kx = kx;
  cipher.hashAlgorithm = hash2;
  cipher.keyLength = constants.K_LEN;
  cipher.nonceLength = constants.N_MAX;
  cipher.nonceImplicitLength = 4;
  cipher.nonceExplicitLength = 8;
  cipher.ivLength = cipher.nonceImplicitLength;
  cipher.authTagLength = 16;
  return cipher;
}

// ../dtls/src/cipher/namedCurve.ts
import nacl2 from "tweetnacl";
function generateKeyPair(namedCurve) {
  switch (namedCurve) {
    case NamedCurveAlgorithm.secp256r1_23: {
      const { privateKey, publicKey } = p256Keypair();
      return {
        curve: namedCurve,
        privateKey,
        publicKey
      };
    }
    case NamedCurveAlgorithm.x25519_29: {
      const keys = nacl2.box.keyPair();
      return {
        curve: namedCurve,
        privateKey: Buffer.from(keys.secretKey.buffer),
        publicKey: Buffer.from(keys.publicKey.buffer)
      };
    }
    default:
      throw new Error();
  }
}

// ../dtls/src/handshake/extensions/extendedMasterSecret.ts
var ExtendedMasterSecret = class {
  static type = 23;
};

// ../dtls/src/handshake/extensions/renegotiationIndication.ts
import { decode as decode5, encode as encode6, types as types7 } from "@shinyoshiaki/binary-data";
var RenegotiationIndication = class _RenegotiationIndication {
  static type = 65281;
  static spec = {
    type: types7.uint16be,
    data: types7.uint8
  };
  type = _RenegotiationIndication.type;
  data = 0;
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static createEmpty() {
    const v = new _RenegotiationIndication();
    return v;
  }
  static deSerialize(buf) {
    return new _RenegotiationIndication(
      decode5(buf, _RenegotiationIndication.spec)
    );
  }
  serialize() {
    const res = encode6(this, _RenegotiationIndication.spec).slice();
    return Buffer.from(res);
  }
  get extension() {
    return {
      type: this.type,
      data: this.serialize().slice(2)
    };
  }
};

// ../dtls/src/handshake/extensions/useSrtp.ts
import { decode as decode6, encode as encode7, types as types8 } from "@shinyoshiaki/binary-data";
import times from "lodash/times.js";
var UseSRTP = class _UseSRTP {
  static type = 14;
  // 9.  IANA Considerations
  static spec = {
    type: types8.uint16be,
    data: types8.buffer(types8.uint16be)
  };
  type = _UseSRTP.type;
  data = Buffer.from([]);
  profiles = [];
  mki = Buffer.from([0]);
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static create(profiles, mki) {
    const v = new _UseSRTP({
      profiles,
      mki
    });
    return v;
  }
  static deSerialize(buf) {
    const useSrtp = new _UseSRTP(decode6(buf, _UseSRTP.spec));
    const profileLength = useSrtp.data.readUInt16BE();
    const profiles = times(profileLength / 2).map((i) => {
      return useSrtp.data.readUInt16BE(i * 2 + 2);
    });
    useSrtp.profiles = profiles;
    useSrtp.mki = useSrtp.data.slice(profileLength + 2);
    return useSrtp;
  }
  serialize() {
    const profileLength = Buffer.alloc(2);
    profileLength.writeUInt16BE(this.profiles.length * 2);
    const data = Buffer.concat([
      profileLength,
      ...this.profiles.map((profile) => {
        const buf = Buffer.alloc(2);
        buf.writeUInt16BE(profile);
        return buf;
      }),
      this.mki
    ]);
    this.data = data;
    const res = encode7(this, _UseSRTP.spec).slice();
    return Buffer.from(res);
  }
  static fromData(buf) {
    const head = Buffer.alloc(4);
    head.writeUInt16BE(_UseSRTP.type);
    head.writeUInt16BE(buf.length, 2);
    return _UseSRTP.deSerialize(Buffer.concat([head, buf]));
  }
  get extension() {
    return {
      type: this.type,
      data: this.serialize().slice(4)
    };
  }
};

// ../dtls/src/handshake/message/certificate.ts
import { decode as decode7, encode as encode8, types as types9 } from "@shinyoshiaki/binary-data";
var Certificate2 = class _Certificate {
  constructor(certificateList) {
    this.certificateList = certificateList;
  }
  msgType = 11 /* certificate_11 */;
  messageSeq;
  static spec = {
    certificateList: types9.array(ASN11Cert, types9.uint24be, "bytes")
  };
  static createEmpty() {
    return new _Certificate(void 0);
  }
  static deSerialize(buf) {
    return new _Certificate(
      ...Object.values(decode7(buf, _Certificate.spec))
    );
  }
  serialize() {
    const res = encode8(this, _Certificate.spec).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/handshake/message/changeCipherSpec.ts
import { decode as decode8, encode as encode9, types as types10 } from "@shinyoshiaki/binary-data";
var ChangeCipherSpec = class _ChangeCipherSpec {
  constructor(type = 1) {
    this.type = type;
  }
  static spec = {
    type: types10.uint8
  };
  static createEmpty() {
    return new _ChangeCipherSpec();
  }
  static deSerialize(buf) {
    return new _ChangeCipherSpec(
      ...Object.values(decode8(buf, _ChangeCipherSpec.spec))
    );
  }
  serialize() {
    const res = encode9(this, _ChangeCipherSpec.spec).slice();
    return Buffer.from(res);
  }
};

// ../dtls/src/handshake/message/client/certificateVerify.ts
import { decode as decode9, encode as encode10, types as types11 } from "@shinyoshiaki/binary-data";
var CertificateVerify = class _CertificateVerify {
  constructor(algorithm, signature) {
    this.algorithm = algorithm;
    this.signature = signature;
  }
  msgType = 15 /* certificate_verify_15 */;
  messageSeq;
  static spec = {
    algorithm: types11.uint16be,
    signature: types11.buffer(types11.uint16be)
  };
  static createEmpty() {
    return new _CertificateVerify(void 0, void 0);
  }
  static deSerialize(buf) {
    const res = decode9(buf, _CertificateVerify.spec);
    return new _CertificateVerify(
      ...Object.values(res)
    );
  }
  serialize() {
    const res = encode10(this, _CertificateVerify.spec).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/handshake/message/client/keyExchange.ts
import { decode as decode10, encode as encode11, types as types12 } from "@shinyoshiaki/binary-data";
var ClientKeyExchange = class _ClientKeyExchange {
  constructor(publicKey) {
    this.publicKey = publicKey;
  }
  msgType = 16 /* client_key_exchange_16 */;
  messageSeq;
  static spec = {
    publicKey: types12.buffer(types12.uint8)
  };
  static createEmpty() {
    return new _ClientKeyExchange(void 0);
  }
  static deSerialize(buf) {
    const res = decode10(buf, _ClientKeyExchange.spec);
    return new _ClientKeyExchange(
      ...Object.values(res)
    );
  }
  serialize() {
    const res = encode11(this, _ClientKeyExchange.spec).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/handshake/message/server/certificateRequest.ts
import { decode as decode11, encode as encode12, types as types13 } from "@shinyoshiaki/binary-data";
var ServerCertificateRequest = class _ServerCertificateRequest {
  constructor(certificateTypes2, signatures2, authorities) {
    this.certificateTypes = certificateTypes2;
    this.signatures = signatures2;
    this.authorities = authorities;
  }
  msgType = 13 /* certificate_request_13 */;
  messageSeq;
  static spec = {
    certificateTypes: types13.array(ClientCertificateType, types13.uint8, "bytes"),
    signatures: types13.array(SignatureHashAlgorithm, types13.uint16be, "bytes"),
    authorities: types13.array(DistinguishedName, types13.uint16be, "bytes")
  };
  static createEmpty() {
    return new _ServerCertificateRequest(
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    return new _ServerCertificateRequest(
      ...Object.values(decode11(buf, _ServerCertificateRequest.spec))
    );
  }
  serialize() {
    const res = encode12(this, _ServerCertificateRequest.spec).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/handshake/message/server/hello.ts
import { decode as decode12, encode as encode13, types as types14 } from "@shinyoshiaki/binary-data";
var ServerHello = class _ServerHello {
  constructor(serverVersion, random, sessionId, cipherSuite, compressionMethod, extensions) {
    this.serverVersion = serverVersion;
    this.random = random;
    this.sessionId = sessionId;
    this.cipherSuite = cipherSuite;
    this.compressionMethod = compressionMethod;
    this.extensions = extensions;
  }
  msgType = 2 /* server_hello_2 */;
  messageSeq;
  static spec = {
    serverVersion: ProtocolVersion,
    random: DtlsRandom.spec,
    sessionId: types14.buffer(types14.uint8),
    cipherSuite: types14.uint16be,
    compressionMethod: types14.uint8
  };
  static createEmpty() {
    return new _ServerHello(
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    const res = decode12(buf, _ServerHello.spec);
    const cls = new _ServerHello(
      ...Object.values(res)
    );
    const expect = cls.serialize();
    if (expect.length < buf.length) {
      return new _ServerHello(
        ...Object.values(
          decode12(buf, { ..._ServerHello.spec, extensions: ExtensionList })
        )
      );
    }
    return cls;
  }
  serialize() {
    const res = this.extensions === void 0 ? encode13(this, _ServerHello.spec).slice() : encode13(this, {
      ..._ServerHello.spec,
      extensions: ExtensionList
    }).slice();
    return Buffer.from(res);
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/handshake/message/server/helloDone.ts
import { decode as decode13, encode as encode14 } from "@shinyoshiaki/binary-data";

// ../dtls/src/handshake/message/server/keyExchange.ts
import { decode as decode14, types as types15 } from "@shinyoshiaki/binary-data";

// ../dtls/src/util/binary.ts
import { encode as encode15 } from "@shinyoshiaki/binary-data";
function encodeBuffer(obj, spec) {
  return Buffer.from(encode15(obj, spec).slice());
}

// ../dtls/src/handshake/message/server/keyExchange.ts
var ServerKeyExchange = class _ServerKeyExchange {
  constructor(ellipticCurveType, namedCurve, publicKeyLength, publicKey, hashAlgorithm, signatureAlgorithm, signatureLength, signature) {
    this.ellipticCurveType = ellipticCurveType;
    this.namedCurve = namedCurve;
    this.publicKeyLength = publicKeyLength;
    this.publicKey = publicKey;
    this.hashAlgorithm = hashAlgorithm;
    this.signatureAlgorithm = signatureAlgorithm;
    this.signatureLength = signatureLength;
    this.signature = signature;
  }
  msgType = 12 /* server_key_exchange_12 */;
  messageSeq;
  static spec = {
    ellipticCurveType: types15.uint8,
    namedCurve: types15.uint16be,
    publicKeyLength: types15.uint8,
    publicKey: types15.buffer((ctx) => ctx.current.publicKeyLength),
    hashAlgorithm: types15.uint8,
    signatureAlgorithm: types15.uint8,
    signatureLength: types15.uint16be,
    signature: types15.buffer((ctx) => ctx.current.signatureLength)
  };
  static createEmpty() {
    return new _ServerKeyExchange(
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0,
      void 0
    );
  }
  static deSerialize(buf) {
    const res = decode14(buf, _ServerKeyExchange.spec);
    return new _ServerKeyExchange(
      ...Object.values(res)
    );
  }
  serialize() {
    const res = encodeBuffer(this, _ServerKeyExchange.spec);
    return res;
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/flight/client/flight5.ts
var log11 = debug(
  "werift-dtls : packages/dtls/src/flight/client/flight5.ts : log"
);
var handlers = {};
handlers[2 /* server_hello_2 */] = ({ cipher, srtp, dtls }) => (message) => {
  log11(dtls.sessionId, "serverHello", message.cipherSuite);
  cipher.remoteRandom = DtlsRandom.from(message.random);
  cipher.cipherSuite = message.cipherSuite;
  log11(dtls.sessionId, "selected cipherSuite", cipher.cipherSuite);
  if (message.extensions) {
    message.extensions.forEach((extension) => {
      switch (extension.type) {
        case UseSRTP.type:
          {
            const useSrtp = UseSRTP.fromData(extension.data);
            const profile = SrtpContext2.findMatchingSRTPProfile(
              useSrtp.profiles,
              dtls.options.srtpProfiles || []
            );
            log11(dtls.sessionId, "selected srtp profile", profile);
            if (profile == void 0) return;
            srtp.srtpProfile = profile;
          }
          break;
        case ExtendedMasterSecret.type:
          dtls.remoteExtendedMasterSecret = true;
          break;
        case RenegotiationIndication.type:
          log11(dtls.sessionId, "RenegotiationIndication");
          break;
      }
    });
  }
};
handlers[11 /* certificate_11 */] = ({ cipher, dtls }) => (message) => {
  log11(dtls.sessionId, "handshake certificate", message);
  cipher.remoteCertificate = message.certificateList[0];
};
handlers[12 /* server_key_exchange_12 */] = ({ cipher, dtls }) => (message) => {
  if (!cipher.localRandom || !cipher.remoteRandom) throw new Error();
  log11(dtls.sessionId, "ServerKeyExchange", message);
  log11(dtls.sessionId, "selected curve", message.namedCurve);
  cipher.remoteKeyPair = {
    curve: message.namedCurve,
    publicKey: message.publicKey
  };
  cipher.localKeyPair = generateKeyPair(message.namedCurve);
};
handlers[13 /* certificate_request_13 */] = ({ dtls }) => (message) => {
  log11(dtls.sessionId, "certificate_request", message);
  dtls.requestedCertificateTypes = message.certificateTypes;
  dtls.requestedSignatureAlgorithms = message.signatures;
};
handlers[14 /* server_hello_done_14 */] = ({ dtls }) => (msg) => {
  log11(dtls.sessionId, "server_hello_done", msg);
};

// ../dtls/src/handshake/message/server/helloVerifyRequest.ts
import { decode as decode15, encode as encode16, types as types16 } from "@shinyoshiaki/binary-data";
var ServerHelloVerifyRequest = class _ServerHelloVerifyRequest {
  constructor(serverVersion, cookie) {
    this.serverVersion = serverVersion;
    this.cookie = cookie;
  }
  msgType = 3 /* hello_verify_request_3 */;
  messageSeq;
  static spec = {
    serverVersion: ProtocolVersion,
    cookie: types16.buffer(types16.uint8)
  };
  static createEmpty() {
    return new _ServerHelloVerifyRequest(void 0, void 0);
  }
  static deSerialize(buf) {
    return new _ServerHelloVerifyRequest(
      ...Object.values(decode15(buf, _ServerHelloVerifyRequest.spec))
    );
  }
  serialize() {
    const res = encode16(this, _ServerHelloVerifyRequest.spec).slice();
    return Buffer.from(res);
  }
  get version() {
    return {
      major: 255 - this.serverVersion.major,
      minor: 255 - this.serverVersion.minor
    };
  }
  toFragment() {
    const body = this.serialize();
    return new FragmentedHandshake(
      this.msgType,
      body.length,
      this.messageSeq,
      0,
      body.length,
      body
    );
  }
};

// ../dtls/src/socket.ts
import { decode as decode19, types as types20 } from "@shinyoshiaki/binary-data";

// ../dtls/src/context/dtls.ts
var log12 = debug("werift-dtls : packages/dtls/src/context/dtls.ts : log");

// ../dtls/src/handshake/extensions/ellipticCurves.ts
import { decode as decode16, encode as encode17, types as types17 } from "@shinyoshiaki/binary-data";
var EllipticCurves = class _EllipticCurves {
  static type = 10;
  static spec = {
    type: types17.uint16be,
    data: types17.array(types17.uint16be, types17.uint16be, "bytes")
  };
  type = _EllipticCurves.type;
  data = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static createEmpty() {
    return new _EllipticCurves();
  }
  static fromData(buf) {
    return new _EllipticCurves({
      type: _EllipticCurves.type,
      data: decode16(buf, _EllipticCurves.spec.data)
    });
  }
  static deSerialize(buf) {
    return new _EllipticCurves(decode16(buf, _EllipticCurves.spec));
  }
  serialize() {
    return Buffer.from(encode17(this, _EllipticCurves.spec).slice());
  }
  get extension() {
    return {
      type: this.type,
      data: this.serialize().slice(2)
    };
  }
};

// ../dtls/src/handshake/extensions/signature.ts
import { decode as decode17, encode as encode18, types as types18 } from "@shinyoshiaki/binary-data";
var Signature = class _Signature {
  static type = 13;
  static spec = {
    type: types18.uint16be,
    data: types18.array(
      { hash: types18.uint8, signature: types18.uint8 },
      types18.uint16be,
      "bytes"
    )
  };
  type = _Signature.type;
  data = [];
  constructor(props = {}) {
    Object.assign(this, props);
  }
  static createEmpty() {
    const v = new _Signature();
    return v;
  }
  static deSerialize(buf) {
    return new _Signature(decode17(buf, _Signature.spec));
  }
  serialize() {
    const res = encode18(this, _Signature.spec).slice();
    return Buffer.from(res);
  }
  static fromData(buf) {
    const type = Buffer.alloc(2);
    type.writeUInt16BE(_Signature.type);
    return _Signature.deSerialize(Buffer.concat([type, buf]));
  }
  get extension() {
    return {
      type: this.type,
      data: this.serialize().slice(2)
    };
  }
};

// ../dtls/src/handshake/message/alert.ts
import { decode as decode18, encode as encode19, types as types19 } from "@shinyoshiaki/binary-data";
var Alert = class _Alert {
  constructor(level, description) {
    this.level = level;
    this.description = description;
  }
  static spec = {
    level: types19.uint8,
    description: types19.uint8
  };
  static deSerialize(buf) {
    return new _Alert(
      ...Object.values(decode18(buf, _Alert.spec))
    );
  }
  serialize() {
    const res = encode19(this, _Alert.spec).slice();
    return Buffer.from(res);
  }
};

// ../dtls/src/record/receive.ts
var log13 = debug("werift-dtls : packages/dtls/record/receive.ts : log");
var err3 = debug("werift-dtls : packages/dtls/record/receive.ts : err");

// ../dtls/src/socket.ts
var log14 = debug("werift-dtls : packages/dtls/src/socket.ts : log");
var err4 = debug("werift-dtls : packages/dtls/src/socket.ts : err");

// ../dtls/src/client.ts
var log15 = debug("werift-dtls : packages/dtls/src/client.ts : log");

// ../dtls/src/flight/server/flight2.ts
var log16 = debug("werift-dtls : packages/dtls/flight/server/flight2.ts : log");

// ../dtls/src/flight/server/flight4.ts
var log17 = debug("werift-dtls : packages/dtls/flight/server/flight4.ts : log");

// ../dtls/src/flight/server/flight6.ts
var log18 = debug("werift-dtls : packages/dtls/flight/server/flight6.ts");
var handlers2 = {};
handlers2[16 /* client_key_exchange_16 */] = ({ cipher, dtls }) => (message) => {
  cipher.remoteKeyPair = {
    curve: cipher.namedCurve,
    publicKey: message.publicKey
  };
  if (!cipher.remoteKeyPair.publicKey || !cipher.localKeyPair || !cipher.remoteRandom || !cipher.localRandom)
    throw new Error("not exist");
  const preMasterSecret = prfPreMasterSecret(
    cipher.remoteKeyPair.publicKey,
    cipher.localKeyPair.privateKey,
    cipher.localKeyPair.curve
  );
  log18(
    dtls.sessionId,
    "extendedMasterSecret",
    dtls.options.extendedMasterSecret,
    dtls.remoteExtendedMasterSecret
  );
  const handshakes = Buffer.concat(
    dtls.sortedHandshakeCache.map((v) => v.serialize())
  );
  cipher.masterSecret = dtls.options.extendedMasterSecret && dtls.remoteExtendedMasterSecret ? prfExtendedMasterSecret(preMasterSecret, handshakes) : prfMasterSecret(
    preMasterSecret,
    cipher.remoteRandom.serialize(),
    cipher.localRandom.serialize()
  );
  cipher.cipher = createCipher(cipher.cipherSuite);
  cipher.cipher.init(
    cipher.masterSecret,
    cipher.localRandom.serialize(),
    cipher.remoteRandom.serialize()
  );
  log18(dtls.sessionId, "setup cipher", cipher.cipher.summary);
};
handlers2[20 /* finished_20 */] = ({ dtls }) => (message) => {
  log18(dtls.sessionId, "finished", message);
};

// ../dtls/src/server.ts
var log19 = debug("werift-dtls : packages/dtls/src/server.ts : log");

// ../ice/src/stun/const.ts
var COOKIE = 554869826;
var IPV4_PROTOCOL = 1;
var IPV6_PROTOCOL = 2;

// ../ice/src/stun/message.ts
import crc32 from "buffer-crc32";

// ../ice/src/stun/attributes.ts
import * as Int64 from "int64-buffer";
import nodeIp from "ip";
import range from "lodash/range.js";
function packAddress(value) {
  const [address] = value;
  const protocol = nodeIp.isV4Format(address) ? IPV4_PROTOCOL : IPV6_PROTOCOL;
  const buffer2 = Buffer.alloc(4);
  buffer2.writeUInt8(0, 0);
  buffer2.writeUInt8(protocol, 1);
  buffer2.writeUInt16BE(value[1], 2);
  return Buffer.concat([buffer2, nodeIp.toBuffer(address)]);
}
function unpackErrorCode(data) {
  if (data.length < 4) throw new Error("STUN error code is less than 4 bytes");
  const codeHigh = data.readUInt8(2);
  const codeLow = data.readUInt8(3);
  const reason = data.slice(4).toString("utf8");
  return [codeHigh * 100 + codeLow, reason];
}
function unpackAddress(data) {
  if (data.length < 4)
    throw new Error("STUN address length is less than 4 bytes");
  const protocol = data.readUInt8(1);
  const port = data.readUInt16BE(2);
  const address = data.slice(4);
  switch (protocol) {
    case IPV4_PROTOCOL:
      if (address.length != 4)
        throw new Error(`STUN address has invalid length for IPv4`);
      return [nodeIp.toString(address), port];
    case IPV6_PROTOCOL:
      if (address.length != 16)
        throw new Error("STUN address has invalid length for IPv6");
      return [nodeIp.toString(address), port];
    default:
      throw new Error("STUN address has unknown protocol");
  }
}
var cookieBuffer = Buffer.alloc(6);
cookieBuffer.writeUInt16BE(COOKIE >> 16, 0);
cookieBuffer.writeUInt32BE(COOKIE, 2);
function xorAddress(data, transactionId) {
  const xPad = [...cookieBuffer, ...transactionId];
  let xData = data.slice(0, 2);
  for (const i of range(2, data.length)) {
    const num = data[i] ^ xPad[i - 2];
    const buf = Buffer.alloc(1);
    buf.writeUIntBE(num, 0, 1);
    xData = Buffer.concat([xData, buf]);
  }
  return xData;
}
function unpackXorAddress(data, transactionId) {
  return unpackAddress(xorAddress(data, transactionId));
}
function packErrorCode(value) {
  const buffer2 = Buffer.alloc(4);
  buffer2.writeUInt16BE(0, 0);
  buffer2.writeUInt8(Math.floor(value[0] / 100), 2);
  buffer2.writeUInt8(value[0] % 100, 3);
  const encode20 = Buffer.from(value[1], "utf8");
  return Buffer.concat([buffer2, encode20]);
}
function packXorAddress(value, transactionId) {
  return xorAddress(packAddress(value), transactionId);
}
var packUnsigned = (value) => {
  const buffer2 = Buffer.alloc(4);
  buffer2.writeUInt32BE(value, 0);
  return buffer2;
};
var unpackUnsigned = (data) => data.readUInt32BE(0);
var packUnsignedShort = (value) => {
  const buffer2 = Buffer.alloc(4);
  buffer2.writeUInt16BE(value, 0);
  return buffer2;
};
var unpackUnsignedShort = (data) => data.readUInt16BE(0);
var packUnsigned64 = (value) => {
  return new Int64.Int64BE(value.toString()).toBuffer();
};
var unpackUnsigned64 = (data) => {
  const int2 = new Int64.Int64BE(data);
  return BigInt(int2.toString());
};
var packString = (value) => Buffer.from(value, "utf8");
var unpackString = (data) => data.toString("utf8");
var packBytes = (value) => value;
var unpackBytes = (data) => data;
var packNone = (value) => Buffer.from([]);
var unpackNone = (data) => null;
var ATTRIBUTES = [
  [1, "MAPPED-ADDRESS", packAddress, unpackAddress],
  [3, "CHANGE-REQUEST", packUnsigned, unpackUnsigned],
  [4, "SOURCE-ADDRESS", packAddress, unpackAddress],
  [5, "CHANGED-ADDRESS", packAddress, unpackAddress],
  [6, "USERNAME", packString, unpackString],
  [8, "MESSAGE-INTEGRITY", packBytes, unpackBytes],
  [9, "ERROR-CODE", packErrorCode, unpackErrorCode],
  [12, "CHANNEL-NUMBER", packUnsignedShort, unpackUnsignedShort],
  [13, "LIFETIME", packUnsigned, unpackUnsigned],
  [18, "XOR-PEER-ADDRESS", packXorAddress, unpackXorAddress],
  [19, "DATA", packBytes, unpackBytes],
  [20, "REALM", packString, unpackString],
  [21, "NONCE", packBytes, unpackBytes],
  [22, "XOR-RELAYED-ADDRESS", packXorAddress, unpackXorAddress],
  [25, "REQUESTED-TRANSPORT", packUnsigned, unpackUnsigned],
  [32, "XOR-MAPPED-ADDRESS", packXorAddress, unpackXorAddress],
  [36, "PRIORITY", packUnsigned, unpackUnsigned],
  [37, "USE-CANDIDATE", packNone, unpackNone],
  [32802, "SOFTWARE", packString, unpackString],
  [32808, "FINGERPRINT", packUnsigned, unpackUnsigned],
  [32809, "ICE-CONTROLLED", packUnsigned64, unpackUnsigned64],
  [32810, "ICE-CONTROLLING", packUnsigned64, unpackUnsigned64],
  [32811, "RESPONSE-ORIGIN", packAddress, unpackAddress],
  [32812, "OTHER-ADDRESS", packAddress, unpackAddress]
];
var ATTRIBUTES_BY_TYPE = ATTRIBUTES.reduce(
  (acc, cur) => {
    acc[cur[0]] = cur;
    return acc;
  },
  {}
);
var ATTRIBUTES_BY_NAME = ATTRIBUTES.reduce(
  (acc, cur) => {
    acc[cur[1]] = cur;
    return acc;
  },
  {}
);

// ../ice/src/stun/transaction.ts
var log20 = debug("werift-ice:packages/ice/src/stun/transaction.ts");

// ../ice/src/stun/protocol.ts
var log21 = debug("werift-ice : packages/ice/src/stun/protocol.ts");

// ../ice/src/turn/protocol.ts
import { jspack as jspack3 } from "@shinyoshiaki/jspack";
var log22 = debug("werift-ice:packages/ice/src/turn/protocol.ts");

// ../ice/src/candidate.ts
import range2 from "lodash/range.js";

// ../ice/src/ice.ts
import * as Int642 from "int64-buffer";
import isEqual from "lodash/isEqual.js";

// ../ice/src/dns/lookup.ts
import mdns from "multicast-dns";

// ../ice/src/iceBase.ts
var log23 = debug("werift-ice : packages/ice/src/ice.ts : log");

// ../ice/src/utils.ts
import nodeIp2 from "ip";
var logger = debug("werift-ice : packages/ice/src/utils.ts");

// ../ice/src/ice.ts
var log24 = debug("werift-ice : packages/ice/src/ice.ts : log");

// src/helper.ts
import EventEmitter from "events";
var EventTarget2 = class extends EventEmitter {
  addEventListener = (type, listener) => {
    this.addListener(type, listener);
  };
  removeEventListener = (type, listener) => {
    this.removeListener(type, listener);
  };
};

// src/dataChannel.ts
var log25 = debug("werift:packages/webrtc/src/dataChannel.ts");

// src/media/extension/rtcpFeedback.ts
var useNACK = () => ({ type: "nack" });
var usePLI = () => ({ type: "nack", parameter: "pli" });
var useREMB = () => ({ type: "goog-remb" });

// src/media/parameters.ts
var RTCRtpCodecParameters = class {
  /**
   * When specifying a codec with a fixed payloadType such as PCMU,
   * it is necessary to set the correct PayloadType in RTCRtpCodecParameters in advance.
   */
  payloadType;
  mimeType;
  clockRate;
  channels;
  rtcpFeedback = [];
  parameters;
  direction = "all";
  constructor(props) {
    Object.assign(this, props);
  }
  get name() {
    return this.mimeType.split("/")[1];
  }
  get contentType() {
    return this.mimeType.split("/")[0];
  }
  get str() {
    let s = `${this.name}/${this.clockRate}`;
    if (this.channels === 2) s += "/2";
    return s;
  }
};

// src/media/codec.ts
var useH264 = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "video/h264",
  clockRate: 9e4,
  rtcpFeedback: [useNACK(), usePLI(), useREMB()],
  parameters: "profile-level-id=42e01f;packetization-mode=1;level-asymmetry-allowed=1",
  ...props
});
var useVP8 = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "video/VP8",
  clockRate: 9e4,
  rtcpFeedback: [useNACK(), usePLI(), useREMB()],
  ...props
});
var useVP9 = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "video/VP9",
  clockRate: 9e4,
  rtcpFeedback: [useNACK(), usePLI(), useREMB()],
  ...props
});
var useAV1X = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "video/AV1X",
  clockRate: 9e4,
  rtcpFeedback: [useNACK(), usePLI(), useREMB()],
  ...props
});
var useOPUS = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "audio/OPUS",
  clockRate: 48e3,
  channels: 2,
  ...props
});
var usePCMU = (props = {}) => new RTCRtpCodecParameters({
  mimeType: "audio/PCMU",
  clockRate: 8e3,
  channels: 1,
  payloadType: 0,
  ...props
});
var supportedCodecs = [
  useAV1X(),
  useVP9(),
  useVP8(),
  useH264(),
  useOPUS(),
  usePCMU()
].map((codec) => codec.mimeType);
var supportedVideoCodecs = supportedCodecs.filter(
  (codec) => codec.toLowerCase().startsWith("video/")
);
var supportedAudioCodecs = supportedCodecs.filter(
  (codec) => codec.toLowerCase().startsWith("audio/")
);

// src/media/rtpReceiver.ts
import { v4 as uuid3 } from "uuid";

// src/utils.ts
import mergeWith from "lodash/mergeWith.js";
import now from "nano-time";

// src/media/rtpTransceiver.ts
import * as uuid from "uuid";

// src/const.ts
var DTLS_ROLE_SETUP = {
  auto: "actpass",
  client: "active",
  server: "passive"
};
var DTLS_SETUP_ROLE = Object.keys(
  DTLS_ROLE_SETUP
).reduce((acc, cur) => {
  const key = DTLS_ROLE_SETUP[cur];
  acc[key] = cur;
  return acc;
}, {});
var SRTP_PROFILE = {
  SRTP_AES128_CM_HMAC_SHA1_80: ProtectionProfileAes128CmHmacSha1_80,
  SRTP_AEAD_AES_128_GCM: ProtectionProfileAeadAes128Gcm
};

// src/media/track.ts
import { v4 as v42 } from "uuid";
var MediaStreamTrack = class extends EventTarget2 {
  uuid = v42();
  /**MediaStream ID*/
  streamId;
  remote = false;
  label;
  kind;
  id;
  /**mediaSsrc */
  ssrc;
  rid;
  header;
  codec;
  /**todo impl */
  enabled = true;
  onReceiveRtp = new Event();
  onReceiveRtcp = new Event();
  onSourceChanged = new Event();
  stopped = false;
  muted = true;
  constructor(props) {
    super();
    Object.assign(this, props);
    this.onReceiveRtp.subscribe((rtp) => {
      this.muted = false;
      this.header = rtp.header;
    });
    this.label = `${this.remote ? "remote" : "local"} ${this.kind}`;
  }
  stop = () => {
    this.stopped = true;
    this.muted = true;
    this.onReceiveRtp.complete();
    this.emit("ended");
  };
  writeRtp = (rtp) => {
    if (this.remote) {
      throw new Error("this is remoteTrack");
    }
    if (this.stopped) {
      return;
    }
    const packet = Buffer.isBuffer(rtp) ? RtpPacket.deSerialize(rtp) : rtp;
    packet.header.payloadType = this.codec?.payloadType ?? packet.header.payloadType;
    this.onReceiveRtp.execute(packet);
  };
};
var MediaStream = class {
  id;
  tracks = [];
  constructor(props) {
    if (Array.isArray(props)) {
      this.tracks = props;
    } else {
      Object.assign(this, props);
    }
    this.id ??= v42();
  }
  addTrack(track) {
    track.streamId = this.id;
    this.tracks.push(track);
  }
  getTracks() {
    return this.tracks;
  }
  getAudioTracks() {
    return this.tracks.filter((track) => track.kind === "audio");
  }
  getVideoTracks() {
    return this.tracks.filter((track) => track.kind === "video");
  }
};

// src/utils.ts
var log26 = debug("werift:packages/webrtc/src/utils.ts");
var createSelfSignedCertificate = CipherContext.createSelfSignedCertificateWithKey;

// src/media/receiver/nack.ts
import range3 from "lodash/range.js";
var log27 = debug("werift:packages/webrtc/src/media/receiver/nack.ts");
var LOST_SIZE2 = 30 * 5;

// src/media/receiver/receiverTwcc.ts
var log28 = debug("werift:packages/webrtc/media/receiver/receiverTwcc");

// src/sdp.ts
import * as Int643 from "int64-buffer";

// src/transport/dtls.ts
import { Certificate as Certificate3, PrivateKey as PrivateKey2 } from "@fidm/x509";
import { v4 as v43 } from "uuid";
var log29 = debug("werift:packages/webrtc/src/transport/dtls.ts");

// src/transport/ice.ts
import { v4 as v44 } from "uuid";
var log30 = debug("werift:packages/webrtc/src/transport/ice.ts");

// src/transport/sctp.ts
import { jspack as jspack6 } from "@shinyoshiaki/jspack";
import * as uuid2 from "uuid";

// ../sctp/src/sctp.ts
import { jspack as jspack5 } from "@shinyoshiaki/jspack";
import range5 from "lodash/range.js";

// ../sctp/src/chunk.ts
import crc32c from "turbo-crc32/crc32c.js";
var Chunk = class _Chunk {
  constructor(flags = 0, _body = Buffer.from("")) {
    this.flags = flags;
    this._body = _body;
  }
  get body() {
    return this._body;
  }
  set body(value) {
    this._body = value;
  }
  static type = -1;
  get type() {
    return _Chunk.type;
  }
  get bytes() {
    if (!this.body) throw new Error();
    const header = Buffer.alloc(4);
    header.writeUInt8(this.type, 0);
    header.writeUInt8(this.flags, 1);
    header.writeUInt16BE(this.body.length + 4, 2);
    const data = Buffer.concat([
      header,
      this.body,
      ...[...Array(padL(this.body.length))].map(() => Buffer.from("\0"))
    ]);
    return data;
  }
};
var BaseInitChunk = class extends Chunk {
  constructor(flags = 0, body) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.initiateTag = body.readUInt32BE(0);
      this.advertisedRwnd = body.readUInt32BE(4);
      this.outboundStreams = body.readUInt16BE(8);
      this.inboundStreams = body.readUInt16BE(10);
      this.initialTsn = body.readUInt32BE(12);
      this.params = decodeParams(body.slice(16));
    } else {
      this.initiateTag = 0;
      this.advertisedRwnd = 0;
      this.outboundStreams = 0;
      this.inboundStreams = 0;
      this.initialTsn = 0;
      this.params = [];
    }
  }
  initiateTag;
  advertisedRwnd;
  outboundStreams;
  inboundStreams;
  initialTsn;
  params;
  get body() {
    const body = Buffer.alloc(16);
    body.writeUInt32BE(this.initiateTag, 0);
    body.writeUInt32BE(this.advertisedRwnd, 4);
    body.writeUInt16BE(this.outboundStreams, 8);
    body.writeUInt16BE(this.inboundStreams, 10);
    body.writeUInt32BE(this.initialTsn, 12);
    return Buffer.concat([body, encodeParams(this.params)]);
  }
};
var InitChunk = class _InitChunk extends BaseInitChunk {
  static type = 1;
  get type() {
    return _InitChunk.type;
  }
};
var InitAckChunk = class _InitAckChunk extends BaseInitChunk {
  static type = 2;
  get type() {
    return _InitAckChunk.type;
  }
};
var ForwardTsnChunk = class _ForwardTsnChunk extends Chunk {
  constructor(flags = 0, body) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.cumulativeTsn = body.readUInt32BE(0);
      let pos = 4;
      while (pos < body.length) {
        this.streams.push([body.readUInt16BE(pos), body.readUInt16BE(pos + 2)]);
        pos += 4;
      }
    } else {
      this.cumulativeTsn = 0;
    }
  }
  static type = 192;
  streams = [];
  cumulativeTsn;
  get type() {
    return _ForwardTsnChunk.type;
  }
  set body(_) {
  }
  get body() {
    const body = Buffer.alloc(4);
    body.writeUInt32BE(this.cumulativeTsn, 0);
    return Buffer.concat([
      body,
      ...this.streams.map(([id, seq]) => {
        const streamBuffer = Buffer.alloc(4);
        streamBuffer.writeUInt16BE(id, 0);
        streamBuffer.writeUInt16BE(seq, 2);
        return streamBuffer;
      })
    ]);
  }
};
var DataChunk = class _DataChunk extends Chunk {
  constructor(flags = 0, body) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.tsn = body.readUInt32BE(0);
      this.streamId = body.readUInt16BE(4);
      this.streamSeqNum = body.readUInt16BE(6);
      this.protocol = body.readUInt32BE(8);
      this.userData = body.slice(12);
    }
  }
  static type = 0;
  get type() {
    return _DataChunk.type;
  }
  tsn = 0;
  streamId = 0;
  streamSeqNum = 0;
  protocol = 0;
  userData = Buffer.from("");
  abandoned = false;
  acked = false;
  misses = 0;
  retransmit = false;
  sentCount = 0;
  bookSize = 0;
  expiry;
  maxRetransmits;
  sentTime;
  get bytes() {
    const length = 16 + this.userData.length;
    const header = Buffer.alloc(16);
    header.writeUInt8(this.type, 0);
    header.writeUInt8(this.flags, 1);
    header.writeUInt16BE(length, 2);
    header.writeUInt32BE(this.tsn, 4);
    header.writeUInt16BE(this.streamId, 8);
    header.writeUInt16BE(this.streamSeqNum, 10);
    header.writeUInt32BE(this.protocol, 12);
    let data = Buffer.concat([header, this.userData]);
    if (length % 4) {
      data = Buffer.concat([
        data,
        ...[...Array(padL(length))].map(() => Buffer.from("\0"))
      ]);
    }
    return data;
  }
};
var CookieEchoChunk = class _CookieEchoChunk extends Chunk {
  static type = 10;
  get type() {
    return _CookieEchoChunk.type;
  }
};
var CookieAckChunk = class _CookieAckChunk extends Chunk {
  static type = 11;
  get type() {
    return _CookieAckChunk.type;
  }
};
var BaseParamsChunk = class extends Chunk {
  constructor(flags = 0, body = void 0) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.params = decodeParams(body);
    }
  }
  params = [];
  get body() {
    return encodeParams(this.params);
  }
};
var AbortChunk = class _AbortChunk extends BaseParamsChunk {
  static type = 6;
  get type() {
    return _AbortChunk.type;
  }
};
var ErrorChunk = class _ErrorChunk extends BaseParamsChunk {
  static type = 9;
  static CODE = {
    InvalidStreamIdentifier: 1,
    MissingMandatoryParameter: 2,
    StaleCookieError: 3,
    OutofResource: 4,
    UnresolvableAddress: 5,
    UnrecognizedChunkType: 6,
    InvalidMandatoryParameter: 7,
    UnrecognizedParameters: 8,
    NoUserData: 9,
    CookieReceivedWhileShuttingDown: 10,
    RestartofanAssociationwithNewAddresses: 11,
    UserInitiatedAbort: 12,
    ProtocolViolation: 13
  };
  get type() {
    return _ErrorChunk.type;
  }
  get descriptions() {
    return this.params.map(([code, body]) => {
      const name = (Object.entries(_ErrorChunk.CODE).find(
        ([, num]) => num === code
      ) || [])[0];
      return { name, body };
    });
  }
};
var HeartbeatChunk = class _HeartbeatChunk extends BaseParamsChunk {
  static type = 4;
  get type() {
    return _HeartbeatChunk.type;
  }
};
var HeartbeatAckChunk = class _HeartbeatAckChunk extends BaseParamsChunk {
  static type = 5;
  get type() {
    return _HeartbeatAckChunk.type;
  }
};
var ReconfigChunk = class _ReconfigChunk extends BaseParamsChunk {
  static type = 130;
  get type() {
    return _ReconfigChunk.type;
  }
};
var SackChunk = class _SackChunk extends Chunk {
  constructor(flags = 0, body) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.cumulativeTsn = body.readUInt32BE(0);
      this.advertisedRwnd = body.readUInt32BE(4);
      const nbGaps = body.readUInt16BE(8);
      const nbDuplicates = body.readUInt16BE(10);
      let pos = 12;
      [...Array(nbGaps)].forEach(() => {
        this.gaps.push([body.readUInt16BE(pos), body.readUInt16BE(pos + 2)]);
        pos += 4;
      });
      [...Array(nbDuplicates)].forEach(() => {
        this.duplicates.push(body.readUInt32BE(pos));
        pos += 4;
      });
    }
  }
  static type = 3;
  get type() {
    return _SackChunk.type;
  }
  gaps = [];
  duplicates = [];
  cumulativeTsn = 0;
  advertisedRwnd = 0;
  get bytes() {
    const length = 16 + 4 * (this.gaps.length + this.duplicates.length);
    const header = Buffer.alloc(16);
    header.writeUInt8(this.type, 0);
    header.writeUInt8(this.flags, 1);
    header.writeUInt16BE(length, 2);
    header.writeUInt32BE(this.cumulativeTsn, 4);
    header.writeUInt32BE(this.advertisedRwnd, 8);
    header.writeUInt16BE(this.gaps.length, 12);
    header.writeUInt16BE(this.duplicates.length, 14);
    let data = Buffer.concat([
      header,
      ...this.gaps.map((gap) => {
        const gapBuffer = Buffer.alloc(4);
        gapBuffer.writeUInt16BE(gap[0], 0);
        gapBuffer.writeUInt16BE(gap[1], 2);
        return gapBuffer;
      })
    ]);
    data = Buffer.concat([
      data,
      ...this.duplicates.map((tsn) => {
        const tsnBuffer = Buffer.alloc(4);
        tsnBuffer.writeUInt32BE(tsn, 0);
        return tsnBuffer;
      })
    ]);
    return data;
  }
};
var ShutdownChunk = class _ShutdownChunk extends Chunk {
  constructor(flags = 0, body) {
    super(flags, body);
    this.flags = flags;
    if (body) {
      this.cumulativeTsn = body.readUInt32BE(0);
    }
  }
  static type = 7;
  get type() {
    return _ShutdownChunk.type;
  }
  cumulativeTsn = 0;
  get body() {
    const body = Buffer.alloc(4);
    body.writeUInt32BE(this.cumulativeTsn, 0);
    return body;
  }
};
var ShutdownAckChunk = class _ShutdownAckChunk extends Chunk {
  static type = 8;
  get type() {
    return _ShutdownAckChunk.type;
  }
};
var ShutdownCompleteChunk = class _ShutdownCompleteChunk extends Chunk {
  static type = 14;
  get type() {
    return _ShutdownCompleteChunk.type;
  }
};
var CHUNK_CLASSES = [
  DataChunk,
  InitChunk,
  InitAckChunk,
  SackChunk,
  HeartbeatChunk,
  HeartbeatAckChunk,
  AbortChunk,
  ShutdownChunk,
  ShutdownAckChunk,
  ErrorChunk,
  CookieEchoChunk,
  CookieAckChunk,
  ShutdownCompleteChunk,
  ReconfigChunk,
  ForwardTsnChunk
];
var CHUNK_BY_TYPE = CHUNK_CLASSES.reduce(
  (acc, cur) => {
    acc[cur.type] = cur;
    return acc;
  },
  {}
);
function padL(l) {
  const m = l % 4;
  return m ? 4 - m : 0;
}
function encodeParams(params) {
  let body = Buffer.from("");
  let padding = Buffer.from("");
  params.forEach(([type, value]) => {
    const length = value.length + 4;
    const paramHeader = Buffer.alloc(4);
    paramHeader.writeUInt16BE(type, 0);
    paramHeader.writeUInt16BE(length, 2);
    body = Buffer.concat([body, padding, paramHeader, value]);
    padding = Buffer.concat(
      [...Array(padL(length))].map(() => Buffer.from("\0"))
    );
  });
  return body;
}
function decodeParams(body) {
  const params = [];
  let pos = 0;
  while (pos <= body.length - 4) {
    const type = body.readUInt16BE(pos);
    const length = body.readUInt16BE(pos + 2);
    params.push([type, body.slice(pos + 4, pos + length)]);
    pos += length + padL(length);
  }
  return params;
}

// ../sctp/src/param.ts
import { jspack as jspack4 } from "@shinyoshiaki/jspack";
import range4 from "lodash/range.js";

// ../sctp/src/sctp.ts
var log31 = debug("werift/sctp/sctp");
var SCTP_RTO_ALPHA = 1 / 8;
var SCTP_RTO_BETA = 1 / 4;
var SCTP_TSN_MODULO = 2 ** 32;

// src/transport/sctp.ts
var log32 = debug("werift:packages/webrtc/src/transport/sctp.ts");

// src/media/rtpReceiver.ts
var log33 = debug("werift:packages/webrtc/src/media/rtpReceiver.ts");

// src/media/router.ts
var log34 = debug("werift:packages/webrtc/src/media/router.ts");

// src/media/rtpSender.ts
import { jspack as jspack7 } from "@shinyoshiaki/jspack";
import * as uuid4 from "uuid";
var log35 = debug("werift:packages/webrtc/src/media/rtpSender.ts");

// src/peerConnection.ts
import cloneDeep from "lodash/cloneDeep.js";
import * as uuid5 from "uuid";

// src/sctpManager.ts
var log36 = debug("werift:packages/webrtc/src/transport/sctpManager.ts");

// src/secureTransportManager.ts
var log37 = debug(
  "werift:packages/webrtc/src/transport/secureTransportManager.ts"
);
var srtpProfiles = [
  SRTP_PROFILE.SRTP_AEAD_AES_128_GCM,
  // prefer
  SRTP_PROFILE.SRTP_AES128_CM_HMAC_SHA1_80
];

// src/peerConnection.ts
var log38 = debug("werift:packages/webrtc/src/peerConnection.ts");
var defaultPeerConfig = {
  codecs: {
    audio: [useOPUS(), usePCMU()],
    video: [useVP8()]
  },
  headerExtensions: {
    audio: [],
    video: []
  },
  iceTransportPolicy: "all",
  iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
  icePortRange: void 0,
  iceInterfaceAddresses: void 0,
  iceAdditionalHostAddresses: void 0,
  iceUseIpv4: true,
  iceUseIpv6: true,
  iceFilterStunResponse: void 0,
  iceFilterCandidatePair: void 0,
  icePasswordPrefix: void 0,
  iceUseLinkLocalAddress: void 0,
  dtls: {},
  bundlePolicy: "max-compat",
  debug: {},
  midSuffix: false,
  forceTurnTCP: false
};

// src/transceiverManager.ts
var log39 = debug("werift:packages/webrtc/src/media/rtpTransceiverManager.ts");

// src/nonstandard/navigator.ts
var Navigator = class {
  mediaDevices;
  constructor(props = {}) {
    this.mediaDevices = new MediaDevices(props);
  }
};
var MediaDevices = class extends EventTarget {
  constructor(props) {
    super();
    this.props = props;
    this.video = props.video;
    this.audio = props.audio;
  }
  video;
  audio;
  getUserMedia = async (constraints) => {
    const video = constraints.video ? new MediaStreamTrack({ kind: "video" }) : void 0;
    if (video) {
      this.video?.onReceiveRtp.subscribe((rtp) => {
        const cloned = rtp.clone();
        cloned.header.ssrc = jspack8.Unpack("!L", randomBytes4(4))[0];
        video.onReceiveRtp.execute(cloned);
      });
    }
    const audio = constraints.audio ? new MediaStreamTrack({ kind: "audio" }) : void 0;
    if (audio) {
      this.audio?.onReceiveRtp.subscribe((rtp) => {
        const cloned = rtp.clone();
        cloned.header.ssrc = jspack8.Unpack("!L", randomBytes4(4))[0];
        audio.onReceiveRtp.execute(cloned);
      });
    }
    if (constraints.video && constraints.audio) {
      return new MediaStream([video, audio]);
    } else if (constraints.audio) {
      return new MediaStream([audio]);
    } else if (constraints.video) {
      return new MediaStream([video]);
    }
    throw new Error("Not implemented");
  };
  getDisplayMedia = this.getUserMedia;
  getUdpMedia = ({
    port,
    codec
  }) => {
    const kind = codec.mimeType.toLowerCase().includes("video") ? "video" : "audio";
    const track = new MediaStreamTrack({
      kind,
      codec: new RTCRtpCodecParameters(codec)
    });
    const udp = createSocket3("udp4");
    udp.bind(port);
    udp.on("message", (data) => {
      track.writeRtp(data);
    });
    const disposer = () => {
      udp.close();
    };
    return { track, disposer };
  };
};
var navigator = new Navigator();

// src/nonstandard/recorder/writer/webm.ts
import { unlink } from "fs/promises";

// src/nonstandard/recorder/writer/index.ts
var MediaWriter = class {
  constructor(props) {
    this.props = props;
  }
  async start(tracks) {
  }
  async stop() {
  }
};

// src/nonstandard/recorder/writer/webm.ts
var sourcePath = "packages/webrtc/src/nonstandard/recorder/writer/webm.ts";
var WebmFactory = class extends MediaWriter {
  rtpSources = [];
  onEol = new Event();
  ended = false;
  unSubscribers = new EventDisposer();
  async start(tracks) {
    if (this.props.path) {
      await unlink(this.props.path).catch((e) => e);
    }
    const inputTracks = tracks.map(
      (track, i) => {
        const trackNumber = i + 1;
        const payloadType = track.codec.payloadType;
        if (track.kind === "video") {
          const codec = (() => {
            switch (track.codec?.name.toLowerCase()) {
              case "vp8":
                return "VP8";
              case "vp9":
                return "VP9";
              case "h264":
                return "MPEG4/ISO/AVC";
              case "av1x":
                return "AV1";
              default:
                throw new WeriftError({
                  message: "unsupported codec",
                  payload: { track, path: sourcePath }
                });
            }
          })();
          return {
            kind: "video",
            codec,
            clockRate: 9e4,
            trackNumber,
            width: this.props.width ?? 640,
            height: this.props.height ?? 360,
            roll: this.props.roll,
            payloadType,
            track
          };
        } else {
          return {
            kind: "audio",
            codec: "OPUS",
            clockRate: 48e3,
            trackNumber,
            payloadType,
            track
          };
        }
      }
    );
    const webm = new WebmCallback(inputTracks, {
      duration: this.props.defaultDuration ?? 1e3 * 60 * 60 * 24
    });
    const lipsync = new LipsyncCallback(this.props.lipsync ?? {});
    this.rtpSources = inputTracks.map(({ track, clockRate, codec }) => {
      const rtpSource = new RtpSourceCallback();
      const rtcpSource = new RtcpSourceCallback();
      track.onReceiveRtp.subscribe((rtp) => {
        rtpSource.input(rtp.clone());
      }).disposer(this.unSubscribers);
      track.onReceiveRtcp.subscribe((rtcp) => {
        rtcpSource.input(rtcp);
      }).disposer(this.unSubscribers);
      const time = this.props.disableNtp ? new RtpTimeCallback(clockRate) : new NtpTimeCallback(clockRate);
      if (track.kind === "video") {
        const depacketizer = new DepacketizeCallback(codec, {
          isFinalPacketInSequence: (h) => h.marker
        });
        const jitterBuffer = new JitterBufferCallback(
          clockRate,
          this.props.jitterBuffer ?? {}
        );
        rtpSource.pipe(jitterBuffer.input);
        rtcpSource.pipe(time.input);
        jitterBuffer.pipe(time.input);
        time.pipe(depacketizer.input);
        if (this.props.disableLipSync) {
          depacketizer.pipe(webm.inputVideo);
        } else {
          depacketizer.pipe(lipsync.inputVideo);
          lipsync.pipeVideo(webm.inputVideo);
        }
      } else {
        const depacketizer = new DepacketizeCallback(codec);
        rtpSource.pipe(time.input);
        rtcpSource.pipe(time.input);
        time.pipe(depacketizer.input);
        if (this.props.disableLipSync) {
          depacketizer.pipe(webm.inputAudio);
        } else {
          depacketizer.pipe(lipsync.inputAudio);
          lipsync.pipeAudio(webm.inputAudio);
        }
      }
      return rtpSource;
    });
    if (this.props.path) {
      webm.pipe(async (o) => {
        const eol = await saveToFileSystem(this.props.path)(o);
        if (eol) {
          this.onEol.execute();
          this.ended = true;
        }
      });
    } else if (this.props.stream) {
      webm.pipe(async (o) => {
        this.props.stream.execute(o);
      });
    }
  }
  async stop() {
    await Promise.all(this.rtpSources.map((r) => r.stop()));
    if (!this.ended) {
      await this.onEol.asPromise(5e3).catch((e) => e);
    }
    this.unSubscribers.dispose();
  }
};

// src/nonstandard/recorder/index.ts
var MediaRecorder = class {
  constructor(props) {
    this.props = props;
    this.tracks = props.tracks ?? this.tracks;
    const { path: path2, stream } = props;
    if (path2) {
      this.ext = path2.split(".").slice(-1)[0];
      this.writer = (() => {
        switch (this.ext) {
          case "webm":
            return new WebmFactory({
              ...props,
              path: path2,
              stream
            });
          default:
            throw new Error();
        }
      })();
    } else {
      this.writer = new WebmFactory({
        ...props,
        path: path2,
        stream
      });
    }
    if (this.tracks.length > 0) {
      this.props.numOfTracks = this.tracks.length;
      this.start().catch((error) => {
        this.onError.execute(error);
      });
    }
  }
  writer;
  ext;
  tracks = [];
  started = false;
  onError = new Event();
  async addTrack(track) {
    this.tracks.push(track);
    await this.start();
  }
  async start() {
    if (this.tracks.length === this.props.numOfTracks && this.started === false) {
      this.started = true;
      await this.writer.start(this.tracks);
    }
  }
  async stop() {
    await this.writer.stop();
  }
};

// src/nonstandard/userMedia.ts
import { exec } from "child_process";
import { createSocket as createSocket4 } from "dgram";
import { setImmediate as setImmediate2 } from "timers/promises";
import { v4 as v48 } from "uuid";
var getUserMedia = async ({
  path: path2,
  loop,
  width,
  height
}) => {
  const audioPort = await randomPort();
  const videoPort = await randomPort();
  if (path2.endsWith(".mp4")) {
    return new MediaPlayerMp4({
      audioPort,
      videoPort,
      path: path2,
      loop,
      width,
      height
    });
  } else {
    return new MediaPlayerWebm({
      audioPort,
      videoPort,
      path: path2,
      loop,
      width,
      height
    });
  }
};
var MediaPlayer = class {
  constructor(props) {
    this.props = props;
    this.setupTrack(props.audioPort, this.audio);
    this.setupTrack(props.videoPort, this.video);
  }
  streamId = v48();
  audio = new MediaStreamTrack({ kind: "audio", streamId: this.streamId });
  video = new MediaStreamTrack({ kind: "video", streamId: this.streamId });
  process;
  stopped = false;
  setupTrack = (port, track) => {
    let payloadType = 0;
    const socket = createSocket4("udp4");
    socket.bind(port);
    socket.on("message", async (buf) => {
      const rtp = RtpPacket.deSerialize(buf);
      if (!payloadType) {
        payloadType = rtp.header.payloadType;
      }
      if (payloadType !== rtp.header.payloadType) {
        payloadType = rtp.header.payloadType;
        track.onSourceChanged.execute(rtp.header);
      }
      track.writeRtp(buf);
    });
  };
  stop() {
    this.stopped = true;
    this.process.kill("SIGINT");
  }
};
var MediaPlayerMp4 = class extends MediaPlayer {
  async start() {
    let payloadType = 96;
    const run = async () => {
      if (payloadType > 100) payloadType = 96;
      let cmd = "";
      if (this.props.width && this.props.height) {
        cmd = `gst-launch-1.0 filesrc location= ${this.props.path} ! decodebin ! videoscale ! video/x-raw,width=${this.props.width},height=${this.props.height} ! x264enc ! h264parse ! rtph264pay config-interval=10 pt=${payloadType++} ! udpsink host=127.0.0.1 port=${this.props.videoPort}`;
      } else {
        cmd = `gst-launch-1.0 filesrc location= ${this.props.path} ! qtdemux name=d ! queue ! h264parse ! rtph264pay config-interval=10 pt=${payloadType++} ! udpsink host=127.0.0.1 port=${this.props.videoPort} d. ! queue ! aacparse ! avdec_aac ! audioresample ! audioconvert ! opusenc ! rtpopuspay pt=${payloadType++} ! udpsink host=127.0.0.1 port=${this.props.audioPort}`;
      }
      console.log(cmd);
      this.process = exec(cmd);
      this.process.on("error", (e) => console.error("gst error", e));
      if (this.props.loop) {
        await new Promise((r) => this.process.on("close", r));
        if (!this.stopped) {
          run();
        }
      }
    };
    await setImmediate2();
    run();
  }
};
var MediaPlayerWebm = class extends MediaPlayer {
  async start() {
    let payloadType = 96;
    const run = async () => {
      if (payloadType > 100) payloadType = 96;
      const cmd = `gst-launch-1.0 filesrc location=${this.props.path} ! matroskademux name=d d.video_0 ! queue ! rtpvp8pay pt=${payloadType++} ! udpsink host=127.0.0.1 port=${this.props.videoPort} d.audio_0 ! queue ! rtpopuspay pt=${payloadType++} ! udpsink host=127.0.0.1 port=${this.props.audioPort}`;
      this.process = exec(cmd);
      if (this.props.loop) {
        await new Promise((r) => this.process.on("close", r));
        if (!this.stopped) {
          run();
        }
      }
    };
    await setImmediate2();
    run();
  }
};
export {
  AV1Obu,
  AV1RtpPayload,
  AVCDecoderConfigurationRecord,
  BitStream,
  BitWriter,
  BitWriter2,
  BufferChain,
  DePacketizerBase,
  DepacketizeBase,
  DepacketizeCallback,
  DtxBase,
  DtxCallback,
  DurationPosition,
  Element,
  Event,
  EventDisposer,
  ExtensionProfiles,
  GenericNack,
  H264AnnexBParser,
  H264NaluAVC1,
  H264NaluPayload,
  H264NaluType,
  H264RtpPayload,
  ID,
  Int,
  JitterBufferBase,
  JitterBufferCallback,
  JitterBufferTransformer,
  LipsyncBase,
  LipsyncCallback,
  MP4Base,
  MP4Callback,
  Max32Uint,
  MaxSinged16Int,
  MediaDevices,
  MediaPlayerMp4,
  MediaPlayerWebm,
  MediaRecorder,
  Mp4Container,
  MuteCallback,
  MuteHandlerBase,
  NackHandlerBase,
  NackHandlerCallback,
  NalUnitType,
  Navigator,
  NtpTimeBase,
  NtpTimeCallback,
  OggParser,
  OpusRtpPayload,
  PacketChunk,
  PacketResult,
  PacketStatus,
  PictureLossIndication,
  Profiles,
  PromiseQueue,
  ProtectionProfileAeadAes128Gcm,
  ProtectionProfileAes128CmHmacSha1_80,
  RTCP_HEADER_SIZE,
  RTP_EXTENSION_URI,
  ReceiverEstimatedMaxBitrate,
  RecvDelta,
  Red,
  RedEncoder,
  RedHandler,
  RedHeader,
  RtcpHeader,
  RtcpPacketConverter,
  RtcpPayloadSpecificFeedback,
  RtcpReceiverInfo,
  RtcpRrPacket,
  RtcpSenderInfo,
  RtcpSourceCallback,
  RtcpSourceDescriptionPacket,
  RtcpSrPacket,
  RtcpTransportLayerFeedback,
  RtpBuilder,
  RtpHeader,
  RtpPacket,
  RtpSourceCallback,
  RtpSourceStream,
  RtpTimeBase,
  RtpTimeCallback,
  RunLengthChunk,
  SegmentSizePosition,
  SimpleProcessorCallbackBase,
  SourceDescriptionChunk,
  SourceDescriptionItem,
  SrtcpSession,
  SrtpSession,
  StatusVectorChunk,
  TcpTransport,
  TransportWideCC,
  UNKNOWN_SIZE,
  UdpTransport,
  Value,
  Vp8RtpPayload,
  Vp9RtpPayload,
  WEBMContainer,
  WebmBase,
  WebmCallback,
  WebmStream,
  WeriftError,
  annexb2avcc,
  buffer2ArrayBuffer,
  bufferArrayXor,
  bufferReader,
  bufferWriter,
  bufferWriterLE,
  bufferXor,
  build,
  bytes,
  containerSupportedCodecs,
  createBufferWriter,
  dePacketizeRtpPackets,
  debug,
  depacketizeTransformer,
  depacketizerCodecs,
  deserializeAbsSendTime,
  deserializeAudioLevelIndication,
  deserializeString,
  deserializeUint16BE,
  deserializeVideoOrientation,
  dumpBuffer,
  dumpBytes,
  element,
  enumerate,
  findPort,
  float,
  float32bit,
  getBit,
  getEBMLByteLength,
  getNumberByteLength,
  getSizeMask,
  getUserMedia,
  growBufferSize,
  int,
  int16Bit,
  interfaceAddress,
  isMedia,
  isRtcp,
  jitterBufferTransformer,
  keyLength,
  leb128decode,
  mp4SupportedCodecs,
  navigator,
  normalizeFamilyNodeV18,
  ntpTime2Sec,
  number,
  numberToByteArray,
  paddingBits,
  paddingByte,
  random16,
  random32,
  randomPort,
  randomPorts,
  replaceSegmentSize,
  rtpHeaderExtensionsParser,
  saltLength,
  saveToFileSystem,
  serializeAbsSendTime,
  serializeAudioLevelIndication,
  serializeRepairedRtpStreamId,
  serializeSdesMid,
  serializeSdesRTPStreamID,
  serializeTransportWideCC,
  string,
  stringToByteArray,
  timer,
  uint16Add,
  uint16Gt,
  uint16Gte,
  uint24,
  uint32Add,
  uint32Gt,
  uint32Gte,
  uint8Add,
  unknownSizeElement,
  unwrapRtx,
  vintEncode,
  vintEncodedNumber,
  wrapRtx
};
