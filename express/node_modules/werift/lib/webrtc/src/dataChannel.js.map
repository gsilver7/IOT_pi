{"version":3,"file":"dataChannel.js","sourceRoot":"","sources":["../../../src/dataChannel.ts"],"names":[],"mappings":";;;AAAA,6CAAgD;AAEhD,qCAAuC;AAIvC,MAAM,GAAG,GAAG,IAAA,cAAK,EAAC,2CAA2C,CAAC,CAAC;AAS/D,MAAa,cAAe,SAAQ,oBAAW;IA0B7C,YACW,IAAsB,EACd,UAAoC,EACrC,WAAW,IAAI;QAE/B,KAAK,EAAE,CAAC;QAJR;;;;mBAAS,IAAI;WAAkB;QAC/B;;;;mBAAiB,UAAU;WAA0B;QACrD;;;;mBAAgB,QAAQ;WAAO;QA5BxB;;;;mBAAc,IAAI,cAAK,EAAa;WAAC;QACrC;;;;mBAAe,IAAI,cAAK,EAAa;WAAC;QACtC;;;;mBAAY,IAAI,cAAK,EAAqB;WAAC;QACpD,YAAY;QACH;;;;mBAAQ,IAAI,cAAK,EAAW;WAAC;QAC7B;;;;mBAAoB,IAAI,cAAK,EAAE;WAAC;QACzC;;;;;WAAkB;QAClB;;;;;WAAmB;QACnB;;;;;WAAqB;QACrB;;;;;WAA4C;QAC5C,YAAY;QACZ;;;;;WAA2C;QAC3C;;;;mBAAoB,KAAK;WAAC;QAC1B;;;;;WAAW;QACX;;;;mBAAsB,YAAY;WAAC;QAEnC;;;;mBAAiB,CAAC;WAAC;QACX;;;;mBAA8B,CAAC;WAAC;QAExC,aAAa;QACb;;;;mBAAe,CAAC;WAAC;QACjB;;;;mBAAY,CAAC;WAAC;QACd;;;;mBAAmB,CAAC;WAAC;QACrB;;;;mBAAgB,CAAC;WAAC;QAShB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QAE7B,IAAI,UAAU,CAAC,UAAU,EAAE,CAAC;YAC1B,IAAI,IAAI,CAAC,EAAE,IAAI,SAAS,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC;gBAC3D,MAAM,IAAI,KAAK,CACb,uEAAuE,CACxE,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;aAAM,CAAC;YACN,IAAI,QAAQ,EAAE,CAAC;gBACb,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClC,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACjC,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;IACxC,CAAC;IAED,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;IAC3C,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAC/B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;IACpC,CAAC;IAED,IAAI,0BAA0B;QAC5B,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC1C,CAAC;IAED,IAAI,0BAA0B,CAAC,KAAa;QAC1C,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,UAAU,EAAE,CAAC;YACpC,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,EAAU;QACd,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAED,aAAa,CAAC,KAAc;QAC1B,IAAI,KAAK,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAEjC,QAAQ,KAAK,EAAE,CAAC;gBACd,KAAK,MAAM;oBACT,IAAI,IAAI,CAAC,MAAM;wBAAE,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClB,MAAM;gBACR,KAAK,QAAQ;oBACX,IAAI,IAAI,CAAC,OAAO;wBAAE,IAAI,CAAC,OAAO,EAAE,CAAC;oBACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACnB,MAAM;gBACR,KAAK,SAAS;oBACZ,IAAI,IAAI,CAAC,SAAS;wBAAE,IAAI,CAAC,SAAS,EAAE,CAAC;oBACrC,MAAM;YACV,CAAC;YACD,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,iBAAiB,CAAC,MAAc;QAC9B,MAAM,gBAAgB,GACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,0BAA0B;YACrD,IAAI,CAAC,cAAc,GAAG,MAAM,IAAI,IAAI,CAAC,0BAA0B,CAAC;QAClE,IAAI,CAAC,cAAc,IAAI,MAAM,CAAC;QAC9B,IAAI,gBAAgB,EAAE,CAAC;YACrB,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAqB;QACxB,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;CACF;AAvID,wCAuIC;AAID,MAAa,wBAAwB;IAQnC,YAAY,QAA2C,EAAE;QAPzD;;;;mBAAQ,EAAE;WAAC;QACX;;;;;WAA2B,CAAC,MAAM;QAClC;;;;;WAAwB;QACxB;;;;mBAAU,IAAI;WAAC;QACf;;;;mBAAW,EAAE;WAAC;QACd;;;;mBAAa,KAAK;WAAC;QACnB;;;;;WAAY;QAEV,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAXD,4DAWC","sourcesContent":["import { Event, debug } from \"./imports/common\";\n\nimport { EventTarget } from \"./helper\";\nimport type { RTCSctpTransport } from \"./transport/sctp\";\nimport type { Callback, CallbackWithValue } from \"./types/util\";\n\nconst log = debug(\"werift:packages/webrtc/src/dataChannel.ts\");\n\nexport interface DataChannelStats {\n  messagesSent: number;\n  bytesSent: number;\n  messagesReceived: number;\n  bytesReceived: number;\n}\n\nexport class RTCDataChannel extends EventTarget implements DataChannelStats {\n  readonly stateChange = new Event<[DCState]>();\n  readonly stateChanged = new Event<[DCState]>();\n  readonly onMessage = new Event<[string | Buffer]>();\n  // todo impl\n  readonly error = new Event<[Error]>();\n  readonly bufferedAmountLow = new Event();\n  onopen?: Callback;\n  onclose?: Callback;\n  onclosing?: Callback;\n  onmessage?: CallbackWithValue<MessageEvent>;\n  // todo impl\n  onerror?: CallbackWithValue<RTCErrorEvent>;\n  isCreatedByRemote = false;\n  id: number;\n  readyState: DCState = \"connecting\";\n\n  bufferedAmount = 0;\n  private _bufferedAmountLowThreshold = 0;\n\n  // Statistics\n  messagesSent = 0;\n  bytesSent = 0;\n  messagesReceived = 0;\n  bytesReceived = 0;\n\n  constructor(\n    readonly sctp: RTCSctpTransport,\n    private readonly parameters: RTCDataChannelParameters,\n    public readonly sendOpen = true,\n  ) {\n    super();\n\n    this.id = this.parameters.id;\n\n    if (parameters.negotiated) {\n      if (this.id == undefined || this.id < 0 || this.id > 65534) {\n        throw new Error(\n          \"ID must be in range 0-65534 if data channel is negotiated out-of-band\",\n        );\n      }\n      this.sctp.dataChannelAddNegotiated(this);\n    } else {\n      if (sendOpen) {\n        this.sendOpen = false;\n        this.sctp.dataChannelOpen(this);\n      }\n    }\n  }\n\n  get ordered() {\n    return this.parameters.ordered;\n  }\n\n  get maxRetransmits() {\n    return this.parameters.maxRetransmits;\n  }\n\n  get maxPacketLifeTime() {\n    return this.parameters.maxPacketLifeTime;\n  }\n\n  get label() {\n    return this.parameters.label;\n  }\n\n  get protocol() {\n    return this.parameters.protocol;\n  }\n\n  get negotiated() {\n    return this.parameters.negotiated;\n  }\n\n  get bufferedAmountLowThreshold() {\n    return this._bufferedAmountLowThreshold;\n  }\n\n  set bufferedAmountLowThreshold(value: number) {\n    if (value < 0 || value > 4294967295) {\n      throw new Error(\n        \"bufferedAmountLowThreshold must be in range 0 - 4294967295\",\n      );\n    }\n    this._bufferedAmountLowThreshold = value;\n  }\n\n  setId(id: number) {\n    this.id = id;\n  }\n\n  setReadyState(state: DCState) {\n    if (state !== this.readyState) {\n      this.readyState = state;\n      this.stateChange.execute(state);\n      this.stateChanged.execute(state);\n\n      switch (state) {\n        case \"open\":\n          if (this.onopen) this.onopen();\n          this.emit(\"open\");\n          break;\n        case \"closed\":\n          if (this.onclose) this.onclose();\n          this.emit(\"close\");\n          break;\n        case \"closing\":\n          if (this.onclosing) this.onclosing();\n          break;\n      }\n      log(\"change state\", state);\n    }\n  }\n\n  addBufferedAmount(amount: number) {\n    const crossesThreshold =\n      this.bufferedAmount > this.bufferedAmountLowThreshold &&\n      this.bufferedAmount + amount <= this.bufferedAmountLowThreshold;\n    this.bufferedAmount += amount;\n    if (crossesThreshold) {\n      this.bufferedAmountLow.execute();\n      this.emit(\"bufferedamountlow\");\n    }\n  }\n\n  send(data: Buffer | string) {\n    const size = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n    this.messagesSent++;\n    this.bytesSent += size;\n    this.sctp.datachannelSend(this, data);\n  }\n\n  close() {\n    this.sctp.dataChannelClose(this);\n  }\n}\n\nexport type DCState = \"open\" | \"closed\" | \"connecting\" | \"closing\";\n\nexport class RTCDataChannelParameters {\n  label = \"\";\n  maxPacketLifeTime?: number; // sec\n  maxRetransmits?: number;\n  ordered = true;\n  protocol = \"\";\n  negotiated = false;\n  id!: number;\n  constructor(props: Partial<RTCDataChannelParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n\nexport interface MessageEvent {\n  data: string | Buffer;\n}\n\nexport interface RTCErrorEvent {\n  error: any;\n}\n"]}