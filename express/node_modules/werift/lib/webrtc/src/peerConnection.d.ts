import type { RTCDataChannel } from "./dataChannel";
import { EventTarget } from "./helper";
import { type Address, Event, type InterfaceAddresses } from "./imports/common";
import type { CandidatePair, Message, Protocol } from "./imports/ice";
import { type MediaStream, type MediaStreamTrack, type RTCRtpCodecParameters, type RTCRtpHeaderExtensionParameters, type RTCRtpReceiver, type RTCRtpSender, type RTCRtpTransceiver, type TransceiverOptions } from "./media";
import { RTCStatsReport } from "./media/stats";
import { type BundlePolicy, SessionDescription } from "./sdp";
import { type RTCSessionDescriptionInit } from "./sdpManager";
import type { DtlsKeys, RTCDtlsTransport } from "./transport/dtls";
import type { RTCIceCandidate, RTCIceCandidateInit, RTCIceTransport } from "./transport/ice";
import type { Kind, RTCSignalingState } from "./types/domain";
import type { Callback, CallbackWithValue } from "./types/util";
export declare class RTCPeerConnection extends EventTarget {
    readonly cname: string;
    config: Required<PeerConfig>;
    signalingState: RTCSignalingState;
    negotiationneeded: boolean;
    needRestart: boolean;
    private readonly router;
    private readonly sdpManager;
    private readonly transceiverManager;
    private readonly sctpManager;
    private readonly secureManager;
    private isClosed;
    private shouldNegotiationneeded;
    readonly iceGatheringStateChange: Event<["complete" | "new" | "gathering"]>;
    readonly iceConnectionStateChange: Event<["disconnected" | "closed" | "completed" | "new" | "connected" | "failed" | "checking"]>;
    readonly signalingStateChange: Event<["closed" | "stable" | "have-local-offer" | "have-remote-offer" | "have-local-pranswer" | "have-remote-pranswer"]>;
    readonly connectionStateChange: Event<["disconnected" | "closed" | "new" | "connected" | "connecting" | "failed"]>;
    readonly onDataChannel: Event<[RTCDataChannel]>;
    readonly onRemoteTransceiverAdded: Event<[RTCRtpTransceiver]>;
    readonly onTransceiverAdded: Event<[RTCRtpTransceiver]>;
    readonly onIceCandidate: Event<[RTCIceCandidate | undefined]>;
    readonly onNegotiationneeded: Event<[]>;
    readonly onTrack: Event<[MediaStreamTrack]>;
    ondatachannel?: CallbackWithValue<RTCDataChannelEvent>;
    onicecandidate?: CallbackWithValue<RTCPeerConnectionIceEvent>;
    onicecandidateerror?: CallbackWithValue<any>;
    onicegatheringstatechange?: CallbackWithValue<any>;
    onnegotiationneeded?: CallbackWithValue<any>;
    onsignalingstatechange?: CallbackWithValue<any>;
    ontrack?: CallbackWithValue<RTCTrackEvent>;
    onconnectionstatechange?: Callback;
    oniceconnectionstatechange?: Callback;
    constructor(config?: Partial<PeerConfig>);
    get connectionState(): "disconnected" | "closed" | "new" | "connected" | "connecting" | "failed";
    get iceConnectionState(): "disconnected" | "closed" | "completed" | "new" | "connected" | "failed" | "checking";
    get iceGathererState(): "complete" | "new" | "gathering";
    get iceGatheringState(): "complete" | "new" | "gathering";
    get dtlsTransports(): RTCDtlsTransport[];
    get sctpTransport(): import(".").RTCSctpTransport | undefined;
    get sctpRemotePort(): number | undefined;
    get iceTransports(): RTCIceTransport[];
    get extIdUriMap(): {
        [id: number]: string;
    };
    get iceGeneration(): number;
    get localDescription(): import("./sdp").RTCSessionDescription | undefined;
    get remoteDescription(): import("./sdp").RTCSessionDescription | undefined;
    /**@private */
    get _localDescription(): SessionDescription | undefined;
    /**@private */
    get _remoteDescription(): SessionDescription | undefined;
    getTransceivers(): RTCRtpTransceiver[];
    getSenders(): RTCRtpSender[];
    getReceivers(): RTCRtpReceiver[];
    setConfiguration(config: Partial<PeerConfig>): void;
    getConfiguration(): Required<PeerConfig>;
    createOffer({ iceRestart }?: {
        iceRestart?: boolean;
    }): Promise<import("./sdp").RTCSessionDescription>;
    private createSctpTransport;
    createDataChannel(label: string, options?: Partial<{
        maxPacketLifeTime?: number;
        protocol: string;
        maxRetransmits?: number;
        ordered: boolean;
        negotiated: boolean;
        id?: number;
    }>): RTCDataChannel;
    removeTrack(sender: RTCRtpSender): void;
    private needNegotiation;
    private findOrCreateTransport;
    setLocalDescription(sessionDescription?: {
        type: "offer" | "answer";
        sdp: string;
    }): Promise<SessionDescription>;
    private gatherCandidates;
    addIceCandidate(candidateMessage: RTCIceCandidate | RTCIceCandidateInit): Promise<void>;
    private connect;
    restartIce(): void;
    setRemoteDescription(sessionDescription: RTCSessionDescriptionInit): Promise<void>;
    addTransceiver(trackOrKind: Kind | MediaStreamTrack, options?: Partial<TransceiverOptions>): RTCRtpTransceiver;
    addTrack(track: MediaStreamTrack, 
    /**todo impl */
    ms?: MediaStream): RTCRtpSender;
    createAnswer(): Promise<import("./sdp").RTCSessionDescription>;
    private assertNotClosed;
    private setSignalingState;
    private createPeerConnectionStats;
    getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport>;
    close(): Promise<void>;
}
export interface PeerConfig {
    codecs: Partial<{
        /**
         * When specifying a codec with a fixed payloadType such as PCMU,
         * it is necessary to set the correct PayloadType in RTCRtpCodecParameters in advance.
         */
        audio: RTCRtpCodecParameters[];
        video: RTCRtpCodecParameters[];
    }>;
    headerExtensions: Partial<{
        audio: RTCRtpHeaderExtensionParameters[];
        video: RTCRtpHeaderExtensionParameters[];
    }>;
    iceTransportPolicy: "all" | "relay";
    iceServers: RTCIceServer[];
    /**Minimum port and Maximum port must not be the same value */
    icePortRange: [number, number] | undefined;
    iceInterfaceAddresses: InterfaceAddresses | undefined;
    /** Add additional host (local) addresses to use for candidate gathering.
     * Notably, you can include hosts that are normally excluded, such as loopback, tun interfaces, etc.
     */
    iceAdditionalHostAddresses: string[] | undefined;
    iceUseIpv4: boolean;
    iceUseIpv6: boolean;
    forceTurnTCP: boolean;
    /** such as google cloud run */
    iceUseLinkLocalAddress: boolean | undefined;
    /** If provided, is called on each STUN request.
     * Return `true` if a STUN response should be sent, false if it should be skipped. */
    iceFilterStunResponse: ((message: Message, addr: Address, protocol: Protocol) => boolean) | undefined;
    iceFilterCandidatePair: ((pair: CandidatePair) => boolean) | undefined;
    dtls: Partial<{
        keys: DtlsKeys;
    }>;
    icePasswordPrefix: string | undefined;
    bundlePolicy: BundlePolicy;
    debug: Partial<{
        /**% */
        inboundPacketLoss: number;
        /**% */
        outboundPacketLoss: number;
        /**ms */
        receiverReportDelay: number;
        disableSendNack: boolean;
        disableRecvRetransmit: boolean;
    }>;
    midSuffix: boolean;
}
export declare const findCodecByMimeType: (codecs: RTCRtpCodecParameters[], target: RTCRtpCodecParameters) => RTCRtpCodecParameters | undefined;
export type RTCIceServer = {
    urls: string;
    username?: string;
    credential?: string;
};
export declare const defaultPeerConfig: PeerConfig;
export interface RTCTrackEvent {
    track: MediaStreamTrack;
    streams: MediaStream[];
    transceiver: RTCRtpTransceiver;
    receiver: RTCRtpReceiver;
}
export interface RTCDataChannelEvent {
    channel: RTCDataChannel;
}
export interface RTCPeerConnectionIceEvent {
    candidate?: RTCIceCandidate;
}
