"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultPeerConfig = exports.findCodecByMimeType = exports.RTCPeerConnection = void 0;
const cloneDeep_js_1 = __importDefault(require("lodash/cloneDeep.js"));
const uuid = __importStar(require("uuid"));
const helper_1 = require("./helper");
const common_1 = require("./imports/common");
const media_1 = require("./media");
const stats_1 = require("./media/stats");
const sctpManager_1 = require("./sctpManager");
const sdp_1 = require("./sdp");
const sdpManager_1 = require("./sdpManager");
const secureTransportManager_1 = require("./secureTransportManager");
const utils_1 = require("./utils");
const log = (0, common_1.debug)("werift:packages/webrtc/src/peerConnection.ts");
class RTCPeerConnection extends helper_1.EventTarget {
    constructor(config = {}) {
        super();
        Object.defineProperty(this, "cname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uuid.v4()
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, cloneDeep_js_1.default)(exports.defaultPeerConfig)
        });
        Object.defineProperty(this, "signalingState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "stable"
        });
        Object.defineProperty(this, "negotiationneeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "needRestart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "router", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new media_1.RtpRouter()
        });
        Object.defineProperty(this, "sdpManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "transceiverManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sctpManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "secureManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isClosed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "shouldNegotiationneeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "iceGatheringStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "iceConnectionStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "signalingStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "connectionStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onDataChannel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onRemoteTransceiverAdded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onTransceiverAdded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onIceCandidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onNegotiationneeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onTrack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "ondatachannel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onicecandidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onicecandidateerror", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onicegatheringstatechange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onnegotiationneeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onsignalingstatechange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ontrack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onconnectionstatechange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oniceconnectionstatechange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "needNegotiation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                this.shouldNegotiationneeded = true;
                if (this.negotiationneeded || this.signalingState !== "stable") {
                    return;
                }
                this.shouldNegotiationneeded = false;
                setImmediate(() => {
                    this.negotiationneeded = true;
                    this.onNegotiationneeded.execute();
                    if (this.onnegotiationneeded)
                        this.onnegotiationneeded({});
                });
            }
        });
        this.setConfiguration(config);
        this.sdpManager = new sdpManager_1.SDPManager({
            cname: this.cname,
            bundlePolicy: this.config.bundlePolicy,
        });
        this.transceiverManager = new media_1.TransceiverManager(this.cname, this.config, this.router);
        this.transceiverManager.onTransceiverAdded.pipe(this.onTransceiverAdded);
        this.transceiverManager.onRemoteTransceiverAdded.pipe(this.onRemoteTransceiverAdded);
        this.transceiverManager.onTrack.subscribe(({ track, stream, transceiver }) => {
            const event = {
                track,
                streams: [stream],
                transceiver,
                receiver: transceiver.receiver,
            };
            this.onTrack.execute(track);
            this.emit("track", event);
            if (this.ontrack) {
                this.ontrack(event);
            }
        });
        this.transceiverManager.onNegotiationNeeded.subscribe(() => this.needNegotiation());
        this.sctpManager = new sctpManager_1.SctpTransportManager();
        this.sctpManager.onDataChannel.subscribe((channel) => {
            this.onDataChannel.execute(channel);
            const event = { channel };
            this.ondatachannel?.(event);
            this.emit("datachannel", event);
        });
        this.secureManager = new secureTransportManager_1.SecureTransportManager({
            config: this.config,
            sctpManager: this.sctpManager,
            transceiverManager: this.transceiverManager,
        });
        this.secureManager.iceGatheringStateChange.pipe(this.iceGatheringStateChange);
        this.secureManager.iceConnectionStateChange.subscribe((state) => {
            if (state === "closed") {
                this.close();
            }
            this.iceConnectionStateChange.execute(state);
        });
        this.secureManager.connectionStateChange.subscribe((state) => {
            this.connectionStateChange.execute(state);
            this.onconnectionstatechange?.();
            this.emit("connectionstatechange");
        });
        this.secureManager.onIceCandidate.subscribe((candidate) => {
            const iceCandidate = candidate ? candidate.toJSON() : undefined;
            this.onIceCandidate.execute(iceCandidate);
            this.onicecandidate?.({ candidate: iceCandidate });
            this.emit("icecandidate", { candidate: iceCandidate });
        });
    }
    get connectionState() {
        return this.secureManager.connectionState;
    }
    get iceConnectionState() {
        return this.secureManager.iceConnectionState;
    }
    get iceGathererState() {
        return this.secureManager.iceGatheringState;
    }
    get iceGatheringState() {
        return this.secureManager.iceGatheringState;
    }
    get dtlsTransports() {
        return this.secureManager.dtlsTransports;
    }
    get sctpTransport() {
        return this.sctpManager.sctpTransport;
    }
    get sctpRemotePort() {
        return this.sctpManager.sctpRemotePort;
    }
    get iceTransports() {
        return this.secureManager.iceTransports;
    }
    get extIdUriMap() {
        return this.router.extIdUriMap;
    }
    get iceGeneration() {
        return this.iceTransports[0].connection.generation;
    }
    get localDescription() {
        return this.sdpManager.localDescription;
    }
    get remoteDescription() {
        return this.sdpManager.remoteDescription;
    }
    /**@private */
    get _localDescription() {
        return this.sdpManager._localDescription;
    }
    /**@private */
    get _remoteDescription() {
        return this.sdpManager._remoteDescription;
    }
    getTransceivers() {
        return this.transceiverManager.getTransceivers();
    }
    getSenders() {
        return this.transceiverManager.getSenders();
    }
    getReceivers() {
        return this.transceiverManager.getReceivers();
    }
    setConfiguration(config) {
        (0, utils_1.deepMerge)(this.config, config);
        if (this.config.icePortRange) {
            const [min, max] = this.config.icePortRange;
            if (min === max)
                throw new Error("should not be same value");
            if (min >= max)
                throw new Error("The min must be less than max");
        }
        for (const [i, codecParams] of (0, helper_1.enumerate)([
            ...(this.config.codecs.audio || []),
            ...(this.config.codecs.video || []),
        ])) {
            if (codecParams.payloadType != undefined) {
                continue;
            }
            codecParams.payloadType = 96 + i;
            switch (codecParams.name.toLowerCase()) {
                case "rtx":
                    {
                        codecParams.parameters = `apt=${codecParams.payloadType - 1}`;
                    }
                    break;
                case "red":
                    {
                        if (codecParams.contentType === "audio") {
                            const redundant = codecParams.payloadType + 1;
                            codecParams.parameters = `${redundant}/${redundant}`;
                            codecParams.payloadType = 63;
                        }
                    }
                    break;
            }
        }
        [
            ...(this.config.headerExtensions.audio || []),
            ...(this.config.headerExtensions.video || []),
        ].forEach((v, i) => {
            v.id = 1 + i;
        });
    }
    getConfiguration() {
        return this.config;
    }
    async createOffer({ iceRestart } = {}) {
        if (iceRestart || this.needRestart) {
            this.needRestart = false;
            this.secureManager.restartIce();
        }
        await this.secureManager.ensureCerts();
        for (const transceiver of this.transceiverManager.getTransceivers()) {
            if (transceiver.codecs.length === 0) {
                this.transceiverManager.assignTransceiverCodecs(transceiver);
            }
            if (transceiver.headerExtensions.length === 0) {
                transceiver.headerExtensions =
                    this.config.headerExtensions[transceiver.kind] ?? [];
            }
        }
        const description = this.sdpManager.buildOfferSdp(this.transceiverManager.getTransceivers(), this.sctpTransport);
        return description.toJSON();
    }
    createSctpTransport() {
        const sctp = this.sctpManager.createSctpTransport();
        const dtlsTransport = this.findOrCreateTransport();
        sctp.setDtlsTransport(dtlsTransport);
        return sctp;
    }
    createDataChannel(label, options = {}) {
        if (!this.sctpTransport) {
            this.createSctpTransport();
            this.needNegotiation();
        }
        const channel = this.sctpManager.createDataChannel(label, options);
        if (!channel.sctp.dtlsTransport) {
            const dtlsTransport = this.findOrCreateTransport();
            channel.sctp.setDtlsTransport(dtlsTransport);
        }
        return channel;
    }
    removeTrack(sender) {
        if (this.isClosed) {
            throw new Error("peer closed");
        }
        this.transceiverManager.removeTrack(sender);
        this.needNegotiation();
    }
    findOrCreateTransport() {
        const [existing] = this.iceTransports;
        // Gather ICE candidates for only one track. If the remote endpoint is not bundle-aware, negotiate only one media track.
        // https://w3c.github.io/webrtc-pc/#rtcbundlepolicy-enum
        if (this.sdpManager.bundlePolicy === "max-bundle") {
            if (existing) {
                return this.dtlsTransports[0];
            }
        }
        const dtlsTransport = this.secureManager.createTransport();
        dtlsTransport.onRtp.subscribe((rtp) => {
            this.router.routeRtp(rtp);
        });
        dtlsTransport.onRtcp.subscribe((rtcp) => {
            this.router.routeRtcp(rtcp);
        });
        const iceTransport = dtlsTransport.iceTransport;
        iceTransport.onNegotiationNeeded.subscribe(() => {
            this.needNegotiation();
        });
        iceTransport.onIceCandidate.subscribe((candidate) => {
            if (!this.localDescription) {
                log("localDescription not found when ice candidate was gathered");
                return;
            }
            if (!candidate) {
                this.sdpManager.setLocal(this._localDescription, this.transceiverManager.getTransceivers(), this.sctpTransport);
                this.onIceCandidate.execute(undefined);
                if (this.onicecandidate) {
                    this.onicecandidate({ candidate: undefined });
                }
                this.emit("icecandidate", { candidate: undefined });
                return;
            }
            if (!this._localDescription) {
                log("localDescription not found when ice candidate was gathered");
                return;
            }
            this.secureManager.handleNewIceCandidate({
                candidate,
                bundlePolicy: this.sdpManager.bundlePolicy,
                remoteIsBundled: !!this.sdpManager.remoteIsBundled,
                media: this._localDescription.media[0],
                transceiver: this.transceiverManager
                    .getTransceivers()
                    .find((t) => t.dtlsTransport.iceTransport.id === iceTransport.id),
                sctpTransport: this.sctpTransport?.dtlsTransport.iceTransport.id === iceTransport.id
                    ? this.sctpTransport
                    : undefined,
            });
        });
        return dtlsTransport;
    }
    async setLocalDescription(sessionDescription) {
        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription#type
        const implicitOfferState = [
            "stable",
            "have-local-offer",
            "have-remote-pranswer",
        ];
        sessionDescription =
            sessionDescription ??
                (implicitOfferState.includes(this.signalingState)
                    ? await this.createOffer()
                    : await this.createAnswer());
        // # parse and validate description
        const description = this.sdpManager.parseSdp({
            sdp: sessionDescription.sdp,
            isLocal: true,
            signalingState: this.signalingState,
            type: sessionDescription.type,
        });
        // # update signaling state
        if (description.type === "offer") {
            this.setSignalingState("have-local-offer");
        }
        else if (description.type === "answer") {
            this.setSignalingState("stable");
        }
        // # assign MID
        for (const [i, media] of (0, helper_1.enumerate)(description.media)) {
            const mid = media.rtp.muxId;
            this.sdpManager.registerMid(mid);
            if (["audio", "video"].includes(media.kind)) {
                const transceiver = this.transceiverManager.getTransceiverByMLineIndex(i);
                if (transceiver) {
                    transceiver.mid = mid;
                }
            }
            if (media.kind === "application" && this.sctpTransport) {
                this.sctpTransport.mid = mid;
            }
        }
        // setup ice,dtls role
        const role = description.media.find((media) => media.dtlsParams)?.dtlsParams
            ?.role;
        this.secureManager.setLocalRole({
            type: description.type,
            role,
        });
        // # configure direction
        if (["answer", "pranswer"].includes(description.type)) {
            for (const t of this.transceiverManager.getTransceivers()) {
                const direction = (0, utils_1.andDirection)(t.direction, t.offerDirection);
                t.setCurrentDirection(direction);
            }
        }
        // for trickle ice
        this.sdpManager.setLocal(description, this.transceiverManager.getTransceivers(), this.sctpTransport);
        await this.gatherCandidates().catch((e) => {
            log("gatherCandidates failed", e);
        });
        // connect transports
        if (description.type === "answer") {
            this.connect().catch((err) => {
                log("connect failed", err);
                this.secureManager.setConnectionState("failed");
            });
        }
        this.sdpManager.setLocal(description, this.transceiverManager.getTransceivers(), this.sctpTransport);
        if (this.shouldNegotiationneeded) {
            this.needNegotiation();
        }
        return description;
    }
    async gatherCandidates() {
        await this.secureManager.gatherCandidates(!!this.sdpManager.remoteIsBundled);
    }
    async addIceCandidate(candidateMessage) {
        const sdp = this.sdpManager.buildOfferSdp(this.transceiverManager.getTransceivers(), this.sctpTransport);
        await this.secureManager.addIceCandidate(sdp, candidateMessage);
    }
    async connect() {
        log("start connect");
        const res = await Promise.allSettled(this.dtlsTransports.map(async (dtlsTransport) => {
            const { iceTransport } = dtlsTransport;
            if (iceTransport.state === "connected") {
                return;
            }
            const checkDtlsConnected = () => dtlsTransport.state === "connected";
            if (checkDtlsConnected()) {
                return;
            }
            this.secureManager.setConnectionState("connecting");
            await iceTransport.start().catch((err) => {
                log("iceTransport.start failed", err);
                throw err;
            });
            if (checkDtlsConnected()) {
                return;
            }
            await dtlsTransport.start().catch((err) => {
                log("dtlsTransport.start failed", err);
                throw err;
            });
            if (this.sctpTransport &&
                this.sctpTransport.dtlsTransport.id === dtlsTransport.id) {
                await this.sctpManager.connectSctp();
            }
        }));
        if (res.find((r) => r.status === "rejected")) {
            this.secureManager.setConnectionState("failed");
        }
        else {
            this.secureManager.setConnectionState("connected");
        }
    }
    restartIce() {
        this.needRestart = true;
        this.needNegotiation();
    }
    async setRemoteDescription(sessionDescription) {
        if (sessionDescription instanceof sdp_1.SessionDescription) {
            sessionDescription = sessionDescription.toSdp();
        }
        // # parse and validate description
        const remoteSdp = this.sdpManager.setRemoteDescription(sessionDescription, this.signalingState);
        let bundleTransport;
        // # apply description
        const matchTransceiverWithMedia = (transceiver, media) => transceiver.kind === media.kind &&
            [undefined, media.rtp.muxId].includes(transceiver.mid);
        let transports = remoteSdp.media.map((remoteMedia, i) => {
            let dtlsTransport;
            if (["audio", "video"].includes(remoteMedia.kind)) {
                let transceiver = this.transceiverManager
                    .getTransceivers()
                    .find((t) => matchTransceiverWithMedia(t, remoteMedia));
                if (!transceiver) {
                    // create remote transceiver
                    transceiver = this.addTransceiver(remoteMedia.kind, {
                        direction: "recvonly",
                    });
                    transceiver.mid = remoteMedia.rtp.muxId;
                    this.onRemoteTransceiverAdded.execute(transceiver);
                }
                else {
                    if (transceiver.direction === "inactive" && transceiver.stopping) {
                        transceiver.stopped = true;
                        if (sessionDescription.type === "answer") {
                            transceiver.setCurrentDirection("inactive");
                        }
                        return;
                    }
                }
                if (this.sdpManager.remoteIsBundled) {
                    if (!bundleTransport) {
                        bundleTransport = transceiver.dtlsTransport;
                    }
                    else {
                        transceiver.setDtlsTransport(bundleTransport);
                    }
                }
                dtlsTransport = transceiver.dtlsTransport;
                this.transceiverManager.setRemoteRTP(transceiver, remoteMedia, remoteSdp.type, i);
            }
            else if (remoteMedia.kind === "application") {
                let sctpTransport = this.sctpTransport;
                if (!sctpTransport) {
                    sctpTransport = this.createSctpTransport();
                    sctpTransport.mid = remoteMedia.rtp.muxId;
                }
                if (this.sdpManager.remoteIsBundled) {
                    if (!bundleTransport) {
                        bundleTransport = sctpTransport.dtlsTransport;
                    }
                    else {
                        sctpTransport.setDtlsTransport(bundleTransport);
                    }
                }
                dtlsTransport = sctpTransport.dtlsTransport;
                this.sctpManager.setRemoteSCTP(remoteMedia, i);
            }
            else {
                throw new Error("invalid media kind");
            }
            const iceTransport = dtlsTransport.iceTransport;
            if (remoteMedia.iceParams) {
                const renomination = !!this.sdpManager.inactiveRemoteMedia;
                iceTransport.setRemoteParams(remoteMedia.iceParams, renomination);
                // One agent full, one lite:  The full agent MUST take the controlling role, and the lite agent MUST take the controlled role
                // RFC 8445 S6.1.1
                if (remoteMedia.iceParams?.iceLite) {
                    iceTransport.connection.iceControlling = true;
                }
            }
            if (remoteMedia.dtlsParams) {
                dtlsTransport.setRemoteParams(remoteMedia.dtlsParams);
            }
            // # add ICE candidates
            remoteMedia.iceCandidates.forEach(iceTransport.addRemoteCandidate);
            if (remoteMedia.iceCandidatesComplete) {
                iceTransport.addRemoteCandidate(undefined);
            }
            // # set DTLS role
            if (remoteSdp.type === "answer" && remoteMedia.dtlsParams?.role) {
                dtlsTransport.role =
                    remoteMedia.dtlsParams.role === "client" ? "server" : "client";
            }
            return iceTransport;
        });
        // filter out inactive transports
        transports = transports.filter((iceTransport) => !!iceTransport);
        const removedTransceivers = this.transceiverManager
            .getTransceivers()
            .filter((t) => remoteSdp.media.find((m) => matchTransceiverWithMedia(t, m)) ==
            undefined);
        if (sessionDescription.type === "answer") {
            for (const transceiver of removedTransceivers) {
                // todo: handle answer side transceiver removal work.
                // event should trigger to notify media source to stop.
                transceiver.stop();
                transceiver.stopped = true;
            }
        }
        if (remoteSdp.type === "offer") {
            this.setSignalingState("have-remote-offer");
        }
        else if (remoteSdp.type === "answer") {
            this.setSignalingState("stable");
        }
        // connect transports
        if (remoteSdp.type === "answer") {
            log("caller start connect");
            this.connect().catch((err) => {
                log("connect failed", err);
                this.secureManager.setConnectionState("failed");
            });
        }
        this.negotiationneeded = false;
        if (this.shouldNegotiationneeded) {
            this.needNegotiation();
        }
    }
    addTransceiver(trackOrKind, options = {}) {
        const dtlsTransport = this.findOrCreateTransport();
        const transceiver = this.transceiverManager.addTransceiver(trackOrKind, dtlsTransport, options);
        this.secureManager.updateIceConnectionState();
        this.needNegotiation();
        return transceiver;
    }
    // todo fix
    addTrack(track, 
    /**todo impl */
    ms) {
        if (this.isClosed) {
            throw new Error("is closed");
        }
        const transceiver = this.transceiverManager.addTrack(track, ms);
        if (!transceiver.dtlsTransport) {
            const dtlsTransport = this.findOrCreateTransport();
            transceiver.setDtlsTransport(dtlsTransport);
        }
        this.needNegotiation();
        return transceiver.sender;
    }
    async createAnswer() {
        this.assertNotClosed();
        await this.secureManager.ensureCerts();
        const description = this.sdpManager.buildAnswerSdp({
            transceivers: this.transceiverManager.getTransceivers(),
            sctpTransport: this.sctpTransport,
            signalingState: this.signalingState,
        });
        return description.toJSON();
    }
    assertNotClosed() {
        if (this.isClosed) {
            throw new Error("RTCPeerConnection is closed");
        }
    }
    setSignalingState(state) {
        log("signalingStateChange", state);
        this.signalingState = state;
        this.signalingStateChange.execute(state);
        if (this.onsignalingstatechange) {
            this.onsignalingstatechange({});
        }
    }
    createPeerConnectionStats() {
        const timestamp = (0, stats_1.getStatsTimestamp)();
        return {
            type: "peer-connection",
            id: (0, stats_1.generateStatsId)("peer-connection"),
            timestamp,
            dataChannelsOpened: this.sctpManager.dataChannelsOpened,
            dataChannelsClosed: this.sctpManager.dataChannelsClosed,
        };
    }
    async getStats(selector) {
        const stats = [];
        // Peer connection stats - always included regardless of selector
        stats.push(this.createPeerConnectionStats());
        // Get stats from transceivers
        const transceiverStats = await this.transceiverManager.getStats(selector);
        stats.push(...transceiverStats);
        // Get transport stats - always included regardless of selector
        const transportStats = await this.secureManager.getStats();
        stats.push(...transportStats);
        // Get data channel stats - always included regardless of selector
        if (this.sctpTransport) {
            const dataChannelStats = await this.sctpManager.getStats();
            if (dataChannelStats) {
                stats.push(...dataChannelStats);
            }
        }
        return new stats_1.RTCStatsReport(stats);
    }
    async close() {
        if (this.isClosed)
            return;
        this.isClosed = true;
        this.setSignalingState("closed");
        await this.secureManager.close();
        await this.sctpManager.close();
        this.transceiverManager.close();
        this.onDataChannel.allUnsubscribe();
        this.iceGatheringStateChange.allUnsubscribe();
        this.iceConnectionStateChange.allUnsubscribe();
        this.signalingStateChange.allUnsubscribe();
        this.onTransceiverAdded.allUnsubscribe();
        this.onRemoteTransceiverAdded.allUnsubscribe();
        this.onIceCandidate.allUnsubscribe();
        log("peerConnection closed");
    }
}
exports.RTCPeerConnection = RTCPeerConnection;
const findCodecByMimeType = (codecs, target) => codecs.find((localCodec) => localCodec.mimeType.toLowerCase() === target.mimeType.toLowerCase())
    ? target
    : undefined;
exports.findCodecByMimeType = findCodecByMimeType;
exports.defaultPeerConfig = {
    codecs: {
        audio: [(0, media_1.useOPUS)(), (0, media_1.usePCMU)()],
        video: [(0, media_1.useVP8)()],
    },
    headerExtensions: {
        audio: [],
        video: [],
    },
    iceTransportPolicy: "all",
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
    icePortRange: undefined,
    iceInterfaceAddresses: undefined,
    iceAdditionalHostAddresses: undefined,
    iceUseIpv4: true,
    iceUseIpv6: true,
    iceFilterStunResponse: undefined,
    iceFilterCandidatePair: undefined,
    icePasswordPrefix: undefined,
    iceUseLinkLocalAddress: undefined,
    dtls: {},
    bundlePolicy: "max-compat",
    debug: {},
    midSuffix: false,
    forceTurnTCP: false,
};
//# sourceMappingURL=peerConnection.js.map