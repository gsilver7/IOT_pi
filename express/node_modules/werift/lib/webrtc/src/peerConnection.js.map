{"version":3,"file":"peerConnection.js","sourceRoot":"","sources":["../../../src/peerConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import cloneDeep from \"lodash/cloneDeep.js\";\nimport * as uuid from \"uuid\";\n\nimport type { RTCDataChannel } from \"./dataChannel\";\nimport { EventTarget, enumerate } from \"./helper\";\nimport {\n  type Address,\n  Event,\n  type InterfaceAddresses,\n  debug,\n} from \"./imports/common\";\nimport type { CandidatePair, Message, Protocol } from \"./imports/ice\";\nimport {\n  type MediaStream,\n  type MediaStreamTrack,\n  type RTCRtpCodecParameters,\n  type RTCRtpHeaderExtensionParameters,\n  type RTCRtpReceiver,\n  type RTCRtpSender,\n  type RTCRtpTransceiver,\n  RtpRouter,\n  TransceiverManager,\n  type TransceiverOptions,\n  useOPUS,\n  usePCMU,\n  useVP8,\n} from \"./media\";\nimport {\n  type RTCPeerConnectionStats,\n  type RTCStats,\n  RTCStatsReport,\n  generateStatsId,\n  getStatsTimestamp,\n} from \"./media/stats\";\nimport { SctpTransportManager } from \"./sctpManager\";\nimport {\n  type BundlePolicy,\n  type MediaDescription,\n  SessionDescription,\n} from \"./sdp\";\nimport { type RTCSessionDescriptionInit, SDPManager } from \"./sdpManager\";\nimport { SecureTransportManager } from \"./secureTransportManager\";\nimport type { DtlsKeys, RTCDtlsTransport } from \"./transport/dtls\";\nimport type {\n  IceGathererState,\n  RTCIceCandidate,\n  RTCIceCandidateInit,\n  RTCIceConnectionState,\n  RTCIceTransport,\n} from \"./transport/ice\";\nimport type { ConnectionState, Kind, RTCSignalingState } from \"./types/domain\";\nimport type { Callback, CallbackWithValue } from \"./types/util\";\nimport { andDirection, deepMerge } from \"./utils\";\n\nconst log = debug(\"werift:packages/webrtc/src/peerConnection.ts\");\n\nexport class RTCPeerConnection extends EventTarget {\n  readonly cname = uuid.v4();\n\n  config: Required<PeerConfig> = cloneDeep<PeerConfig>(defaultPeerConfig);\n  signalingState: RTCSignalingState = \"stable\";\n  negotiationneeded = false;\n  needRestart = false;\n  private readonly router = new RtpRouter();\n  private readonly sdpManager: SDPManager;\n  private readonly transceiverManager: TransceiverManager;\n  private readonly sctpManager: SctpTransportManager;\n  private readonly secureManager: SecureTransportManager;\n  private isClosed = false;\n  private shouldNegotiationneeded = false;\n\n  readonly iceGatheringStateChange = new Event<[IceGathererState]>();\n  readonly iceConnectionStateChange = new Event<[RTCIceConnectionState]>();\n  readonly signalingStateChange = new Event<[RTCSignalingState]>();\n  readonly connectionStateChange = new Event<[ConnectionState]>();\n  readonly onDataChannel = new Event<[RTCDataChannel]>();\n  readonly onRemoteTransceiverAdded = new Event<[RTCRtpTransceiver]>();\n  readonly onTransceiverAdded = new Event<[RTCRtpTransceiver]>();\n  readonly onIceCandidate = new Event<[RTCIceCandidate | undefined]>();\n  readonly onNegotiationneeded = new Event<[]>();\n  readonly onTrack = new Event<[MediaStreamTrack]>();\n\n  ondatachannel?: CallbackWithValue<RTCDataChannelEvent>;\n  onicecandidate?: CallbackWithValue<RTCPeerConnectionIceEvent>;\n  onicecandidateerror?: CallbackWithValue<any>;\n  onicegatheringstatechange?: CallbackWithValue<any>;\n  onnegotiationneeded?: CallbackWithValue<any>;\n  onsignalingstatechange?: CallbackWithValue<any>;\n  ontrack?: CallbackWithValue<RTCTrackEvent>;\n  onconnectionstatechange?: Callback;\n  oniceconnectionstatechange?: Callback;\n\n  constructor(config: Partial<PeerConfig> = {}) {\n    super();\n\n    this.setConfiguration(config);\n\n    this.sdpManager = new SDPManager({\n      cname: this.cname,\n      bundlePolicy: this.config.bundlePolicy,\n    });\n    this.transceiverManager = new TransceiverManager(\n      this.cname,\n      this.config,\n      this.router,\n    );\n    this.transceiverManager.onTransceiverAdded.pipe(this.onTransceiverAdded);\n    this.transceiverManager.onRemoteTransceiverAdded.pipe(\n      this.onRemoteTransceiverAdded,\n    );\n    this.transceiverManager.onTrack.subscribe(\n      ({ track, stream, transceiver }) => {\n        const event: RTCTrackEvent = {\n          track,\n          streams: [stream],\n          transceiver,\n          receiver: transceiver.receiver,\n        };\n        this.onTrack.execute(track);\n        this.emit(\"track\", event);\n        if (this.ontrack) {\n          this.ontrack(event);\n        }\n      },\n    );\n    this.transceiverManager.onNegotiationNeeded.subscribe(() =>\n      this.needNegotiation(),\n    );\n    this.sctpManager = new SctpTransportManager();\n    this.sctpManager.onDataChannel.subscribe((channel) => {\n      this.onDataChannel.execute(channel);\n      const event: RTCDataChannelEvent = { channel };\n      this.ondatachannel?.(event);\n      this.emit(\"datachannel\", event);\n    });\n    this.secureManager = new SecureTransportManager({\n      config: this.config,\n      sctpManager: this.sctpManager,\n      transceiverManager: this.transceiverManager,\n    });\n    this.secureManager.iceGatheringStateChange.pipe(\n      this.iceGatheringStateChange,\n    );\n    this.secureManager.iceConnectionStateChange.subscribe((state) => {\n      if (state === \"closed\") {\n        this.close();\n      }\n      this.iceConnectionStateChange.execute(state);\n    });\n    this.secureManager.connectionStateChange.subscribe((state) => {\n      this.connectionStateChange.execute(state);\n      this.onconnectionstatechange?.();\n      this.emit(\"connectionstatechange\");\n    });\n    this.secureManager.onIceCandidate.subscribe((candidate) => {\n      const iceCandidate = candidate ? candidate.toJSON() : undefined;\n      this.onIceCandidate.execute(iceCandidate);\n      this.onicecandidate?.({ candidate: iceCandidate });\n      this.emit(\"icecandidate\", { candidate: iceCandidate });\n    });\n  }\n\n  get connectionState() {\n    return this.secureManager.connectionState;\n  }\n  get iceConnectionState() {\n    return this.secureManager.iceConnectionState;\n  }\n  get iceGathererState() {\n    return this.secureManager.iceGatheringState;\n  }\n  get iceGatheringState() {\n    return this.secureManager.iceGatheringState;\n  }\n  get dtlsTransports() {\n    return this.secureManager.dtlsTransports;\n  }\n  get sctpTransport() {\n    return this.sctpManager.sctpTransport;\n  }\n  get sctpRemotePort() {\n    return this.sctpManager.sctpRemotePort;\n  }\n  get iceTransports() {\n    return this.secureManager.iceTransports;\n  }\n  get extIdUriMap() {\n    return this.router.extIdUriMap;\n  }\n  get iceGeneration() {\n    return this.iceTransports[0].connection.generation;\n  }\n  get localDescription() {\n    return this.sdpManager.localDescription;\n  }\n  get remoteDescription() {\n    return this.sdpManager.remoteDescription;\n  }\n  /**@private */\n  get _localDescription() {\n    return this.sdpManager._localDescription;\n  }\n  /**@private */\n  get _remoteDescription() {\n    return this.sdpManager._remoteDescription;\n  }\n\n  getTransceivers() {\n    return this.transceiverManager.getTransceivers();\n  }\n\n  getSenders(): RTCRtpSender[] {\n    return this.transceiverManager.getSenders();\n  }\n\n  getReceivers() {\n    return this.transceiverManager.getReceivers();\n  }\n\n  setConfiguration(config: Partial<PeerConfig>) {\n    deepMerge(this.config, config);\n\n    if (this.config.icePortRange) {\n      const [min, max] = this.config.icePortRange;\n      if (min === max) throw new Error(\"should not be same value\");\n      if (min >= max) throw new Error(\"The min must be less than max\");\n    }\n\n    for (const [i, codecParams] of enumerate([\n      ...(this.config.codecs.audio || []),\n      ...(this.config.codecs.video || []),\n    ])) {\n      if (codecParams.payloadType != undefined) {\n        continue;\n      }\n\n      codecParams.payloadType = 96 + i;\n      switch (codecParams.name.toLowerCase()) {\n        case \"rtx\":\n          {\n            codecParams.parameters = `apt=${codecParams.payloadType - 1}`;\n          }\n          break;\n        case \"red\":\n          {\n            if (codecParams.contentType === \"audio\") {\n              const redundant = codecParams.payloadType + 1;\n              codecParams.parameters = `${redundant}/${redundant}`;\n              codecParams.payloadType = 63;\n            }\n          }\n          break;\n      }\n    }\n\n    [\n      ...(this.config.headerExtensions.audio || []),\n      ...(this.config.headerExtensions.video || []),\n    ].forEach((v, i) => {\n      v.id = 1 + i;\n    });\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  async createOffer({ iceRestart }: { iceRestart?: boolean } = {}) {\n    if (iceRestart || this.needRestart) {\n      this.needRestart = false;\n      this.secureManager.restartIce();\n    }\n\n    await this.secureManager.ensureCerts();\n\n    for (const transceiver of this.transceiverManager.getTransceivers()) {\n      if (transceiver.codecs.length === 0) {\n        this.transceiverManager.assignTransceiverCodecs(transceiver);\n      }\n      if (transceiver.headerExtensions.length === 0) {\n        transceiver.headerExtensions =\n          this.config.headerExtensions[transceiver.kind] ?? [];\n      }\n    }\n\n    const description = this.sdpManager.buildOfferSdp(\n      this.transceiverManager.getTransceivers(),\n      this.sctpTransport,\n    );\n    return description.toJSON();\n  }\n\n  private createSctpTransport() {\n    const sctp = this.sctpManager.createSctpTransport();\n    const dtlsTransport = this.findOrCreateTransport();\n    sctp.setDtlsTransport(dtlsTransport);\n    return sctp;\n  }\n\n  createDataChannel(\n    label: string,\n    options: Partial<{\n      maxPacketLifeTime?: number;\n      protocol: string;\n      maxRetransmits?: number;\n      ordered: boolean;\n      negotiated: boolean;\n      id?: number;\n    }> = {},\n  ): RTCDataChannel {\n    if (!this.sctpTransport) {\n      this.createSctpTransport();\n      this.needNegotiation();\n    }\n\n    const channel = this.sctpManager.createDataChannel(label, options);\n    if (!channel.sctp.dtlsTransport) {\n      const dtlsTransport = this.findOrCreateTransport();\n      channel.sctp.setDtlsTransport(dtlsTransport);\n    }\n    return channel;\n  }\n\n  removeTrack(sender: RTCRtpSender) {\n    if (this.isClosed) {\n      throw new Error(\"peer closed\");\n    }\n    this.transceiverManager.removeTrack(sender);\n    this.needNegotiation();\n  }\n\n  private needNegotiation = async () => {\n    this.shouldNegotiationneeded = true;\n    if (this.negotiationneeded || this.signalingState !== \"stable\") {\n      return;\n    }\n    this.shouldNegotiationneeded = false;\n    setImmediate(() => {\n      this.negotiationneeded = true;\n      this.onNegotiationneeded.execute();\n      if (this.onnegotiationneeded) this.onnegotiationneeded({});\n    });\n  };\n\n  private findOrCreateTransport() {\n    const [existing] = this.iceTransports;\n\n    // Gather ICE candidates for only one track. If the remote endpoint is not bundle-aware, negotiate only one media track.\n    // https://w3c.github.io/webrtc-pc/#rtcbundlepolicy-enum\n    if (this.sdpManager.bundlePolicy === \"max-bundle\") {\n      if (existing) {\n        return this.dtlsTransports[0];\n      }\n    }\n\n    const dtlsTransport = this.secureManager.createTransport();\n    dtlsTransport.onRtp.subscribe((rtp) => {\n      this.router.routeRtp(rtp);\n    });\n    dtlsTransport.onRtcp.subscribe((rtcp) => {\n      this.router.routeRtcp(rtcp);\n    });\n    const iceTransport = dtlsTransport.iceTransport;\n\n    iceTransport.onNegotiationNeeded.subscribe(() => {\n      this.needNegotiation();\n    });\n    iceTransport.onIceCandidate.subscribe((candidate) => {\n      if (!this.localDescription) {\n        log(\"localDescription not found when ice candidate was gathered\");\n        return;\n      }\n      if (!candidate) {\n        this.sdpManager.setLocal(\n          this._localDescription!,\n          this.transceiverManager.getTransceivers(),\n          this.sctpTransport,\n        );\n        this.onIceCandidate.execute(undefined);\n        if (this.onicecandidate) {\n          this.onicecandidate({ candidate: undefined });\n        }\n        this.emit(\"icecandidate\", { candidate: undefined });\n        return;\n      }\n\n      if (!this._localDescription) {\n        log(\"localDescription not found when ice candidate was gathered\");\n        return;\n      }\n\n      this.secureManager.handleNewIceCandidate({\n        candidate,\n        bundlePolicy: this.sdpManager.bundlePolicy,\n        remoteIsBundled: !!this.sdpManager.remoteIsBundled,\n        media: this._localDescription.media[0],\n        transceiver: this.transceiverManager\n          .getTransceivers()\n          .find((t) => t.dtlsTransport.iceTransport.id === iceTransport.id),\n        sctpTransport:\n          this.sctpTransport?.dtlsTransport.iceTransport.id === iceTransport.id\n            ? this.sctpTransport\n            : undefined,\n      });\n    });\n\n    return dtlsTransport;\n  }\n\n  async setLocalDescription(sessionDescription?: {\n    type: \"offer\" | \"answer\";\n    sdp: string;\n  }): Promise<SessionDescription> {\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription#type\n    const implicitOfferState: RTCSignalingState[] = [\n      \"stable\",\n      \"have-local-offer\",\n      \"have-remote-pranswer\",\n    ];\n    sessionDescription =\n      sessionDescription ??\n      (implicitOfferState.includes(this.signalingState)\n        ? await this.createOffer()\n        : await this.createAnswer());\n\n    // # parse and validate description\n    const description = this.sdpManager.parseSdp({\n      sdp: sessionDescription.sdp,\n      isLocal: true,\n      signalingState: this.signalingState,\n      type: sessionDescription.type,\n    });\n\n    // # update signaling state\n    if (description.type === \"offer\") {\n      this.setSignalingState(\"have-local-offer\");\n    } else if (description.type === \"answer\") {\n      this.setSignalingState(\"stable\");\n    }\n\n    // # assign MID\n    for (const [i, media] of enumerate(description.media)) {\n      const mid = media.rtp.muxId!;\n      this.sdpManager.registerMid(mid);\n      if ([\"audio\", \"video\"].includes(media.kind)) {\n        const transceiver =\n          this.transceiverManager.getTransceiverByMLineIndex(i);\n        if (transceiver) {\n          transceiver.mid = mid;\n        }\n      }\n      if (media.kind === \"application\" && this.sctpTransport) {\n        this.sctpTransport.mid = mid;\n      }\n    }\n\n    // setup ice,dtls role\n    const role = description.media.find((media) => media.dtlsParams)?.dtlsParams\n      ?.role;\n\n    this.secureManager.setLocalRole({\n      type: description.type,\n      role,\n    });\n\n    // # configure direction\n    if ([\"answer\", \"pranswer\"].includes(description.type)) {\n      for (const t of this.transceiverManager.getTransceivers()) {\n        const direction = andDirection(t.direction, t.offerDirection);\n        t.setCurrentDirection(direction);\n      }\n    }\n\n    // for trickle ice\n    this.sdpManager.setLocal(\n      description,\n      this.transceiverManager.getTransceivers(),\n      this.sctpTransport,\n    );\n\n    await this.gatherCandidates().catch((e) => {\n      log(\"gatherCandidates failed\", e);\n    });\n\n    // connect transports\n    if (description.type === \"answer\") {\n      this.connect().catch((err) => {\n        log(\"connect failed\", err);\n        this.secureManager.setConnectionState(\"failed\");\n      });\n    }\n\n    this.sdpManager.setLocal(\n      description,\n      this.transceiverManager.getTransceivers(),\n      this.sctpTransport,\n    );\n\n    if (this.shouldNegotiationneeded) {\n      this.needNegotiation();\n    }\n\n    return description;\n  }\n\n  private async gatherCandidates() {\n    await this.secureManager.gatherCandidates(\n      !!this.sdpManager.remoteIsBundled,\n    );\n  }\n\n  async addIceCandidate(\n    candidateMessage: RTCIceCandidate | RTCIceCandidateInit,\n  ) {\n    const sdp = this.sdpManager.buildOfferSdp(\n      this.transceiverManager.getTransceivers(),\n      this.sctpTransport,\n    );\n    await this.secureManager.addIceCandidate(sdp, candidateMessage);\n  }\n\n  private async connect() {\n    log(\"start connect\");\n\n    const res = await Promise.allSettled(\n      this.dtlsTransports.map(async (dtlsTransport) => {\n        const { iceTransport } = dtlsTransport;\n        if (iceTransport.state === \"connected\") {\n          return;\n        }\n        const checkDtlsConnected = () => dtlsTransport.state === \"connected\";\n\n        if (checkDtlsConnected()) {\n          return;\n        }\n\n        this.secureManager.setConnectionState(\"connecting\");\n\n        await iceTransport.start().catch((err) => {\n          log(\"iceTransport.start failed\", err);\n          throw err;\n        });\n\n        if (checkDtlsConnected()) {\n          return;\n        }\n\n        await dtlsTransport.start().catch((err) => {\n          log(\"dtlsTransport.start failed\", err);\n          throw err;\n        });\n\n        if (\n          this.sctpTransport &&\n          this.sctpTransport.dtlsTransport.id === dtlsTransport.id\n        ) {\n          await this.sctpManager.connectSctp();\n        }\n      }),\n    );\n\n    if (res.find((r) => r.status === \"rejected\")) {\n      this.secureManager.setConnectionState(\"failed\");\n    } else {\n      this.secureManager.setConnectionState(\"connected\");\n    }\n  }\n\n  restartIce() {\n    this.needRestart = true;\n    this.needNegotiation();\n  }\n\n  async setRemoteDescription(sessionDescription: RTCSessionDescriptionInit) {\n    if (sessionDescription instanceof SessionDescription) {\n      sessionDescription = sessionDescription.toSdp();\n    }\n\n    // # parse and validate description\n    const remoteSdp = this.sdpManager.setRemoteDescription(\n      sessionDescription,\n      this.signalingState,\n    );\n\n    let bundleTransport: RTCDtlsTransport | undefined;\n\n    // # apply description\n\n    const matchTransceiverWithMedia = (\n      transceiver: RTCRtpTransceiver,\n      media: MediaDescription,\n    ) =>\n      transceiver.kind === media.kind &&\n      [undefined, media.rtp.muxId].includes(transceiver.mid);\n\n    let transports = remoteSdp.media.map((remoteMedia, i) => {\n      let dtlsTransport: RTCDtlsTransport;\n\n      if ([\"audio\", \"video\"].includes(remoteMedia.kind)) {\n        let transceiver = this.transceiverManager\n          .getTransceivers()\n          .find((t) => matchTransceiverWithMedia(t, remoteMedia));\n        if (!transceiver) {\n          // create remote transceiver\n          transceiver = this.addTransceiver(remoteMedia.kind, {\n            direction: \"recvonly\",\n          });\n          transceiver.mid = remoteMedia.rtp.muxId;\n          this.onRemoteTransceiverAdded.execute(transceiver);\n        } else {\n          if (transceiver.direction === \"inactive\" && transceiver.stopping) {\n            transceiver.stopped = true;\n\n            if (sessionDescription.type === \"answer\") {\n              transceiver.setCurrentDirection(\"inactive\");\n            }\n            return;\n          }\n        }\n\n        if (this.sdpManager.remoteIsBundled) {\n          if (!bundleTransport) {\n            bundleTransport = transceiver.dtlsTransport;\n          } else {\n            transceiver.setDtlsTransport(bundleTransport);\n          }\n        }\n\n        dtlsTransport = transceiver.dtlsTransport;\n\n        this.transceiverManager.setRemoteRTP(\n          transceiver,\n          remoteMedia,\n          remoteSdp.type,\n          i,\n        );\n      } else if (remoteMedia.kind === \"application\") {\n        let sctpTransport = this.sctpTransport;\n        if (!sctpTransport) {\n          sctpTransport = this.createSctpTransport();\n          sctpTransport.mid = remoteMedia.rtp.muxId;\n        }\n\n        if (this.sdpManager.remoteIsBundled) {\n          if (!bundleTransport) {\n            bundleTransport = sctpTransport.dtlsTransport;\n          } else {\n            sctpTransport.setDtlsTransport(bundleTransport);\n          }\n        }\n\n        dtlsTransport = sctpTransport.dtlsTransport;\n\n        this.sctpManager.setRemoteSCTP(remoteMedia, i);\n      } else {\n        throw new Error(\"invalid media kind\");\n      }\n\n      const iceTransport = dtlsTransport.iceTransport;\n\n      if (remoteMedia.iceParams) {\n        const renomination = !!this.sdpManager.inactiveRemoteMedia;\n        iceTransport.setRemoteParams(remoteMedia.iceParams, renomination);\n\n        // One agent full, one lite:  The full agent MUST take the controlling role, and the lite agent MUST take the controlled role\n        // RFC 8445 S6.1.1\n        if (remoteMedia.iceParams?.iceLite) {\n          iceTransport.connection.iceControlling = true;\n        }\n      }\n      if (remoteMedia.dtlsParams) {\n        dtlsTransport.setRemoteParams(remoteMedia.dtlsParams);\n      }\n\n      // # add ICE candidates\n      remoteMedia.iceCandidates.forEach(iceTransport.addRemoteCandidate);\n\n      if (remoteMedia.iceCandidatesComplete) {\n        iceTransport.addRemoteCandidate(undefined);\n      }\n\n      // # set DTLS role\n      if (remoteSdp.type === \"answer\" && remoteMedia.dtlsParams?.role) {\n        dtlsTransport.role =\n          remoteMedia.dtlsParams.role === \"client\" ? \"server\" : \"client\";\n      }\n      return iceTransport;\n    }) as RTCIceTransport[];\n\n    // filter out inactive transports\n    transports = transports.filter((iceTransport) => !!iceTransport);\n\n    const removedTransceivers = this.transceiverManager\n      .getTransceivers()\n      .filter(\n        (t) =>\n          remoteSdp.media.find((m) => matchTransceiverWithMedia(t, m)) ==\n          undefined,\n      );\n\n    if (sessionDescription.type === \"answer\") {\n      for (const transceiver of removedTransceivers) {\n        // todo: handle answer side transceiver removal work.\n        // event should trigger to notify media source to stop.\n        transceiver.stop();\n        transceiver.stopped = true;\n      }\n    }\n\n    if (remoteSdp.type === \"offer\") {\n      this.setSignalingState(\"have-remote-offer\");\n    } else if (remoteSdp.type === \"answer\") {\n      this.setSignalingState(\"stable\");\n    }\n\n    // connect transports\n    if (remoteSdp.type === \"answer\") {\n      log(\"caller start connect\");\n      this.connect().catch((err) => {\n        log(\"connect failed\", err);\n        this.secureManager.setConnectionState(\"failed\");\n      });\n    }\n\n    this.negotiationneeded = false;\n    if (this.shouldNegotiationneeded) {\n      this.needNegotiation();\n    }\n  }\n\n  addTransceiver(\n    trackOrKind: Kind | MediaStreamTrack,\n    options: Partial<TransceiverOptions> = {},\n  ) {\n    const dtlsTransport = this.findOrCreateTransport();\n    const transceiver = this.transceiverManager.addTransceiver(\n      trackOrKind,\n      dtlsTransport,\n      options,\n    );\n\n    this.secureManager.updateIceConnectionState();\n    this.needNegotiation();\n\n    return transceiver;\n  }\n\n  // todo fix\n  addTrack(\n    track: MediaStreamTrack,\n    /**todo impl */\n    ms?: MediaStream,\n  ): RTCRtpSender {\n    if (this.isClosed) {\n      throw new Error(\"is closed\");\n    }\n    const transceiver = this.transceiverManager.addTrack(track, ms);\n    if (!transceiver.dtlsTransport) {\n      const dtlsTransport = this.findOrCreateTransport();\n      transceiver.setDtlsTransport(dtlsTransport);\n    }\n    this.needNegotiation();\n    return transceiver.sender;\n  }\n\n  async createAnswer() {\n    this.assertNotClosed();\n\n    await this.secureManager.ensureCerts();\n\n    const description = this.sdpManager.buildAnswerSdp({\n      transceivers: this.transceiverManager.getTransceivers(),\n      sctpTransport: this.sctpTransport,\n      signalingState: this.signalingState,\n    });\n    return description.toJSON();\n  }\n\n  private assertNotClosed() {\n    if (this.isClosed) {\n      throw new Error(\"RTCPeerConnection is closed\");\n    }\n  }\n\n  private setSignalingState(state: RTCSignalingState) {\n    log(\"signalingStateChange\", state);\n    this.signalingState = state;\n    this.signalingStateChange.execute(state);\n    if (this.onsignalingstatechange) {\n      this.onsignalingstatechange({});\n    }\n  }\n\n  private createPeerConnectionStats(): RTCPeerConnectionStats {\n    const timestamp = getStatsTimestamp();\n    return {\n      type: \"peer-connection\",\n      id: generateStatsId(\"peer-connection\"),\n      timestamp,\n      dataChannelsOpened: this.sctpManager.dataChannelsOpened,\n      dataChannelsClosed: this.sctpManager.dataChannelsClosed,\n    };\n  }\n\n  async getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport> {\n    const stats: RTCStats[] = [];\n\n    // Peer connection stats - always included regardless of selector\n    stats.push(this.createPeerConnectionStats());\n\n    // Get stats from transceivers\n    const transceiverStats = await this.transceiverManager.getStats(selector);\n    stats.push(...transceiverStats);\n\n    // Get transport stats - always included regardless of selector\n    const transportStats = await this.secureManager.getStats();\n    stats.push(...transportStats);\n\n    // Get data channel stats - always included regardless of selector\n    if (this.sctpTransport) {\n      const dataChannelStats = await this.sctpManager.getStats();\n      if (dataChannelStats) {\n        stats.push(...dataChannelStats);\n      }\n    }\n\n    return new RTCStatsReport(stats);\n  }\n\n  async close() {\n    if (this.isClosed) return;\n\n    this.isClosed = true;\n    this.setSignalingState(\"closed\");\n\n    await this.secureManager.close();\n    await this.sctpManager.close();\n    this.transceiverManager.close();\n\n    this.onDataChannel.allUnsubscribe();\n    this.iceGatheringStateChange.allUnsubscribe();\n    this.iceConnectionStateChange.allUnsubscribe();\n    this.signalingStateChange.allUnsubscribe();\n    this.onTransceiverAdded.allUnsubscribe();\n    this.onRemoteTransceiverAdded.allUnsubscribe();\n    this.onIceCandidate.allUnsubscribe();\n\n    log(\"peerConnection closed\");\n  }\n}\n\nexport interface PeerConfig {\n  codecs: Partial<{\n    /**\n     * When specifying a codec with a fixed payloadType such as PCMU,\n     * it is necessary to set the correct PayloadType in RTCRtpCodecParameters in advance.\n     */\n    audio: RTCRtpCodecParameters[];\n    video: RTCRtpCodecParameters[];\n  }>;\n  headerExtensions: Partial<{\n    audio: RTCRtpHeaderExtensionParameters[];\n    video: RTCRtpHeaderExtensionParameters[];\n  }>;\n  iceTransportPolicy: \"all\" | \"relay\";\n  iceServers: RTCIceServer[];\n  /**Minimum port and Maximum port must not be the same value */\n  icePortRange: [number, number] | undefined;\n  iceInterfaceAddresses: InterfaceAddresses | undefined;\n  /** Add additional host (local) addresses to use for candidate gathering.\n   * Notably, you can include hosts that are normally excluded, such as loopback, tun interfaces, etc.\n   */\n  iceAdditionalHostAddresses: string[] | undefined;\n  iceUseIpv4: boolean;\n  iceUseIpv6: boolean;\n  forceTurnTCP: boolean;\n  /** such as google cloud run */\n  iceUseLinkLocalAddress: boolean | undefined;\n  /** If provided, is called on each STUN request.\n   * Return `true` if a STUN response should be sent, false if it should be skipped. */\n  iceFilterStunResponse:\n    | ((message: Message, addr: Address, protocol: Protocol) => boolean)\n    | undefined;\n  iceFilterCandidatePair: ((pair: CandidatePair) => boolean) | undefined;\n  dtls: Partial<{\n    keys: DtlsKeys;\n  }>;\n  icePasswordPrefix: string | undefined;\n  bundlePolicy: BundlePolicy;\n  debug: Partial<{\n    /**% */\n    inboundPacketLoss: number;\n    /**% */\n    outboundPacketLoss: number;\n    /**ms */\n    receiverReportDelay: number;\n    disableSendNack: boolean;\n    disableRecvRetransmit: boolean;\n  }>;\n  midSuffix: boolean;\n}\n\nexport const findCodecByMimeType = (\n  codecs: RTCRtpCodecParameters[],\n  target: RTCRtpCodecParameters,\n) =>\n  codecs.find(\n    (localCodec) =>\n      localCodec.mimeType.toLowerCase() === target.mimeType.toLowerCase(),\n  )\n    ? target\n    : undefined;\n\nexport type RTCIceServer = {\n  urls: string;\n  username?: string;\n  credential?: string;\n};\n\nexport const defaultPeerConfig: PeerConfig = {\n  codecs: {\n    audio: [useOPUS(), usePCMU()],\n    video: [useVP8()],\n  },\n  headerExtensions: {\n    audio: [],\n    video: [],\n  },\n  iceTransportPolicy: \"all\",\n  iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n  icePortRange: undefined,\n  iceInterfaceAddresses: undefined,\n  iceAdditionalHostAddresses: undefined,\n  iceUseIpv4: true,\n  iceUseIpv6: true,\n  iceFilterStunResponse: undefined,\n  iceFilterCandidatePair: undefined,\n  icePasswordPrefix: undefined,\n  iceUseLinkLocalAddress: undefined,\n  dtls: {},\n  bundlePolicy: \"max-compat\",\n  debug: {},\n  midSuffix: false,\n  forceTurnTCP: false,\n};\n\nexport interface RTCTrackEvent {\n  track: MediaStreamTrack;\n  streams: MediaStream[];\n  transceiver: RTCRtpTransceiver;\n  receiver: RTCRtpReceiver;\n}\n\nexport interface RTCDataChannelEvent {\n  channel: RTCDataChannel;\n}\n\nexport interface RTCPeerConnectionIceEvent {\n  candidate?: RTCIceCandidate;\n}\n"]}