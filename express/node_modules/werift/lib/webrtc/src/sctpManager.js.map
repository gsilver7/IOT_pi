{"version":3,"file":"sctpManager.js","sourceRoot":"","sources":["../../../src/sctpManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, debug } from \"./imports/common\";\n\nimport { RTCDataChannel, RTCDataChannelParameters } from \"./dataChannel\";\nimport {\n  type RTCDataChannelStats,\n  type RTCStats,\n  generateStatsId,\n  getStatsTimestamp,\n} from \"./media/stats\";\nimport type { MediaDescription } from \"./sdp\";\nimport { RTCSctpTransport } from \"./transport/sctp\";\n\nconst log = debug(\"werift:packages/webrtc/src/transport/sctpManager.ts\");\n\nexport class SctpTransportManager {\n  sctpTransport?: RTCSctpTransport;\n  sctpRemotePort?: number;\n  dataChannelsOpened = 0;\n  dataChannelsClosed = 0;\n  private dataChannels: RTCDataChannel[] = [];\n\n  readonly onDataChannel = new Event<[RTCDataChannel]>();\n\n  constructor() {}\n\n  createSctpTransport() {\n    const sctp = new RTCSctpTransport();\n    sctp.mid = undefined;\n    sctp.onDataChannel.subscribe((channel) => {\n      this.dataChannelsOpened++;\n      this.dataChannels.push(channel);\n      this.onDataChannel.execute(channel);\n    });\n\n    this.sctpTransport = sctp;\n\n    return sctp;\n  }\n\n  createDataChannel(\n    label: string,\n    options: Partial<{\n      maxPacketLifeTime?: number;\n      protocol: string;\n      maxRetransmits?: number;\n      ordered: boolean;\n      negotiated: boolean;\n      id?: number;\n    }> = {},\n  ): RTCDataChannel {\n    const base: typeof options = {\n      protocol: \"\",\n      ordered: true,\n      negotiated: false,\n    };\n    const settings: Required<typeof base> = { ...base, ...options } as any;\n\n    if (settings.maxPacketLifeTime && settings.maxRetransmits) {\n      throw new Error(\"can not select both\");\n    }\n\n    if (!this.sctpTransport) {\n      this.sctpTransport = this.createSctpTransport();\n    }\n\n    const parameters = new RTCDataChannelParameters({\n      id: settings.id,\n      label,\n      maxPacketLifeTime: settings.maxPacketLifeTime,\n      maxRetransmits: settings.maxRetransmits,\n      negotiated: settings.negotiated,\n      ordered: settings.ordered,\n      protocol: settings.protocol,\n    });\n\n    const channel = new RTCDataChannel(this.sctpTransport, parameters);\n    this.dataChannelsOpened++;\n    this.dataChannels.push(channel);\n    channel.stateChange.subscribe((state) => {\n      if (state === \"closed\") {\n        this.dataChannelsClosed++;\n        const index = this.dataChannels.indexOf(channel);\n        if (index !== -1) {\n          this.dataChannels.splice(index, 1);\n        }\n      }\n    });\n    return channel;\n  }\n\n  async connectSctp() {\n    if (!this.sctpTransport || !this.sctpRemotePort) {\n      return;\n    }\n\n    await this.sctpTransport.start(this.sctpRemotePort);\n    await this.sctpTransport.sctp.stateChanged.connected.asPromise();\n    log(\"sctp connected\");\n  }\n\n  setRemoteSCTP(remoteMedia: MediaDescription, mLineIndex: number) {\n    if (!this.sctpTransport) {\n      return;\n    }\n\n    // # configure sctp\n    this.sctpRemotePort = remoteMedia.sctpPort;\n    if (!this.sctpRemotePort) {\n      throw new Error(\"sctpRemotePort not exist\");\n    }\n\n    this.sctpTransport.setRemotePort(this.sctpRemotePort);\n    this.sctpTransport.mLineIndex = mLineIndex;\n    if (!this.sctpTransport.mid) {\n      this.sctpTransport.mid = remoteMedia.rtp.muxId;\n    }\n  }\n\n  async close() {\n    if (this.sctpTransport) {\n      await this.sctpTransport.stop();\n    }\n\n    this.onDataChannel.allUnsubscribe();\n  }\n\n  async getStats(): Promise<RTCStats[]> {\n    const timestamp = getStatsTimestamp();\n    const stats: RTCStats[] = [];\n\n    for (const channel of this.dataChannels) {\n      const channelStats: RTCDataChannelStats = {\n        type: \"data-channel\",\n        id: generateStatsId(\"data-channel\", channel.id),\n        timestamp,\n        label: channel.label,\n        protocol: channel.protocol,\n        dataChannelIdentifier: channel.id,\n        state: channel.readyState,\n        messagesSent: channel.messagesSent || 0,\n        bytesSent: channel.bytesSent || 0,\n        messagesReceived: channel.messagesReceived || 0,\n        bytesReceived: channel.bytesReceived || 0,\n      };\n      stats.push(channelStats);\n    }\n\n    return stats;\n  }\n}\n"]}