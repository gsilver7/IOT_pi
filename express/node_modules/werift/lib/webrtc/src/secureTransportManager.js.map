{"version":3,"file":"secureTransportManager.js","sourceRoot":"","sources":["../../../src/secureTransportManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { SRTP_PROFILE } from \"./const\";\nimport { Event, debug } from \"./imports/common\";\nimport type { RTCRtpTransceiver, TransceiverManager } from \"./media\";\nimport type { RTCStats } from \"./media/stats\";\nimport type { PeerConfig } from \"./peerConnection\";\nimport type { SctpTransportManager } from \"./sctpManager\";\nimport type { BundlePolicy, MediaDescription, SessionDescription } from \"./sdp\";\nimport {\n  type DtlsKeys,\n  RTCCertificate,\n  RTCDtlsTransport,\n} from \"./transport/dtls\";\nimport { IceCandidate, RTCIceGatherer, RTCIceTransport } from \"./transport/ice\";\nimport type {\n  IceGathererState,\n  RTCIceCandidate,\n  RTCIceCandidateInit,\n  RTCIceConnectionState,\n} from \"./transport/ice\";\nimport type { RTCSctpTransport } from \"./transport/sctp\";\nimport type { ConnectionState } from \"./types/domain\";\nimport { parseIceServers } from \"./utils\";\n\nconst log = debug(\n  \"werift:packages/webrtc/src/transport/secureTransportManager.ts\",\n);\nexport class SecureTransportManager {\n  connectionState: ConnectionState = \"new\";\n  iceConnectionState: RTCIceConnectionState = \"new\";\n  iceGatheringState: IceGathererState = \"new\";\n  certificate?: RTCCertificate;\n\n  readonly iceGatheringStateChange = new Event<[IceGathererState]>();\n  readonly iceConnectionStateChange = new Event<[RTCIceConnectionState]>();\n  readonly onIceCandidate = new Event<[IceCandidate | undefined]>();\n  readonly connectionStateChange = new Event<[ConnectionState]>();\n\n  private config: PeerConfig;\n  private transceiverManager: TransceiverManager;\n  private sctpManager: SctpTransportManager;\n\n  constructor({\n    config,\n    transceiverManager,\n    sctpManager,\n  }: {\n    config: PeerConfig;\n    transceiverManager: TransceiverManager;\n    sctpManager: SctpTransportManager;\n  }) {\n    this.config = config;\n    this.transceiverManager = transceiverManager;\n    this.sctpManager = sctpManager;\n\n    if (this.config.dtls) {\n      const { keys } = this.config.dtls;\n\n      if (keys) {\n        this.setupCertificate(keys);\n      }\n    }\n  }\n\n  get dtlsTransports() {\n    const transports = [\n      ...this.transceiverManager.getTransceivers().map((t) => t.dtlsTransport),\n      this.sctpManager.sctpTransport?.dtlsTransport,\n    ].filter((t) => t != undefined);\n\n    return transports.reduce((acc: RTCDtlsTransport[], cur) => {\n      if (!acc.map((d) => d.id).includes(cur.id)) {\n        acc.push(cur);\n      }\n      return acc;\n    }, []);\n  }\n\n  get iceTransports() {\n    return this.dtlsTransports.map((d) => d.iceTransport);\n  }\n\n  setupCertificate(keys: DtlsKeys) {\n    this.certificate = new RTCCertificate(\n      keys.keyPem,\n      keys.certPem,\n      keys.signatureHash,\n    );\n  }\n\n  createTransport() {\n    const [existing] = this.iceTransports;\n\n    const iceGatherer = new RTCIceGatherer({\n      ...parseIceServers(this.config.iceServers),\n      forceTurn: this.config.iceTransportPolicy === \"relay\",\n      portRange: this.config.icePortRange,\n      interfaceAddresses: this.config.iceInterfaceAddresses,\n      additionalHostAddresses: this.config.iceAdditionalHostAddresses,\n      filterStunResponse: this.config.iceFilterStunResponse,\n      filterCandidatePair: this.config.iceFilterCandidatePair,\n      localPasswordPrefix: this.config.icePasswordPrefix,\n      useIpv4: this.config.iceUseIpv4,\n      useIpv6: this.config.iceUseIpv6,\n      turnTransport: this.config.forceTurnTCP === true ? \"tcp\" : \"udp\",\n      useLinkLocalAddress: this.config.iceUseLinkLocalAddress,\n    });\n\n    if (existing) {\n      iceGatherer.connection.localUsername = existing.connection.localUsername;\n      iceGatherer.connection.localPassword = existing.connection.localPassword;\n    }\n\n    iceGatherer.onGatheringStateChange.subscribe(() => {\n      this.updateIceGatheringState();\n    });\n    this.updateIceGatheringState();\n\n    const iceTransport = new RTCIceTransport(iceGatherer);\n    iceTransport.onStateChange.subscribe(() => {\n      this.updateIceConnectionState();\n    });\n\n    const dtlsTransport = new RTCDtlsTransport(\n      this.config,\n      iceTransport,\n      this.certificate,\n      srtpProfiles,\n    );\n\n    return dtlsTransport;\n  }\n\n  handleNewIceCandidate({\n    candidate,\n    media,\n    remoteIsBundled,\n    transceiver,\n    sctpTransport,\n    bundlePolicy,\n  }: {\n    candidate: IceCandidate;\n    media?: MediaDescription;\n    remoteIsBundled: boolean;\n    transceiver?: RTCRtpTransceiver;\n    sctpTransport?: RTCSctpTransport;\n    bundlePolicy?: BundlePolicy;\n  }) {\n    // Assign sdpMid and sdpMLineIndex\n    if (bundlePolicy === \"max-bundle\" || remoteIsBundled) {\n      candidate.sdpMLineIndex = 0;\n      if (media) {\n        candidate.sdpMid = media.rtp.muxId;\n      }\n    } else {\n      if (transceiver) {\n        candidate.sdpMLineIndex = transceiver.mLineIndex;\n        candidate.sdpMid = transceiver.mid;\n      }\n      if (sctpTransport) {\n        candidate.sdpMLineIndex = sctpTransport.mLineIndex;\n        candidate.sdpMid = sctpTransport.mid;\n      }\n    }\n\n    if (\n      candidate.foundation &&\n      !candidate.foundation.startsWith(\"candidate:\")\n    ) {\n      candidate.foundation = \"candidate:\" + candidate.foundation;\n    }\n\n    this.onIceCandidate.execute(candidate);\n\n    return candidate;\n  }\n\n  async addIceCandidate(\n    sdp: SessionDescription,\n    candidateMessage: RTCIceCandidate | RTCIceCandidateInit,\n  ) {\n    const candidate = IceCandidate.fromJSON(candidateMessage);\n    if (!candidate) {\n      return;\n    }\n\n    let iceTransport: RTCIceTransport | undefined;\n\n    if (typeof candidate.sdpMid === \"number\") {\n      iceTransport = this.getTransportByMid(candidate.sdpMid);\n    }\n\n    if (!iceTransport && typeof candidate.sdpMLineIndex === \"number\") {\n      iceTransport = this.getTransportByMLineIndex(\n        sdp,\n        candidate.sdpMLineIndex,\n      );\n    }\n\n    if (!iceTransport) {\n      iceTransport = this.iceTransports[0];\n    }\n\n    if (iceTransport) {\n      await iceTransport.addRemoteCandidate(candidate);\n    } else {\n      log(\"iceTransport not found for candidate\", candidate);\n    }\n  }\n\n  private getTransportByMid(mid: string) {\n    let iceTransport: RTCIceTransport | undefined;\n\n    const transceiver = this.transceiverManager\n      .getTransceivers()\n      .find((t) => t.mid === mid);\n    if (transceiver) {\n      iceTransport = transceiver.dtlsTransport.iceTransport;\n    } else if (!iceTransport && this.sctpManager.sctpTransport?.mid === mid) {\n      iceTransport = this.sctpManager.sctpTransport.dtlsTransport.iceTransport;\n    }\n\n    return iceTransport;\n  }\n\n  private getTransportByMLineIndex(sdp: SessionDescription, index: number) {\n    const media = sdp.media[index];\n    if (!media) {\n      return;\n    }\n    const transport = this.getTransportByMid(media.rtp.muxId!);\n\n    return transport;\n  }\n\n  restartIce() {\n    for (const transport of this.iceTransports) {\n      transport.restart();\n    }\n  }\n\n  setLocalRole({\n    type,\n    role,\n  }: {\n    type: \"offer\" | \"answer\";\n    role: \"auto\" | \"client\" | \"server\" | undefined;\n  }) {\n    for (const dtlsTransport of this.dtlsTransports) {\n      const iceTransport = dtlsTransport.iceTransport;\n      if (type === \"offer\") {\n        iceTransport.connection.iceControlling = true;\n      } else {\n        iceTransport.connection.iceControlling = false;\n      }\n      // RFC 8445 S6.1.1\n      if (iceTransport.connection.remoteIsLite) {\n        iceTransport.connection.iceControlling = true;\n      }\n\n      // # set DTLS role for mediasoup\n      if (type === \"answer\") {\n        if (role) {\n          dtlsTransport.role = role;\n        }\n      }\n    }\n  }\n\n  // https://w3c.github.io/webrtc-pc/#dom-rtcicegatheringstate\n  private updateIceGatheringState() {\n    const all = this.iceTransports;\n\n    function allMatch(...state: IceGathererState[]) {\n      return (\n        all.filter((check) => state.includes(check.gatheringState)).length ===\n        all.length\n      );\n    }\n\n    let newState: IceGathererState;\n\n    if (all.length && allMatch(\"complete\")) {\n      newState = \"complete\";\n    } else if (!all.length || allMatch(\"new\", \"complete\")) {\n      newState = \"new\";\n    } else if (all.map((check) => check.gatheringState).includes(\"gathering\")) {\n      newState = \"gathering\";\n    } else {\n      newState = \"new\";\n    }\n\n    if (this.iceGatheringState === newState) {\n      return;\n    }\n\n    this.iceGatheringState = newState;\n    this.iceGatheringStateChange.execute(newState);\n  }\n\n  // https://w3c.github.io/webrtc-pc/#dom-rtciceconnectionstate\n  updateIceConnectionState() {\n    const all = this.iceTransports;\n    let newState: RTCIceConnectionState;\n\n    function allMatch(...state: RTCIceConnectionState[]) {\n      return (\n        all.filter((check) => state.includes(check.state)).length === all.length\n      );\n    }\n\n    if (this.connectionState === \"closed\") {\n      newState = \"closed\";\n    } else if (allMatch(\"failed\")) {\n      newState = \"failed\";\n    } else if (allMatch(\"disconnected\")) {\n      newState = \"disconnected\";\n    } else if (allMatch(\"new\", \"closed\")) {\n      newState = \"new\";\n    } else if (allMatch(\"new\", \"checking\")) {\n      newState = \"checking\";\n    } else if (allMatch(\"completed\", \"closed\")) {\n      newState = \"completed\";\n    } else if (allMatch(\"connected\", \"completed\", \"closed\")) {\n      newState = \"connected\";\n    } else {\n      // unreachable?\n      newState = \"new\";\n    }\n\n    if (this.iceConnectionState === newState) {\n      return;\n    }\n\n    log(\"iceConnectionStateChange\", newState);\n    this.iceConnectionState = newState;\n    this.iceConnectionStateChange.execute(newState);\n  }\n\n  async gatherCandidates(remoteIsBundled: boolean) {\n    const connected = this.iceTransports.find(\n      (transport) =>\n        transport.state === \"connected\" || transport.state === \"completed\",\n    );\n    if (remoteIsBundled && connected) {\n      // no need to gather ice candidates on an existing bundled connection\n      log(\"skipping ICE gathering for bundled connection\");\n    } else {\n      await Promise.allSettled(\n        this.iceTransports.map((iceTransport) => iceTransport.gather()),\n      ).catch((e) => {\n        // エラーハンドリングを追加 (例: ログ出力)\n        log(\"gatherCandidates failed\", e);\n      });\n    }\n  }\n\n  setConnectionState(state: ConnectionState) {\n    log(\"connectionStateChange\", state);\n    this.connectionState = state;\n    this.connectionStateChange.execute(state);\n  }\n\n  async getStats(): Promise<RTCStats[]> {\n    const stats: RTCStats[] = [];\n\n    for (const dtlsTransport of this.dtlsTransports) {\n      const transportStats = await dtlsTransport.getStats();\n      if (transportStats) {\n        stats.push(...transportStats);\n      }\n    }\n\n    return stats;\n  }\n\n  async ensureCerts() {\n    if (!this.certificate) {\n      this.certificate = await RTCDtlsTransport.SetupCertificate();\n    }\n\n    for (const dtlsTransport of this.dtlsTransports) {\n      dtlsTransport.localCertificate = this.certificate;\n    }\n  }\n\n  async close() {\n    await Promise.allSettled([...this.dtlsTransports.map((t) => t.stop())]);\n\n    this.iceGatheringStateChange.allUnsubscribe();\n    this.iceConnectionStateChange.allUnsubscribe();\n    this.onIceCandidate.allUnsubscribe();\n    this.connectionStateChange.allUnsubscribe();\n  }\n}\n\nconst srtpProfiles = [\n  SRTP_PROFILE.SRTP_AEAD_AES_128_GCM, // prefer\n  SRTP_PROFILE.SRTP_AES128_CM_HMAC_SHA1_80,\n];\n"]}