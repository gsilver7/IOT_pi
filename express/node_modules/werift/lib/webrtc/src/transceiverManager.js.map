{"version":3,"file":"transceiverManager.js","sourceRoot":"","sources":["../../../src/transceiverManager.ts"],"names":[],"mappings":";;;AAAA,mCAA8D;AAC9D,6CAAgD;AAChD,mCAgBiB;AAEjB,qDAAwE;AACxE,+BAAyE;AAGzE,mCAA2C;AAE3C,MAAM,GAAG,GAAG,IAAA,cAAK,EAAC,2DAA2D,CAAC,CAAC;AAE/E,MAAa,kBAAkB;IAgB7B,YACmB,KAAa,EACb,MAA4B,EAC5B,MAAiB;QAFlC;;;;mBAAiB,KAAK;WAAQ;QAC9B;;;;mBAAiB,MAAM;WAAsB;QAC7C;;;;mBAAiB,MAAM;WAAW;QAlBnB;;;;mBAAoC,EAAE;WAAC;QAE/C;;;;mBAAqB,IAAI,cAAK,EAAuB;WAAC;QACtD;;;;mBAA2B,IAAI,cAAK,EAAuB;WAAC;QAC5D;;;;mBAAU,IAAI,cAAK,EAQzB;WAAC;QACK;;;;mBAAsB,IAAI,cAAK,EAAM;WAAC;IAM5C,CAAC;IAEJ,eAAe;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,0BAA0B,CAAC,KAAa;QACtC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3B,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,KAAK,KAAK,CAClD,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,CAAoB;QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED,kBAAkB,CAAC,CAAoB,EAAE,KAAa;QACpD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,cAAc,CACZ,WAAoC,EACpC,aAAgC,EAChC,UAAuC,EAAE;QAEzC,MAAM,IAAI,GACR,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;QAEnE,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,UAAU,CAAC;QAElD,MAAM,MAAM,GAAG,IAAI,oBAAY,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,QAAQ,GAAG,IAAI,sBAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACpE,MAAM,cAAc,GAAG,IAAI,yBAAiB,CAC1C,IAAI,EACJ,aAAa,EACb,QAAQ,EACR,MAAM,EACN,SAAS,CACV,CAAC;QACF,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAErD,iBAAiB;QACjB,MAAM,wBAAwB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAC1D,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,KAAK,UAAU,CACzC,CAAC;QACF,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAChD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,KAAK,UAAU,CACzC,CAAC;QACF,IAAI,wBAAwB,GAAG,CAAC,CAAC,IAAI,mBAAmB,EAAE,CAAC;YACzD,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,wBAAwB,CAAC,CAAC;YAClE,cAAc,CAAC,UAAU,GAAG,mBAAmB,CAAC,UAAU,CAAC;YAC3D,mBAAmB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAEhD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,QAAQ,CAAC,KAAuB,EAAE,EAAgB;QAChD,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1E,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CACxD,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,SAAS;YAC3B,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YACrB,wBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,IAAI,CAClD,CAAC;QACF,IAAI,2BAA2B,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,2BAA2B,CAAC,MAAM,CAAC;YAClD,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,2BAA2B,CAAC;QACrC,CAAC;QAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAC/C,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,SAAS;YAC3B,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YACrB,wBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,KAAK;YAChD,CAAC,CAAC,CAAC,aAAa,CACnB,CAAC;QACF,IAAI,kBAAkB,EAAE,CAAC;YACvB,MAAM,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;YACzC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,QAAQ,kBAAkB,CAAC,SAAS,EAAE,CAAC;gBACrC,KAAK,UAAU;oBACb,kBAAkB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;oBAC5C,MAAM;gBACR,KAAK,UAAU;oBACb,kBAAkB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;oBAC5C,MAAM;YACV,CAAC;YACD,OAAO,kBAAkB,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE;gBACxD,SAAS,EAAE,UAAU;aACtB,CAAC,CAAC;YACH,OAAO,WAAW,CAAC;QACrB,CAAC;IACH,CAAC;IAED,WAAW,CAAC,MAAoB;QAC9B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;YAChE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CACxC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAC/C,CAAC;QACF,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAEnE,MAAM,CAAC,IAAI,EAAE,CAAC;QAEd,IAAI,WAAW,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;YAChD,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,IAAI,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;YAChD,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;aAAM,CAAC;YACN,IAAI,WAAW,CAAC,SAAS,KAAK,UAAU,EAAE,CAAC;gBACzC,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACvC,CAAC;iBAAM,IACL,WAAW,CAAC,SAAS,KAAK,UAAU;gBACpC,WAAW,CAAC,SAAS,KAAK,UAAU,EACpC,CAAC;gBACD,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;IACH,CAAC;IAED,uBAAuB,CAAC,WAA8B;QACpD,MAAM,MAAM,GACV,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CACpC,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,EAAE;YAC1B,QAAQ,cAAc,CAAC,SAAS,EAAE,CAAC;gBACjC,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,IAAI,yBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;wBAAE,OAAO,IAAI,CAAC;oBACnE,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,IAAI,wBAAgB,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;wBAAE,OAAO,IAAI,CAAC;oBAClE,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,gBAAQ,EAAE,gBAAQ,EAAE,gBAAQ,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;wBAChE,OAAO,IAAI,CAAC;oBACd,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,KAAK,KAAK,CAAC,CAAC,CAAC;oBACX,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD;oBACE,OAAO,KAAK,CAAC;YACjB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;IAC9B,CAAC;IAED,iBAAiB,CAAC,WAA8B;QAC9C,IAAI,WAAW,CAAC,GAAG,IAAI,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAEtE,MAAM,GAAG,GAAqB;YAC5B,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,KAAK,EAAE,WAAW,CAAC,GAAG;YACtB,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;YAC9C,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;SACtE,CAAC;QACF,OAAO,GAAG,CAAC;IACb,CAAC;IAED,kBAAkB,CAChB,KAAuB,EACvB,WAA8B;QAE9B,MAAM,iBAAiB,GAA4B;YACjD,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK;YACtB,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI;YACpB,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;YAC9C,SAAS,EAAE,MAAM,CAAC,MAAM,CACtB,WAAW,CAAC,MAAM,CAAC,MAAM,CACvB,CAAC,GAA6C,EAAE,KAAK,EAAE,EAAE;gBACvD,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE,CAAC;oBACvC,MAAM,MAAM,GAAG,IAAA,+BAAyB,EAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;oBACjE,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC/B,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBACnC,GAAG,CAAC,GAAG,GAAG,IAAI,2BAAmB,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;oBAClE,CAAC;oBACD,OAAO,GAAG,CAAC;gBACb,CAAC;gBACD,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,8BAAsB,CAAC;oBAClD,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI;oBACzB,WAAW,EAAE,KAAK,CAAC,WAAW;iBAC/B,CAAC,CAAC;gBACH,OAAO,GAAG,CAAC;YACb,CAAC,EACD,EAAE,CACH,CACF;SACF,CAAC;QAEF,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,YAAY,CACV,WAA8B,EAC9B,WAA6B,EAC7B,IAAwB,EACxB,UAAkB;QAElB,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YACrB,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC;QAC1C,CAAC;QACD,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;QAEpC,qBAAqB;QACrB,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE;YACjE,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAE/D,MAAM,UAAU,GAAG,IAAA,oCAAmB,EAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACjE,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,KAAK,CAAC;YACf,CAAC;YAED,IAAI,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE,CAAC;gBAC7C,MAAM,MAAM,GAAG,IAAA,+BAAyB,EAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;gBACtE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzB,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,EAAE,CAAC,CAAC;gBACxE,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,OAAO,CAAC,CAAC,IAAA,oCAAmB,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YACpD,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,mBAAmB,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QACD,WAAW,CAAC,gBAAgB,GAAG,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,CACpE,CAAC,SAAS,EAAE,EAAE,CACZ,CACE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAyB,CAAC;YACnE,EAAE,CACH,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,CAAC,CACzC,CAAC;QAEF,wBAAwB;QACxB,MAAM,cAAc,GAAG,WAAW,CAAC,SAAS,IAAI,UAAU,CAAC;QAC3D,MAAM,SAAS,GAAG,IAAA,wBAAgB,EAAC,cAAc,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1C,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC;aAAM,CAAC;YACN,WAAW,CAAC,cAAc,GAAG,SAAS,CAAC;QACzC,CAAC;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACxD,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAE5C,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAEtE,8BAA8B;YAC9B,KAAK,MAAM,KAAK,IAAI,WAAW,CAAC,mBAAmB,EAAE,CAAC;gBACpD,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,WAAW,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YACxE,CAAC;YAED,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjD,yBAAyB;YACzB,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;YACtD,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC;gBACrB,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxD,WAAW,CAAC,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC;gBAC/C,WAAW,CAAC,QAAQ,CAAC,aAAa,GAAG,OAAO,CAAC;YAC/C,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;gBACnB,KAAK,EAAE,WAAW,CAAC,QAAQ,CAAC,KAAK;gBACjC,WAAW;gBACX,MAAM,EAAE,IAAI,mBAAW,CAAC;oBACtB,EAAE,EAAE,WAAW,CAAC,QAAQ,CAAC,cAAc;oBACvC,MAAM,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC;iBACrC,CAAC;aACH,CAAC,CAAC;QACL,CAAC;QAED,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAC9B,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAAkC;QAC/C,MAAM,KAAK,GAAe,EAAE,CAAC;QAE7B,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAC5C,MAAM,uBAAuB,GAC3B,CAAC,QAAQ;gBACT,WAAW,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ;gBACrC,WAAW,CAAC,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC;YAE1C,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;gBACvB,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACxD,IAAI,WAAW,EAAE,CAAC;oBAChB,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;wBAC/B,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;4BACjE,IAAI,uBAAuB,EAAE,CAAC;gCAC5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACnB,CAAC;wBACH,CAAC;6BAAM,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACnB,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YAED,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;gBACzB,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC5D,IAAI,aAAa,EAAE,CAAC;oBAClB,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;wBACjC,IACE,IAAI,CAAC,IAAI,KAAK,aAAa;4BAC3B,IAAI,CAAC,IAAI,KAAK,qBAAqB,EACnC,CAAC;4BACD,IAAI,uBAAuB,EAAE,CAAC;gCAC5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACnB,CAAC;wBACH,CAAC;6BAAM,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACnB,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YAED,IAAI,uBAAuB,EAAE,CAAC;gBAC5B,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;gBAC/C,IAAI,UAAU,EAAE,CAAC;oBACf,KAAK,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,KAAK;QACH,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAC5C,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC5B,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;QACzC,IAAI,CAAC,wBAAwB,CAAC,cAAc,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAC9B,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,CAAC;IAC5C,CAAC;CACF;AA3YD,gDA2YC","sourcesContent":["import { ReceiverDirection, SenderDirections } from \"./const\";\nimport { Event, debug } from \"./imports/common\";\nimport {\n  MediaStream,\n  type MediaStreamTrack,\n  type RTCRtpCodecParameters,\n  RTCRtpCodingParameters,\n  type RTCRtpParameters,\n  type RTCRtpReceiveParameters,\n  RTCRtpReceiver,\n  RTCRtpRtxParameters,\n  RTCRtpSender,\n  RTCRtpTransceiver,\n  Recvonly,\n  type RtpRouter,\n  Sendonly,\n  Sendrecv,\n  type TransceiverOptions,\n} from \"./media\";\nimport type { RTCStats } from \"./media/stats\";\nimport { type PeerConfig, findCodecByMimeType } from \"./peerConnection\";\nimport { type MediaDescription, codecParametersFromString } from \"./sdp\";\nimport type { RTCDtlsTransport } from \"./transport/dtls\";\nimport type { Kind } from \"./types/domain\";\nimport { reverseDirection } from \"./utils\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/rtpTransceiverManager.ts\");\n\nexport class TransceiverManager {\n  private readonly transceivers: RTCRtpTransceiver[] = [];\n\n  readonly onTransceiverAdded = new Event<[RTCRtpTransceiver]>();\n  readonly onRemoteTransceiverAdded = new Event<[RTCRtpTransceiver]>();\n  readonly onTrack = new Event<\n    [\n      {\n        track: MediaStreamTrack;\n        transceiver: RTCRtpTransceiver;\n        stream: MediaStream;\n      },\n    ]\n  >();\n  readonly onNegotiationNeeded = new Event<[]>();\n\n  constructor(\n    private readonly cname: string,\n    private readonly config: Required<PeerConfig>,\n    private readonly router: RtpRouter,\n  ) {}\n\n  getTransceivers(): RTCRtpTransceiver[] {\n    return this.transceivers;\n  }\n\n  getSenders(): RTCRtpSender[] {\n    return this.getTransceivers().map((t) => t.sender);\n  }\n\n  getReceivers() {\n    return this.getTransceivers().map((t) => t.receiver);\n  }\n\n  getTransceiverByMLineIndex(index: number): RTCRtpTransceiver | undefined {\n    return this.transceivers.find(\n      (transceiver) => transceiver.mLineIndex === index,\n    );\n  }\n\n  pushTransceiver(t: RTCRtpTransceiver): void {\n    this.transceivers.push(t);\n  }\n\n  replaceTransceiver(t: RTCRtpTransceiver, index: number): void {\n    this.transceivers[index] = t;\n  }\n\n  addTransceiver(\n    trackOrKind: Kind | MediaStreamTrack,\n    dtlsTransport?: RTCDtlsTransport,\n    options: Partial<TransceiverOptions> = {},\n  ): RTCRtpTransceiver {\n    const kind =\n      typeof trackOrKind === \"string\" ? trackOrKind : trackOrKind.kind;\n\n    const direction = options.direction || \"sendrecv\";\n\n    const sender = new RTCRtpSender(trackOrKind);\n    const receiver = new RTCRtpReceiver(this.config, kind, sender.ssrc);\n    const newTransceiver = new RTCRtpTransceiver(\n      kind,\n      dtlsTransport,\n      receiver,\n      sender,\n      direction,\n    );\n    newTransceiver.options = options;\n    this.router.registerRtpSender(newTransceiver.sender);\n\n    // reuse inactive\n    const inactiveTransceiverIndex = this.transceivers.findIndex(\n      (t) => t.currentDirection === \"inactive\",\n    );\n    const inactiveTransceiver = this.transceivers.find(\n      (t) => t.currentDirection === \"inactive\",\n    );\n    if (inactiveTransceiverIndex > -1 && inactiveTransceiver) {\n      this.replaceTransceiver(newTransceiver, inactiveTransceiverIndex);\n      newTransceiver.mLineIndex = inactiveTransceiver.mLineIndex;\n      inactiveTransceiver.setCurrentDirection(undefined);\n    } else {\n      this.pushTransceiver(newTransceiver);\n    }\n    this.onTransceiverAdded.execute(newTransceiver);\n\n    return newTransceiver;\n  }\n\n  addTrack(track: MediaStreamTrack, ms?: MediaStream): RTCRtpTransceiver {\n    if (this.getSenders().find((sender) => sender.track?.uuid === track.uuid)) {\n      throw new Error(\"Track already added\");\n    }\n\n    const emptyTrackSenderTransceiver = this.transceivers.find(\n      (t) =>\n        t.sender.track == undefined &&\n        t.kind === track.kind &&\n        SenderDirections.includes(t.direction) === true,\n    );\n    if (emptyTrackSenderTransceiver) {\n      const sender = emptyTrackSenderTransceiver.sender;\n      sender.registerTrack(track);\n      return emptyTrackSenderTransceiver;\n    }\n\n    const notSendTransceiver = this.transceivers.find(\n      (t) =>\n        t.sender.track == undefined &&\n        t.kind === track.kind &&\n        SenderDirections.includes(t.direction) === false &&\n        !t.usedForSender,\n    );\n    if (notSendTransceiver) {\n      const sender = notSendTransceiver.sender;\n      sender.registerTrack(track);\n      switch (notSendTransceiver.direction) {\n        case \"recvonly\":\n          notSendTransceiver.setDirection(\"sendrecv\");\n          break;\n        case \"inactive\":\n          notSendTransceiver.setDirection(\"sendonly\");\n          break;\n      }\n      return notSendTransceiver;\n    } else {\n      const transceiver = this.addTransceiver(track, undefined, {\n        direction: \"sendrecv\",\n      });\n      return transceiver;\n    }\n  }\n\n  removeTrack(sender: RTCRtpSender): void {\n    if (!this.getSenders().find(({ ssrc }) => sender.ssrc === ssrc)) {\n      throw new Error(\"Sender does not exist\");\n    }\n\n    const transceiver = this.transceivers.find(\n      ({ sender: { ssrc } }) => sender.ssrc === ssrc,\n    );\n    if (!transceiver) throw new Error(\"No matching transceiver found\");\n\n    sender.stop();\n\n    if (transceiver.currentDirection === \"recvonly\") {\n      this.onNegotiationNeeded.execute();\n      return;\n    }\n\n    if (transceiver.stopping || transceiver.stopped) {\n      transceiver.setDirection(\"inactive\");\n    } else {\n      if (transceiver.direction === \"sendrecv\") {\n        transceiver.setDirection(\"recvonly\");\n      } else if (\n        transceiver.direction === \"sendonly\" ||\n        transceiver.direction === \"recvonly\"\n      ) {\n        transceiver.setDirection(\"inactive\");\n      }\n    }\n  }\n\n  assignTransceiverCodecs(transceiver: RTCRtpTransceiver): void {\n    const codecs = (\n      this.config.codecs[transceiver.kind] as RTCRtpCodecParameters[]\n    ).filter((codecCandidate) => {\n      switch (codecCandidate.direction) {\n        case \"recvonly\": {\n          if (ReceiverDirection.includes(transceiver.direction)) return true;\n          return false;\n        }\n        case \"sendonly\": {\n          if (SenderDirections.includes(transceiver.direction)) return true;\n          return false;\n        }\n        case \"sendrecv\": {\n          if ([Sendrecv, Recvonly, Sendonly].includes(transceiver.direction))\n            return true;\n          return false;\n        }\n        case \"all\": {\n          return true;\n        }\n        default:\n          return false;\n      }\n    });\n    transceiver.codecs = codecs;\n  }\n\n  getLocalRtpParams(transceiver: RTCRtpTransceiver): RTCRtpParameters {\n    if (transceiver.mid == undefined) throw new Error(\"mid not assigned\");\n\n    const rtp: RTCRtpParameters = {\n      codecs: transceiver.codecs,\n      muxId: transceiver.mid,\n      headerExtensions: transceiver.headerExtensions,\n      rtcp: { cname: this.cname, ssrc: transceiver.sender.ssrc, mux: true },\n    };\n    return rtp;\n  }\n\n  getRemoteRtpParams(\n    media: MediaDescription,\n    transceiver: RTCRtpTransceiver,\n  ): RTCRtpReceiveParameters {\n    const receiveParameters: RTCRtpReceiveParameters = {\n      muxId: media.rtp.muxId,\n      rtcp: media.rtp.rtcp,\n      codecs: transceiver.codecs,\n      headerExtensions: transceiver.headerExtensions,\n      encodings: Object.values(\n        transceiver.codecs.reduce(\n          (acc: { [pt: number]: RTCRtpCodingParameters }, codec) => {\n            if (codec.name.toLowerCase() === \"rtx\") {\n              const params = codecParametersFromString(codec.parameters ?? \"\");\n              const apt = acc[params[\"apt\"]];\n              if (apt && media.ssrc.length === 2) {\n                apt.rtx = new RTCRtpRtxParameters({ ssrc: media.ssrc[1].ssrc });\n              }\n              return acc;\n            }\n            acc[codec.payloadType] = new RTCRtpCodingParameters({\n              ssrc: media.ssrc[0]?.ssrc,\n              payloadType: codec.payloadType,\n            });\n            return acc;\n          },\n          {},\n        ),\n      ),\n    };\n\n    return receiveParameters;\n  }\n\n  setRemoteRTP(\n    transceiver: RTCRtpTransceiver,\n    remoteMedia: MediaDescription,\n    type: \"offer\" | \"answer\",\n    mLineIndex: number,\n  ): void {\n    if (!transceiver.mid) {\n      transceiver.mid = remoteMedia.rtp.muxId;\n    }\n    transceiver.mLineIndex = mLineIndex;\n\n    // # negotiate codecs\n    transceiver.codecs = remoteMedia.rtp.codecs.filter((remoteCodec) => {\n      const localCodecs = this.config.codecs[remoteMedia.kind] || [];\n\n      const existCodec = findCodecByMimeType(localCodecs, remoteCodec);\n      if (!existCodec) {\n        return false;\n      }\n\n      if (existCodec?.name.toLowerCase() === \"rtx\") {\n        const params = codecParametersFromString(existCodec.parameters ?? \"\");\n        const pt = params[\"apt\"];\n        const origin = remoteMedia.rtp.codecs.find((c) => c.payloadType === pt);\n        if (!origin) {\n          return false;\n        }\n        return !!findCodecByMimeType(localCodecs, origin);\n      }\n\n      return true;\n    });\n\n    log(\"negotiated codecs\", transceiver.codecs);\n    if (transceiver.codecs.length === 0) {\n      throw new Error(\"negotiate codecs failed.\");\n    }\n    transceiver.headerExtensions = remoteMedia.rtp.headerExtensions.filter(\n      (extension) =>\n        (\n          this.config.headerExtensions[remoteMedia.kind as \"audio\" | \"video\"] ||\n          []\n        ).find((v) => v.uri === extension.uri),\n    );\n\n    // # configure direction\n    const mediaDirection = remoteMedia.direction ?? \"inactive\";\n    const direction = reverseDirection(mediaDirection);\n    if ([\"answer\", \"pranswer\"].includes(type)) {\n      transceiver.setCurrentDirection(direction);\n    } else {\n      transceiver.offerDirection = direction;\n    }\n    const localParams = this.getLocalRtpParams(transceiver);\n    transceiver.sender.prepareSend(localParams);\n\n    if ([\"recvonly\", \"sendrecv\"].includes(transceiver.direction)) {\n      const remotePrams = this.getRemoteRtpParams(remoteMedia, transceiver);\n\n      // register simulcast receiver\n      for (const param of remoteMedia.simulcastParameters) {\n        this.router.registerRtpReceiverByRid(transceiver, param, remotePrams);\n      }\n\n      transceiver.receiver.prepareReceive(remotePrams);\n      // register ssrc receiver\n      this.router.registerRtpReceiverBySsrc(transceiver, remotePrams);\n    }\n    if ([\"sendonly\", \"sendrecv\"].includes(mediaDirection)) {\n      if (remoteMedia.msid) {\n        const [streamId, trackId] = remoteMedia.msid.split(\" \");\n        transceiver.receiver.remoteStreamId = streamId;\n        transceiver.receiver.remoteTrackId = trackId;\n      }\n\n      this.onTrack.execute({\n        track: transceiver.receiver.track,\n        transceiver,\n        stream: new MediaStream({\n          id: transceiver.receiver.remoteStreamId,\n          tracks: [transceiver.receiver.track],\n        }),\n      });\n    }\n\n    if (remoteMedia.ssrc[0]?.ssrc) {\n      transceiver.receiver.setupTWCC(remoteMedia.ssrc[0].ssrc);\n    }\n  }\n\n  async getStats(selector?: MediaStreamTrack | null): Promise<RTCStats[]> {\n    const stats: RTCStats[] = [];\n\n    for (const transceiver of this.transceivers) {\n      const includeTransceiverStats =\n        !selector ||\n        transceiver.sender.track === selector ||\n        transceiver.receiver.track === selector;\n\n      if (transceiver.sender) {\n        const senderStats = await transceiver.sender.getStats();\n        if (senderStats) {\n          for (const stat of senderStats) {\n            if (stat.type === \"outbound-rtp\" || stat.type === \"media-source\") {\n              if (includeTransceiverStats) {\n                stats.push(stat);\n              }\n            } else {\n              stats.push(stat);\n            }\n          }\n        }\n      }\n\n      if (transceiver.receiver) {\n        const receiverStats = await transceiver.receiver.getStats();\n        if (receiverStats) {\n          for (const stat of receiverStats) {\n            if (\n              stat.type === \"inbound-rtp\" ||\n              stat.type === \"remote-outbound-rtp\"\n            ) {\n              if (includeTransceiverStats) {\n                stats.push(stat);\n              }\n            } else {\n              stats.push(stat);\n            }\n          }\n        }\n      }\n\n      if (includeTransceiverStats) {\n        const codecStats = transceiver.getCodecStats();\n        if (codecStats) {\n          stats.push(...codecStats);\n        }\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * 全トランシーバーのreceiver/senderのstopを呼ぶcloseメソッド\n   */\n  close() {\n    for (const transceiver of this.transceivers) {\n      transceiver.receiver.stop();\n      transceiver.sender.stop();\n    }\n\n    this.onTransceiverAdded.allUnsubscribe();\n    this.onRemoteTransceiverAdded.allUnsubscribe();\n    this.onTrack.allUnsubscribe();\n    this.onNegotiationNeeded.allUnsubscribe();\n  }\n}\n"]}