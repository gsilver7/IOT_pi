{"version":3,"file":"dtls.js","sourceRoot":"","sources":["../../../../src/transport/dtls.ts"],"names":[],"mappings":"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","sourcesContent":["import { Certificate, PrivateKey } from \"@fidm/x509\";\n\nimport { setTimeout } from \"timers/promises\";\nimport { v4 } from \"uuid\";\nimport { Event, type Transport } from \"../imports/common\";\n\nimport type { AddressInfo } from \"net\";\nimport {\n  CipherContext,\n  DtlsClient,\n  DtlsServer,\n  type DtlsSocket,\n  HashAlgorithm,\n  NamedCurveAlgorithm,\n  SignatureAlgorithm,\n  type SignatureHash,\n} from \"../imports/dtls\";\nimport type { IceConnection } from \"../imports/ice\";\nimport {\n  type RtcpPacket,\n  RtcpPacketConverter,\n  type RtpHeader,\n  RtpPacket,\n  SrtcpSession,\n  type SrtpProfile,\n  SrtpSession,\n  debug,\n  isMedia,\n  isRtcp,\n  keyLength,\n  saltLength,\n} from \"../imports/rtp\";\nimport {\n  type RTCCertificateStats,\n  type RTCIceCandidatePairStats,\n  type RTCIceCandidateStats,\n  type RTCStats,\n  type RTCTransportStats,\n  generateStatsId,\n  getStatsTimestamp,\n} from \"../media/stats\";\nimport type { PeerConfig } from \"../peerConnection\";\nimport { fingerprint, isDtls } from \"../utils\";\nimport type { RTCIceTransport } from \"./ice\";\n\nconst log = debug(\"werift:packages/webrtc/src/transport/dtls.ts\");\n\nexport interface DtlsTransportStats {\n  bytesSent: number;\n  bytesReceived: number;\n  packetsSent: number;\n  packetsReceived: number;\n}\n\nexport class RTCDtlsTransport implements DtlsTransportStats {\n  id = v4();\n  state: DtlsState = \"new\";\n  role: DtlsRole = \"auto\";\n  srtpStarted = false;\n  transportSequenceNumber = 0;\n\n  // Statistics tracking\n  public bytesSent = 0;\n  public bytesReceived = 0;\n  public packetsSent = 0;\n  public packetsReceived = 0;\n\n  dataReceiver: (buf: Buffer) => void = () => {};\n  dtls?: DtlsSocket;\n  srtp!: SrtpSession;\n  srtcp!: SrtcpSession;\n\n  readonly onStateChange = new Event<[DtlsState]>();\n  readonly onRtcp = new Event<[RtcpPacket]>();\n  readonly onRtp = new Event<[RtpPacket]>();\n\n  static localCertificate?: RTCCertificate;\n  static localCertificatePromise?: Promise<RTCCertificate>;\n  private remoteParameters?: RTCDtlsParameters;\n\n  constructor(\n    readonly config: PeerConfig,\n    readonly iceTransport: RTCIceTransport,\n    public localCertificate?: RTCCertificate,\n    private readonly srtpProfiles: SrtpProfile[] = [],\n  ) {\n    this.localCertificate ??= RTCDtlsTransport.localCertificate;\n  }\n\n  get localParameters() {\n    return new RTCDtlsParameters(\n      this.localCertificate ? this.localCertificate.getFingerprints() : [],\n      this.role,\n    );\n  }\n\n  static async SetupCertificate() {\n    if (this.localCertificate) {\n      return this.localCertificate;\n    }\n\n    if (this.localCertificatePromise) {\n      return this.localCertificatePromise;\n    }\n\n    this.localCertificatePromise = (async () => {\n      const { certPem, keyPem, signatureHash } =\n        await CipherContext.createSelfSignedCertificateWithKey(\n          {\n            signature: SignatureAlgorithm.ecdsa_3,\n            hash: HashAlgorithm.sha256_4,\n          },\n          NamedCurveAlgorithm.secp256r1_23,\n        );\n      this.localCertificate = new RTCCertificate(\n        keyPem,\n        certPem,\n        signatureHash,\n      );\n      return this.localCertificate;\n    })();\n\n    return this.localCertificatePromise;\n  }\n\n  setRemoteParams(remoteParameters: RTCDtlsParameters) {\n    this.remoteParameters = remoteParameters;\n  }\n\n  async start() {\n    if (this.state !== \"new\") {\n      throw new Error(\"state must be new\");\n    }\n    if (this.remoteParameters?.fingerprints.length === 0) {\n      throw new Error(\"remote fingerprint not exist\");\n    }\n\n    if (this.role === \"auto\") {\n      if (this.iceTransport.role === \"controlling\") {\n        this.role = \"server\";\n      } else {\n        this.role = \"client\";\n      }\n    }\n\n    this.setState(\"connecting\");\n\n    await new Promise<void>(async (r, f) => {\n      if (this.role === \"server\") {\n        this.dtls = new DtlsServer({\n          cert: this.localCertificate?.certPem,\n          key: this.localCertificate?.privateKey,\n          signatureHash: this.localCertificate?.signatureHash,\n          transport: createIceTransport(this.iceTransport.connection),\n          srtpProfiles: this.srtpProfiles,\n          extendedMasterSecret: true,\n          // certificateRequest: true,\n        });\n      } else {\n        this.dtls = new DtlsClient({\n          cert: this.localCertificate?.certPem,\n          key: this.localCertificate?.privateKey,\n          signatureHash: this.localCertificate?.signatureHash,\n          transport: createIceTransport(this.iceTransport.connection),\n          srtpProfiles: this.srtpProfiles,\n          extendedMasterSecret: true,\n        });\n      }\n      this.dtls.onData.subscribe((buf) => {\n        if (\n          this.config.debug.inboundPacketLoss &&\n          this.config.debug.inboundPacketLoss / 100 < Math.random()\n        ) {\n          return;\n        }\n        this.dataReceiver(buf);\n      });\n      this.dtls.onClose.subscribe(() => {\n        this.setState(\"closed\");\n      });\n      this.dtls.onConnect.once(r);\n      this.dtls.onError.once((error) => {\n        this.setState(\"failed\");\n        log(\"dtls failed\", error);\n        f(error);\n      });\n\n      if (this.dtls instanceof DtlsClient) {\n        await setTimeout(100);\n        this.dtls.connect().catch((error) => {\n          this.setState(\"failed\");\n          log(\"dtls connect failed\", error);\n          f(error);\n        });\n      }\n    });\n\n    if (this.srtpProfiles.length > 0) {\n      this.startSrtp();\n    }\n    this.dtls!.onConnect.subscribe(() => {\n      this.updateSrtpSession();\n      this.setState(\"connected\");\n    });\n    this.setState(\"connected\");\n\n    log(\"dtls connected\");\n  }\n\n  updateSrtpSession() {\n    if (!this.dtls) throw new Error();\n\n    const profile = this.dtls.srtp.srtpProfile;\n    if (!profile) {\n      throw new Error(\"need srtpProfile\");\n    }\n    log(\"selected SRTP Profile\", profile);\n\n    const { localKey, localSalt, remoteKey, remoteSalt } =\n      this.dtls.extractSessionKeys(keyLength(profile), saltLength(profile));\n\n    const config = {\n      keys: {\n        localMasterKey: localKey,\n        localMasterSalt: localSalt,\n        remoteMasterKey: remoteKey,\n        remoteMasterSalt: remoteSalt,\n      },\n      profile,\n    };\n    this.srtp = new SrtpSession(config);\n    this.srtcp = new SrtcpSession(config);\n  }\n\n  startSrtp() {\n    if (this.srtpStarted) return;\n    this.srtpStarted = true;\n\n    this.updateSrtpSession();\n\n    this.iceTransport.connection.onData.subscribe((data) => {\n      if (\n        this.config.debug.inboundPacketLoss &&\n        this.config.debug.inboundPacketLoss / 100 < Math.random()\n      ) {\n        return;\n      }\n\n      if (!isMedia(data)) return;\n\n      // Track received data statistics\n      this.bytesReceived += data.length;\n      this.packetsReceived++;\n\n      if (isRtcp(data)) {\n        const dec = this.srtcp.decrypt(data);\n        const rtcpPackets = RtcpPacketConverter.deSerialize(dec);\n        for (const rtcp of rtcpPackets) {\n          try {\n            this.onRtcp.execute(rtcp);\n          } catch (error) {\n            log(\"RTCP error\", error);\n          }\n        }\n      } else {\n        const dec = this.srtp.decrypt(data);\n        const rtp = RtpPacket.deSerialize(dec);\n        try {\n          this.onRtp.execute(rtp);\n        } catch (error) {\n          log(\"RTP error\", error);\n        }\n      }\n    });\n  }\n\n  readonly sendData = async (data: Buffer) => {\n    if (\n      this.config.debug.outboundPacketLoss &&\n      this.config.debug.outboundPacketLoss / 100 < Math.random()\n    ) {\n      return;\n    }\n\n    if (!this.dtls) {\n      throw new Error(\"dtls not established\");\n    }\n    await this.dtls.send(data);\n  };\n\n  async sendRtp(payload: Buffer, header: RtpHeader): Promise<number> {\n    try {\n      const enc = this.srtp.encrypt(payload, header);\n\n      if (\n        this.config.debug.outboundPacketLoss &&\n        this.config.debug.outboundPacketLoss / 100 < Math.random()\n      ) {\n        return enc.length;\n      }\n\n      // Track statistics\n      this.bytesSent += enc.length;\n      this.packetsSent++;\n\n      await this.iceTransport.connection.send(enc).catch(() => {});\n      return enc.length;\n    } catch (error) {\n      log(\"failed to send\", error);\n      return 0;\n    }\n  }\n\n  async sendRtcp(packets: RtcpPacket[]) {\n    const payload = Buffer.concat(packets.map((packet) => packet.serialize()));\n    const enc = this.srtcp.encrypt(payload);\n\n    if (\n      this.config.debug.outboundPacketLoss &&\n      this.config.debug.outboundPacketLoss / 100 < Math.random()\n    ) {\n      return enc.length;\n    }\n\n    // Track statistics\n    this.bytesSent += enc.length;\n    this.packetsSent++;\n\n    await this.iceTransport.connection.send(enc).catch(() => {});\n  }\n\n  private setState(state: DtlsState) {\n    if (state != this.state) {\n      this.state = state;\n      this.onStateChange.execute(state);\n    }\n  }\n\n  async stop() {\n    this.setState(\"closed\");\n    // todo impl send alert\n    await this.iceTransport.stop();\n  }\n\n  async getStats(): Promise<RTCStats[]> {\n    const timestamp = getStatsTimestamp();\n    const stats: RTCStats[] = [];\n\n    const transportId = generateStatsId(\"transport\", this.id);\n\n    // Transport stats\n    const transportStats: RTCTransportStats = {\n      type: \"transport\",\n      id: transportId,\n      timestamp,\n      bytesSent: this.bytesSent,\n      bytesReceived: this.bytesReceived,\n      packetsSent: this.packetsSent,\n      packetsReceived: this.packetsReceived,\n      dtlsState: this.state,\n      iceState: this.iceTransport.state,\n      selectedCandidatePairId: this.iceTransport.connection.nominated\n        ? generateStatsId(\n            \"candidate-pair\",\n            this.iceTransport.connection.nominated.localCandidate.foundation,\n            this.iceTransport.connection.nominated.remoteCandidate.foundation,\n          )\n        : undefined,\n      localCertificateId: this.localCertificate\n        ? generateStatsId(\"certificate\", \"local\")\n        : undefined,\n      remoteCertificateId: this.remoteParameters\n        ? generateStatsId(\"certificate\", \"remote\")\n        : undefined,\n      dtlsRole: this.role === \"auto\" ? undefined : this.role,\n    };\n    stats.push(transportStats);\n\n    // Certificate stats\n    if (this.localCertificate) {\n      const fingerprints = this.localCertificate.getFingerprints();\n      if (fingerprints.length > 0) {\n        const certStats: RTCCertificateStats = {\n          type: \"certificate\",\n          id: generateStatsId(\"certificate\", \"local\"),\n          timestamp,\n          fingerprint: fingerprints[0].value,\n          fingerprintAlgorithm: fingerprints[0].algorithm,\n          base64Certificate: Buffer.from(\n            this.localCertificate.certPem,\n          ).toString(\"base64\"),\n        };\n        stats.push(certStats);\n      }\n    }\n\n    if (\n      this.remoteParameters &&\n      this.remoteParameters.fingerprints.length > 0\n    ) {\n      const certStats: RTCCertificateStats = {\n        type: \"certificate\",\n        id: generateStatsId(\"certificate\", \"remote\"),\n        timestamp,\n        fingerprint: this.remoteParameters.fingerprints[0].value,\n        fingerprintAlgorithm: this.remoteParameters.fingerprints[0].algorithm,\n        base64Certificate: \"\", // Remote certificate content not available\n      };\n      stats.push(certStats);\n    }\n\n    // Get ICE stats\n    const iceStats = await this.iceTransport.getStats();\n    stats.push(...iceStats);\n\n    return stats;\n  }\n}\n\nexport const DtlsStates = [\n  \"new\",\n  \"connecting\",\n  \"connected\",\n  \"closed\",\n  \"failed\",\n] as const;\nexport type DtlsState = (typeof DtlsStates)[number];\n\nexport type DtlsRole = \"auto\" | \"server\" | \"client\";\n\nexport class RTCCertificate {\n  publicKey: string;\n  privateKey: string;\n\n  constructor(\n    privateKeyPem: string,\n    public certPem: string,\n    public signatureHash: SignatureHash,\n  ) {\n    const cert = Certificate.fromPEM(Buffer.from(certPem));\n    this.publicKey = cert.publicKey.toPEM();\n    this.privateKey = PrivateKey.fromPEM(Buffer.from(privateKeyPem)).toPEM();\n  }\n\n  getFingerprints(): RTCDtlsFingerprint[] {\n    return [\n      new RTCDtlsFingerprint(\n        \"sha-256\",\n        fingerprint(\n          Certificate.fromPEM(Buffer.from(this.certPem)).raw,\n          \"sha256\",\n        ),\n      ),\n    ];\n  }\n}\n\nexport type DtlsKeys = {\n  certPem: string;\n  keyPem: string;\n  signatureHash: SignatureHash;\n};\n\nexport class RTCDtlsFingerprint {\n  constructor(\n    public algorithm: string,\n    public value: string,\n  ) {}\n}\n\nexport class RTCDtlsParameters {\n  constructor(\n    public fingerprints: RTCDtlsFingerprint[] = [],\n    public role: \"auto\" | \"client\" | \"server\",\n  ) {}\n}\n\nclass IceTransport implements Transport {\n  constructor(private ice: IceConnection) {\n    ice.onData.subscribe((buf) => {\n      if (isDtls(buf)) {\n        if (this.onData) {\n          this.onData(buf);\n        }\n      }\n    });\n  }\n  onData: (buf: Buffer) => void = () => {};\n\n  get address() {\n    return {} as AddressInfo;\n  }\n\n  type: string = \"ice\";\n\n  readonly send = (data: Buffer) => {\n    return this.ice.send(data);\n  };\n\n  async close() {\n    this.ice.close();\n  }\n}\n\nconst createIceTransport = (ice: IceConnection) => new IceTransport(ice);\n"]}