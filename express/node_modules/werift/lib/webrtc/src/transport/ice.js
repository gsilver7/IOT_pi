"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RTCIceParameters = exports.IceCandidate = exports.RTCIceCandidate = exports.RTCIceGatherer = exports.IceGathererStates = exports.IceTransportStates = exports.RTCIceTransport = void 0;
exports.candidateFromIce = candidateFromIce;
exports.candidateToIce = candidateToIce;
const uuid_1 = require("uuid");
const common_1 = require("../imports/common");
const src_1 = require("../../../ice/src");
const stats_1 = require("../media/stats");
const sdp_1 = require("../sdp");
const log = (0, common_1.debug)("werift:packages/webrtc/src/transport/ice.ts");
/**
 *                                          +------------+
                                            |            |
                                            |disconnected|
                                            |            |
                                            +------------+
                                            ^           ^
                                            |           |
+------+      +----------+      +-----------+      +----------+
|      |      |          |      |           |      |          |
| new  | ---> | checking | ---> | connected | ---> | completed|
|      |      |          |      |           |      |          |
+------+      +----+-----+      +-----------+      +----------+
                    |
                    |
                    v
                +-------+
                |       |
                | failed|
                |       |
                +-------+
 */
class RTCIceTransport {
    constructor(iceGather) {
        Object.defineProperty(this, "iceGather", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: iceGather
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, uuid_1.v4)()
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "new"
        });
        Object.defineProperty(this, "waitStart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "renominating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "onStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onIceCandidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "onNegotiationNeeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        Object.defineProperty(this, "addRemoteCandidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (candidate) => {
                if (!this.connection.remoteCandidatesEnd) {
                    if (!candidate) {
                        return this.connection.addRemoteCandidate(undefined);
                    }
                    else {
                        return this.connection.addRemoteCandidate(candidateToIce(candidate));
                    }
                }
            }
        });
        this.connection = this.iceGather.connection;
        this.connection.stateChanged.subscribe((state) => {
            this.setState(state);
        });
        this.iceGather.onIceCandidate = (candidate) => {
            this.onIceCandidate.execute(candidate);
        };
    }
    get role() {
        if (this.connection.iceControlling)
            return "controlling";
        else
            return "controlled";
    }
    get gatheringState() {
        return this.iceGather.gatheringState;
    }
    get localCandidates() {
        return this.iceGather.localCandidates;
    }
    get localParameters() {
        return this.iceGather.localParameters;
    }
    setState(state) {
        if (state !== this.state) {
            this.state = state;
            this.onStateChange.execute(state);
        }
    }
    gather() {
        return this.iceGather.gather();
    }
    setRemoteParams(remoteParameters, renomination = false) {
        if (renomination) {
            this.renominating = true;
        }
        if (this.connection.remoteUsername &&
            this.connection.remotePassword &&
            (this.connection.remoteUsername !== remoteParameters.usernameFragment ||
                this.connection.remotePassword !== remoteParameters.password)) {
            if (this.renominating) {
                log("renomination", remoteParameters);
                this.connection.resetNominatedPair();
                this.renominating = false;
            }
            else {
                log("restart", remoteParameters);
                this.restart();
            }
        }
        this.connection.setRemoteParams(remoteParameters);
    }
    restart() {
        this.connection.restart();
        this.setState("new");
        this.iceGather.gatheringState = "new";
        this.waitStart = undefined;
        this.onNegotiationNeeded.execute();
    }
    async start() {
        if (this.state === "closed") {
            throw new Error("RTCIceTransport is closed");
        }
        if (!this.connection.remotePassword || !this.connection.remoteUsername) {
            throw new Error("remoteParams missing");
        }
        if (this.waitStart) {
            await this.waitStart.asPromise();
        }
        this.waitStart = new common_1.Event();
        this.setState("checking");
        try {
            await this.connection.connect();
        }
        catch (error) {
            this.setState("failed");
            throw error;
        }
        this.waitStart.execute();
        this.waitStart.complete();
        this.waitStart = undefined;
    }
    async stop() {
        if (this.state !== "closed") {
            this.setState("closed");
            await this.connection.close();
        }
        this.onStateChange.complete();
        this.onIceCandidate.complete();
        this.onNegotiationNeeded.complete();
    }
    async getStats() {
        const timestamp = (0, stats_1.getStatsTimestamp)();
        const stats = [];
        // Local candidates
        for (const candidate of this.localCandidates) {
            const candidateStats = {
                type: "local-candidate",
                id: (0, stats_1.generateStatsId)("local-candidate", candidate.foundation),
                timestamp,
                transportId: (0, stats_1.generateStatsId)("transport", this.id),
                address: candidate.ip,
                port: candidate.port,
                protocol: candidate.protocol,
                candidateType: candidate.type,
                priority: candidate.priority,
                foundation: candidate.foundation,
            };
            stats.push(candidateStats);
        }
        // Remote candidates
        for (const candidate of this.connection.remoteCandidates) {
            const ice = candidateFromIce(candidate);
            const candidateStats = {
                type: "remote-candidate",
                id: (0, stats_1.generateStatsId)("remote-candidate", ice.foundation),
                timestamp,
                transportId: (0, stats_1.generateStatsId)("transport", this.id),
                address: ice.ip,
                port: ice.port,
                protocol: ice.protocol,
                candidateType: ice.type,
                priority: ice.priority,
                foundation: ice.foundation,
            };
            stats.push(candidateStats);
        }
        // Candidate pairs
        const pairs = this.connection?.candidatePairs
            ? [
                ...this.connection.candidatePairs.filter((p) => p.nominated),
                ...this.connection.candidatePairs.filter((p) => !p.nominated),
            ]
            : [];
        for (const pair of pairs) {
            const pairStats = {
                type: "candidate-pair",
                id: (0, stats_1.generateStatsId)("candidate-pair", pair.foundation),
                timestamp,
                transportId: (0, stats_1.generateStatsId)("transport", this.id),
                localCandidateId: (0, stats_1.generateStatsId)("local-candidate", pair.localCandidate.foundation),
                remoteCandidateId: (0, stats_1.generateStatsId)("remote-candidate", pair.remoteCandidate.foundation),
                state: pair.state,
                nominated: pair.nominated,
                packetsSent: pair.packetsSent,
                packetsReceived: pair.packetsReceived,
                bytesSent: pair.bytesSent,
                bytesReceived: pair.bytesReceived,
                currentRoundTripTime: pair.rtt,
            };
            stats.push(pairStats);
        }
        return stats;
    }
}
exports.RTCIceTransport = RTCIceTransport;
exports.IceTransportStates = [
    "new",
    "checking",
    "connected",
    "completed",
    "disconnected",
    "failed",
    "closed",
];
exports.IceGathererStates = ["new", "gathering", "complete"];
class RTCIceGatherer {
    constructor(options = {}) {
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
        });
        Object.defineProperty(this, "onIceCandidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => { }
        });
        Object.defineProperty(this, "gatheringState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "new"
        });
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onGatheringStateChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Event()
        });
        this.connection = new src_1.Connection(false, this.options);
        this.connection.onIceCandidate.subscribe((candidate) => {
            this.onIceCandidate(candidateFromIce(candidate));
        });
    }
    async gather() {
        if (this.gatheringState === "new") {
            this.setState("gathering");
            await this.connection.gatherCandidates();
            this.onIceCandidate(undefined);
            this.setState("complete");
        }
    }
    get localCandidates() {
        return this.connection.localCandidates.map(candidateFromIce);
    }
    get localParameters() {
        const params = new RTCIceParameters({
            usernameFragment: this.connection.localUsername,
            password: this.connection.localPassword,
        });
        return params;
    }
    setState(state) {
        if (state !== this.gatheringState) {
            this.gatheringState = state;
            this.onGatheringStateChange.execute(state);
        }
    }
}
exports.RTCIceGatherer = RTCIceGatherer;
function candidateFromIce(c) {
    const candidate = new IceCandidate(c.component, c.foundation, c.host, c.port, c.priority, c.transport, c.type, c.generation, c.ufrag);
    candidate.relatedAddress = c.relatedAddress;
    candidate.relatedPort = c.relatedPort;
    candidate.tcpType = c.tcptype;
    return candidate;
}
function candidateToIce(x) {
    return new src_1.Candidate(x.foundation, x.component, x.protocol, x.priority, x.ip, x.port, x.type, x.relatedAddress, x.relatedPort, x.tcpType, x.generation, x.ufrag);
}
class RTCIceCandidate {
    constructor(props) {
        Object.defineProperty(this, "candidate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sdpMid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sdpMLineIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "usernameFragment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.assign(this, props);
    }
    static fromSdp(sdp) {
        const ice = src_1.Candidate.fromSdp(sdp);
        const candidate = candidateFromIce(ice);
        return candidate.toJSON();
    }
    static isThis(o) {
        if (typeof o?.candidate === "string")
            return true;
    }
    toJSON() {
        return {
            candidate: this.candidate,
            sdpMid: this.sdpMid,
            sdpMLineIndex: this.sdpMLineIndex,
            usernameFragment: this.usernameFragment,
        };
    }
}
exports.RTCIceCandidate = RTCIceCandidate;
class IceCandidate {
    constructor(component, foundation, ip, port, priority, protocol, type, generation, ufrag) {
        Object.defineProperty(this, "component", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: component
        });
        Object.defineProperty(this, "foundation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: foundation
        });
        Object.defineProperty(this, "ip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ip
        });
        Object.defineProperty(this, "port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: port
        });
        Object.defineProperty(this, "priority", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: priority
        });
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protocol
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "generation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: generation
        });
        Object.defineProperty(this, "ufrag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ufrag
        });
        // """
        // The :class:`RTCIceCandidate` interface represents a candidate Interactive
        // Connectivity Establishment (ICE) configuration which may be used to
        // establish an RTCPeerConnection.
        // """
        Object.defineProperty(this, "relatedAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "relatedPort", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sdpMid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sdpMLineIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tcpType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    toJSON() {
        return new RTCIceCandidate({
            candidate: (0, sdp_1.candidateToSdp)(this),
            sdpMLineIndex: this.sdpMLineIndex,
            sdpMid: this.sdpMid,
            usernameFragment: this.ufrag,
        });
    }
    static fromJSON(data) {
        try {
            if (!data.candidate) {
                throw new Error("candidate is required");
            }
            const candidate = (0, sdp_1.candidateFromSdp)(data.candidate);
            candidate.sdpMLineIndex = data.sdpMLineIndex ?? undefined;
            candidate.sdpMid = data.sdpMid ?? undefined;
            return candidate;
        }
        catch (error) { }
    }
}
exports.IceCandidate = IceCandidate;
class RTCIceParameters {
    constructor(props = {}) {
        Object.defineProperty(this, "iceLite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "usernameFragment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.assign(this, props);
    }
}
exports.RTCIceParameters = RTCIceParameters;
//# sourceMappingURL=ice.js.map